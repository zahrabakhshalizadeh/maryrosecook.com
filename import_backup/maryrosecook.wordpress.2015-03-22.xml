<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.1.1" created="2015-03-22 14:09" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Mary Rose Cook</title>
	<link>http://maryrosecook.com/blog</link>
	<description></description>
	<pubDate>Sun, 22 Mar 2015 14:09:27 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://maryrosecook.com/blog</wp:base_site_url>
	<wp:base_blog_url>http://maryrosecook.com/blog</wp:base_blog_url>

	<wp:author><wp:author_id>4</wp:author_id><wp:author_login>maryrosecook</wp:author_login><wp:author_email>maryrosecook@maryrosecook.com</wp:author_email><wp:author_display_name><![CDATA[maryrosecook]]></wp:author_display_name><wp:author_first_name><![CDATA[Mary Rose]]></wp:author_first_name><wp:author_last_name><![CDATA[Cook]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=4.1.1</generator>

	<item>
		<title>Simple and flexible permissions</title>
		<link>http://maryrosecook.com/blog/post/simple-and-flexible-permissions-2</link>
		<pubDate>Thu, 13 Dec 2007 23:29:08 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/simple-and-flexible-permissions-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p>At <a href="http://www.theothermedia.com">my day job</a>, I&#8217;m working on a prototype of a community site.  To support the development of experimental features, I&#8217;ve been building a flexible permissions system which can be summaried thus:</p>

<p>user  &#8212;has&#8212;an&#8212;&gt;  ability  &#8212;for&#8212;an&#8212;&gt;  item</p>

<p>So, users have abilities for items.  That&#8217;s it.  An item is something that needs to have its permissions controlled, a user is a site user and an ability is something the user can do upon the item.  Some examples:</p>

<p>Johnny owns Johnny&#8217;s Diary<br />
Jenny is friends with Johnny<br />
Jenny can edit Johnny&#8217;s Diary</p>

<p>To determine the permissions for something on the site, three questions can be asked: does this user have any of these abilities for this item? which of these items does this user have any of these abilities for? and which users have any of these abilities for this item? Note the permissiveness of letting any one of a list of abilities allow permission to be granted.</p>

<p>The prototype has been coded in <a href="http://www.rubyonrails.org">Ruby on Rails</a>.  The table that stores relationships has columns for an id, a user id, an ability and an item id.  All very straightforward.  However, there is one extra column: item type.  Because items of different types are stored in different tables, the item type column is required to identify the name of the class of which the item is an instance.  When any of the above questions are asked, the relationships table is interrogated by matching the class of the items involved with the values in the item type column.</p>

<p>What makes the system simple and flexible? First, it only consists of one small database table for holding relationships, four methods and 75 lines of code.  Second, the system makes no assumptions about the site - all the semantics of relationships are in the item types and ability names used.  Third, the relationships table can be understood by humans.  Fourth, though it is not recommended, more complex structures can be modelled: relationships between items<sup>1</sup>, reflexive relationships<sup>2</sup>, neuter relationships<sup>3</sup> and state relationships<sup>4</sup>.</p>

<p><sup>1</sup> Where an item has an ability for another item.<br /><sup>2</sup> Where an item or user can have an ability for itself.  For example: ownership.<br /><sup>3</sup> Where a user (or item) just has an ability, but no item upon which it can act.<br /><sup>4</sup> A special type of neuter relationship which models a state of being for a user.</p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>261</wp:post_id>
		<wp:post_date>2007-12-14 00:29:08</wp:post_date>
		<wp:post_date_gmt>2007-12-13 23:29:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>simple-and-flexible-permissions-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/262</link>
		<pubDate>Wed, 12 Dec 2007 23:28:12 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/262</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  On the train to Stansted to pick up Theresa, with Weiner&#8217;s history of the CIA for company. I love little trips like this.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>262</wp:post_id>
		<wp:post_date>2007-12-13 00:28:12</wp:post_date>
		<wp:post_date_gmt>2007-12-12 23:28:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>262</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/264</link>
		<pubDate>Thu, 06 Dec 2007 23:27:18 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/264</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  sitting in the carpark of Taunton station waiting for the coach and playing spot the ATP-goer. Its not a difficult game. A bit like playing count the Converse.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>264</wp:post_id>
		<wp:post_date>2007-12-07 00:27:18</wp:post_date>
		<wp:post_date_gmt>2007-12-06 23:27:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>264</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/265</link>
		<pubDate>Wed, 05 Dec 2007 23:26:21 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/265</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  My housemate, Cathryn, got granted a proper account by the banking gods yesterday.  In celebration, she and I have decided to go to New York City in early February.  I am jolly excited.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date>2007-12-06 00:26:21</wp:post_date>
		<wp:post_date_gmt>2007-12-05 23:26:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>265</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/266</link>
		<pubDate>Mon, 03 Dec 2007 23:25:25 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/266</guid>
		<description></description>
		<content:encoded><![CDATA[

  
  Super excited about <a href="http://www.atpfestival.com/events/portishead/">All Tomorrow&#8217;s Parties</a> this weekend.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>266</wp:post_id>
		<wp:post_date>2007-12-04 00:25:25</wp:post_date>
		<wp:post_date_gmt>2007-12-03 23:25:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>266</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/267</link>
		<pubDate>Wed, 28 Nov 2007 23:24:28 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/267</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  Work on tip top secret project, J&#8217;Adore, begins this weekend.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date>2007-11-29 00:24:28</wp:post_date>
		<wp:post_date_gmt>2007-11-28 23:24:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>267</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Berlin</title>
		<link>http://maryrosecook.com/blog/post/berlin-2</link>
		<pubDate>Sat, 24 Nov 2007 23:22:35 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/berlin-2</guid>
		<description></description>
		<content:encoded><![CDATA[The important things are those that happen between the lines.  I can write the most tangible descriptions, but you will not dream of them, you will not reminisce, because you don't know all the details.

Sunday

Matthew and I sat in Victoria station and ate two Krispy Kreme doughnuts each.

Three hours later, <a href="http://www.myspace.com/goldendiskoship">Theresa</a>, looking cooel in her little lace-ups and red anorak, met Matthew and I at Schodenfeld airport.  We took a cold walk to the underground railway and then videoed each other as we went back into the centre of Berlin.

We arrived at Theresa's beautiful apartment in Latte-Machiatto-land and hung out and drank Yorkshire tea in the kitchen, off-white fridge buzzing in the corner.  I got Theresa to talk to the camera about the venues we would be playing at.

Monday

Matthew and Theresa set off early in the morning, he to interview a prominent architect about shrinking cities, she to her Musicology tutorials at Uni.

I struggled out of bed at noon and then, without map, without directions, without any kind of a grasp of ze Deutsch, I set off to meet Theresa at the Perkammonmuseum.  I asked my way there, making progress street by street, speaking to nice couples and sour-faced women, handsome boys and American tourists.

By some miracle, I arrived on time and hugged Theresa in gladness.  We walked through the streets, passing huge, ruined buildings being renovated, beach-hut coloured apartment blocks.  We walked on broken-up flint pavements and granite paving, went into shops that subsist on disposable incomes and grocers full of old women.  We ate vaffles and swung on swings near a graffiti wall Theresa likes and then went back home and sat on the sofa.

The first gig was at A, a sort of tavern with huge windows that looked out onto quiet streets.  Matthew and I met some of Theresa's friends - Olga, Hauden, Andreas, his housemate Andrea - and we talked about the art scene and short films and plagiarism and squats.

I played first, each song bookended with muted applause and successively quieter "Danke"s.  <a href="http://www.myspace.com/goldendiskoship">Theresa</a> then came on and played a wonderful set, complete with demonic, crawling cat robot, toy guitar riffs and alternately ebullient and mournful video projections.

We got very drunk and finally took a cab home at three a.m.

Tuesday

The three of us took a tour of posh boutiques, ate delicious falafel in floury pancakes at a Turkish place, drank coffee and then, in a highly caffeinated haze, we rushed out onto the street, Theresa saved me from getting hit by a tram, we flagged a taxi, picked up the car and the Golden Disko Ship music stuff, filmed a Ronin-esque journey across Berlin out of the front of the car, picked up the beamer (projector) and arrived at venue two.

The place was a concrete shell with a lamp-post in the centre of the room (complete with yellow bin), a kiosk for beer, a stage (the front representing a window looking into a house).  Sauvern took Theresa and I through our sound-checks and then we drank beer and composed impromptu songs on the piano.  Matt and I discussed the fact that we had begun to speak English like foreigners.  Apostrophes had disappeared from our words and sentences.  Further, we were veering towards German - our "yeah"s had become "ja"s, "hello"s "hallo"s, "pardon"s "was"es

I played first and bellowed my way through the set.    People seemed to enjoy it and when I came off stage, I stood in the corner of the room and hung my head as I withstood a minute's worth of applause and embarrassment.  It struck me that the expression I wear when singing is much the same as the one I wear when kissing.

Theresa suffered through numerous equipment malfunctions and sound problems.  She weathered it, though, and for the first time the sadness of her songs came through live.

For the rest of the evening, we all stood around and talked and drank beer.  Theresa and I played an improvised duet on the piano that stood behind her video projection screen on the stage.

Then we packed up and left.

Wednesday

A lovely, lazy day.  Matthew went to the airport and Theresa and I went to a little cafe in Latte-Machiatto land and ate waffles and ice-cream as <a href="http://www.youtube.com/watch?v=2Bb8P7dfjVw">Jose Gonzalez</a> played in the background.

We drove to the Soviet monument - a park of statues and granite - and stood on the steps of the main building.  The cold bit at our noses and cheeks.  It started to rain, and we stood there in the orange, unheated glow of the stone building.

We ate a Bolivian supper, spent the evening jamming in a rehearsal room and then went home.

Thursday

Theresa lent me her Sonic Youth "Confusion is Sex" t-shirt.  We ate breakfast.  We went to the airport.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>269</wp:post_id>
		<wp:post_date>2007-11-25 00:22:35</wp:post_date>
		<wp:post_date_gmt>2007-11-24 23:22:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>berlin-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/270</link>
		<pubDate>Thu, 22 Nov 2007 23:21:38 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/270</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  I keep on looking up at my iPhone and smiling, the way you look up from a book and smile as you read next to your lover.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>270</wp:post_id>
		<wp:post_date>2007-11-23 00:21:38</wp:post_date>
		<wp:post_date_gmt>2007-11-22 23:21:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>270</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>You snake</title>
		<link>http://maryrosecook.com/blog/post/you-snake-2</link>
		<pubDate>Wed, 21 Nov 2007 23:20:42 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/you-snake-2</guid>
		<description></description>
		<content:encoded><![CDATA[

  
  <p><a href="http://www.sunsetrubdown.net/">Sunset Rubdown</a> were started by Spencer Krug, more famous for his less good band, Wolf Parade.</p>

<p>Sunset Rubdown&#8217;s second record, Shut Up I Am Dreaming, is a wonderful collection of sad songs that have unexpected melody falls that rip your heart out.  The most upsetting is where, on <a href="/mp3s/06%20The%20Empty%20Threats%20of%20Little%20Lord.mp3">The Empty Threats Of Little Lord</a>, Krug sings, &#8220;You snake,&#8221; with such venom that you can hear the curl of his lip.  That part of the song affects me so much that I have been, unsuccessfully, trying to work out who I am associating it with.</p>

<p>Maybe I am thinking of myself.</p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>271</wp:post_id>
		<wp:post_date>2007-11-22 00:20:42</wp:post_date>
		<wp:post_date_gmt>2007-11-21 23:20:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>you-snake-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Harder Faster Louder</title>
		<link>http://maryrosecook.com/blog/post/harder-faster-louder-2</link>
		<pubDate>Tue, 20 Nov 2007 23:19:45 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/harder-faster-louder-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p>I live in London now, but I used to live in Leeds.  When I was there, I was heavily involved with a volunteer-run social centre called <a href="http://www.thecommonplace.org.uk">The Common Place</a>.  I helped with a number of things there, and one of the events we did was a club night called Harder Faster Louder.  The idea was to have an evening where DJs only played the most brutal music, but from a mix of genres: hard-core, death metal, breakcore, dark d&amp;b, gabba, grind and noise.</p>

<p>I had really high expectations, because brutal music seems one of the few genre-spanning genres.  Many people into death metal also like breakcore.  Many people into gabba also like hard-core.</p>

<p>Hardly anyone came.  And I&#8217;ve always hoped that someone else would give it a go and maybe do it better than us and make it work.</p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>272</wp:post_id>
		<wp:post_date>2007-11-21 00:19:45</wp:post_date>
		<wp:post_date_gmt>2007-11-20 23:19:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>harder-faster-louder-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The dynamic performance</title>
		<link>http://maryrosecook.com/blog/post/the-dynamic-performance-2</link>
		<pubDate>Mon, 19 Nov 2007 23:18:50 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/the-dynamic-performance-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  I always knew music was better, and now I know why.

When it is live, as it should be, it is a performance.  Anything can happen when I am on stage.  I might find some new, more beautiful, sadder melody to sing; my laptop might explode; I might be see my own thought in the face of someone in the audience; I might sing louder and change the whole character of the song; I might finally realise what I&#8217;m singing about.

Films are different.  The artist creates the art, distributes it, and then it is static.  That is fine, but I find it less compelling.  The default mode for music is to have some sort of live, unpredictable interaction with the audience, whereas director Q&amp;As just don&#8217;t happen very much.

However, Tracy + The Plastics are slightly different.  They are a band that blend live music with live video.  Wynne Greenwood, playing Tracy, stands on stage and sings in front of a projected video that shows her acting out the parts of her band mates, Nikki (keyboards) and Cola (drums).  The interesting part is that Greenwood puts pauses in her videos and sections where she converses or even argues with her bandmates.

So, what Greenwood has achieved is live, unpredictable film:

<object height="375" width="500"><param name="movie" value="http://www.youtube.com/v/-z_5js8BYms&amp;rel=1" />
<param name="wmode" value="transparent" />
<embed src="http://www.youtube.com/v/-z_5js8BYms&amp;rel=1" wmode="transparent" type="application/x-shockwave-flash" height="475" width="500"></embed></object>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>273</wp:post_id>
		<wp:post_date>2007-11-20 00:18:50</wp:post_date>
		<wp:post_date_gmt>2007-11-19 23:18:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-dynamic-performance-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Leopard super slow</title>
		<link>http://maryrosecook.com/blog/post/leopard-super-slow-2</link>
		<pubDate>Sun, 18 Nov 2007 23:17:54 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/leopard-super-slow-2</guid>
		<description></description>
		<content:encoded><![CDATA[I didn't upgrade my MacBook Pro to 10.5 until I got home from  the Berlin tour. (It would have been a shame if the  <a href="http://www.ableton.com/live">Live</a>/Leopard mix had made my computer explode on stage.)

I finally inserted the DVD and got cracking last night. I selected the upgrade option, some things whizzed, the computer restarted, the desktop appeared, and then everything slowed the fuck down.

Opening a new Finder window took thirty seconds. Launching TextMate took five minutes.

The solution was to do a clean install, then restore my files from a backup.

I have no idea what screwed the upgrade - I had done a clean install of 10.4 relatively recently, I'm not some freakfuck haxie fucktard and my setup and configuration is exactly the same as it was when I was on Tiger.

For reference, I installed on a first generation 15" MacBook Pro w/ 2GB RAM which had the following applications on it: Transmit, TextMate, Quicksilver, Coda, eMusic Download Manager, Firefox, Live 6.0, GraphicConverter, PodWorks, YourSQL, iTerm, Ruby, Rails, MySQL and Tascam US-122 audio/MIDI interface drivers.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>274</wp:post_id>
		<wp:post_date>2007-11-19 00:17:54</wp:post_date>
		<wp:post_date_gmt>2007-11-18 23:17:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>leopard-super-slow-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ich Bin Ein Berliner</title>
		<link>http://maryrosecook.com/blog/post/ich-bin-ein-berliner-2</link>
		<pubDate>Mon, 12 Nov 2007 23:15:57 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/ich-bin-ein-berliner-2</guid>
		<description></description>
		<content:encoded><![CDATA[Theresa, the lovelz ladz who is putting Matt and I up in Berlin and acting as our tour guide, advised me that Germans are sick of people sazing Ich Bin Ein Berliner because thez've heard it a lot before.

We are having lots of fun in Germanz.  Zesterdaz, I went to meet Theresa after she had finished Uni.  Unfortunatelz, Matt took the map so I had to ask mz waz there.  I said a lot of "Etschooldigong", followed bz mz two-second guide proceeding to conduct matters entirelz in English.

 Must go to breakfast with Theresa-resz and Mattieu.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date>2007-11-13 00:15:57</wp:post_date>
		<wp:post_date_gmt>2007-11-12 23:15:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ich-bin-ein-berliner-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  Confessions Of An eBay Opium Addict </title>
		<link>http://maryrosecook.com/blog/post/confessions-of-an-ebay-opium-addict</link>
		<pubDate>Thu, 01 Nov 2007 23:14:00 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/confessions-of-an-ebay-opium-addict</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>276</wp:post_id>
		<wp:post_date>2007-11-02 00:14:00</wp:post_date>
		<wp:post_date_gmt>2007-11-01 23:14:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>confessions-of-an-ebay-opium-addict</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  Extroverted Like Me </title>
		<link>http://maryrosecook.com/blog/post/extroverted-like-me</link>
		<pubDate>Thu, 01 Nov 2007 23:13:03 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/extroverted-like-me</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>277</wp:post_id>
		<wp:post_date>2007-11-02 00:13:03</wp:post_date>
		<wp:post_date_gmt>2007-11-01 23:13:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>extroverted-like-me</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>About Mary and maryrosecook.com</title>
		<link>http://maryrosecook.com/blog/post/about-mary-and-maryrosecook-com-2</link>
		<pubDate>Mon, 29 Oct 2007 23:12:06 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/about-mary-and-maryrosecook-com-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p><strong>Contact</strong></p>

<p><a href="mailto:mary@maryrosecook.com">mary@maryrosecook.com</a></p>

<p><strong>Masks Elsewhere</strong></p>

<p><a href="http://twitter.com/maryrosecook">Twitter</a> | <a href="http://www.werenotthecoolkids.com/">My band</a> |  <a href="http://www.facebook.com/profile.php?id=502815370">Facebook</a> | <a href="http://news.ycombinator.com/user?id=maryrosecook">Hacker News</a> | <a href="http://www.barbelith.com/profile/5420">Barbelith</a></p>

<p><strong>Art</strong></p>

<p>They say that you can judge a person by the contents of their bookshelves.  Well, here is a very small selection of mine:</p>

<p>If you like even one of these bands, check them all out: <a href="http://www.youtube.com/watch?v=2cp1eQnJqiI">Heavens To Betsy</a>, <a href="http://profile.myspace.com/index.cfm?fuseaction=user.viewprofile&amp;friendID=4362635">Love Lost But Not Forgotten</a>, <a href="http://www.youtube.com/watch?v=-z_5js8BYms">Tracy + The Plastics</a>, <a href="http://www.youtube.com/watch?v=mht8-fuOjSw">Maximillian Colby</a>, <a href="http://en.wikipedia.org/wiki/Xiu_Xiu">Xiu Xiu</a>, <a href="http://en.wikipedia.org/wiki/Dilute">Dilute</a>, <a href="http://www.amazon.com/Real-Fiction-Fakes/dp/B00000219E/ref=pd_bbs_1/103-3933798-9039062?ie=UTF8&amp;s=music&amp;qid=1193864001&amp;sr=8-1">The Fakes</a>, <a href="http://en.wikipedia.org/wiki/Huggy_Bear">Huggy Bear</a>, <a href="http://en.wikipedia.org/wiki/The_Need">The Need</a>, <a href="http://www.youtube.com/watch?v=wN3PLKDQZQI">Sweep The Leg Johnny</a>, <a href="http://www.youtube.com/watch?v=XAb68vFiDrA">The Paper Chase</a>, <a href="http://www.circletakesthesquare.com/">Circle Takes The Square</a>, <a href="http://www.convergecult.com/">Converge</a>, <a href="http://www.heartcorerecords.net/distro/cds.html">Sextional</a>, <a href="http://www.myspace.com/willhaven43">Will Haven</a>.</p>

<p>The same might not be true for these books: <a href="http://www.amazon.com/Love-Death-Other-Disasters-1977-1995/dp/1563410788">Love And Death And Other Disasters</a>, <a href="http://www.amazon.com/Secret-History-Donna-Tartt/dp/0679410325/sr=1-1/qid=1159798116/ref=pd_bbs_1/002-1951172-1835223?ie=UTF8&amp;s=books">The Secret History</a>, <a href="http://www.amazon.com/V-Vendetta-Alan-Moore/dp/0930289528/sr=1-1/qid=1159798135/ref=pd_bbs_1/002-1951172-1835223?ie=UTF8&amp;s=books">V For Vendetta</a>, <a href="http://www.amazon.com/Stir-Fry-Novel-Emma-Donoghue/dp/1555837239/sr=1-8/qid=1159798190/ref=sr_1_8/002-1951172-1835223?ie=UTF8&amp;s=books">Stirfry</a>, <a href="http://www.amazon.com/Tipping-Velvet-Novel-Sarah-Waters/dp/1573227889/sr=1-4/qid=1159798276/ref=sr_1_4/002-1951172-1835223?ie=UTF8&amp;s=books">Tipping The Velvet</a>, <a href="http://www.eduplace.com/kids/hmr/mtai/lobel.html">Frog And Toad</a>, <a href="http://www.online-literature.com/orwell/1984/">1984</a>, <a href="http://www.amazon.com/Gifts-Body-Rebecca-Brown/dp/0060926538/sr=8-1/qid=1159798425/ref=sr_1_1/002-1951172-1835223?ie=UTF8&amp;s=books">Gifts Of The Body</a>, <a href="http://www.amazon.co.uk/Eighteenth-Emergency-Betsy-Byars/dp/0099408678">The Eighteenth Emergency</a>, <a href="http://en.wikipedia.org/wiki/Goodbye_to_Berlin">Goodbye To Berlin</a>, <a href="http://www.amazon.com/Rotary-Spokes-Fiona-Cooper/dp/1852425075/sr=8-1/qid=1159798444/ref=sr_1_1/002-1951172-1835223?ie=UTF8&amp;s=books">Rotary Spokes</a>, <a href="http://www.amazon.com/Potential-Ariel-Schrag/dp/094315104X/ref=pd_bbs_1/103-3933798-9039062?ie=UTF8&amp;s=books&amp;qid=1193863563&amp;sr=8-1">Potential</a>, <a href="http://www.amazon.com/Scarecrows-Definitions-S-Robert-Westall/dp/0099482347/ref=sr_1_1/103-3933798-9039062?ie=UTF8&amp;s=books&amp;qid=1193863627&amp;sr=1-1">The Scarecrows</a>, <a href="http://www.amazon.com/Lost-Garden-Helen-Humphreys/dp/0747568138/ref=pd_bbs_sr_1/103-3933798-9039062?ie=UTF8&amp;s=books&amp;qid=1193863661&amp;sr=1-1">The Lost Garden</a>.</p>

<p>Or these films: <a href="http://www.imdb.com/title/tt0113277/">Heat</a>, <a href="http://www.imdb.com/title/tt0114916/">When Night Is Falling</a>, <a href="http://www.imdb.com/title/tt0099685/">Goodfellas</a>, <a href="http://www.imdb.com/title/tt0070666/">Serpico</a>, <a href="http://www.imdb.com/title/tt0072890/">Dog Day Afternoon</a>, <a href="http://www.imdb.com/title/tt0117802/">Swingers</a>, <a href="http://www.imdb.com/title/tt0115736/">Bound</a>, <a href="http://www.imdb.com/title/tt0120863/">The Thin Red Line</a>, <a href="http://www.imdb.com/title/tt0109913/">Go Fish</a>, <a href="http://www.imdb.com/title/tt0140352/">The Insider</a>, <a href="http://www.imdb.com/title/tt0283900/">L&#8217;Auberge Espagnole</a>, <a href="http://www.imdb.com/title/tt0085234/">Betrayal</a>, <a href="http://www.imdb.com/title/tt0105435/">Sneakers</a>, <a href="http://www.imdb.com/title/tt0104797/">Malcolm X</a>.</p>

<p><strong>Technology</strong></p>

<p>Hosting: <a href="http://www.textdrive.com">TextDrive</a>.  A bit flaky when it comes to uptime.  Good for Rails, but one can&#8217;t help feeling that the Official Rails Host should be able to make it a bit easier to deploy your application.</p>

<p>Diary software: custom <a href="http://www.ruby-lang.org/">Ruby</a> on <a href="http://www.rubyonrails.org/">Rails</a> application written in a couple of days.</p>

<p>Database: <a href="http://www.mysql.com/">MySQL</a>.</p>

<p>Development tools: <a href="http://www.macromates.com">TextMate</a> (code editor), <a href="http://yoursql.ludit.it/">YourSQL</a> (desktop SQL client), <a href="http://www.apple.com/itunes/">iTunes</a> (noise), <a href="http://www.panic.com/transmit/">Transmit</a> (file transfer client).</p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>278</wp:post_id>
		<wp:post_date>2007-10-30 00:12:06</wp:post_date>
		<wp:post_date_gmt>2007-10-29 23:12:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>about-mary-and-maryrosecook-com-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>&quot;Beneath this mask, another mask...&quot;</title>
		<link>http://maryrosecook.com/blog/post/beneath-this-mask-another-mask-2</link>
		<pubDate>Sat, 27 Oct 2007 23:11:09 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/beneath-this-mask-another-mask-2</guid>
		<description></description>
		<content:encoded><![CDATA[The title begins a quote by Claude Cahun (1894-1954).  It appears in Cahun's book, <em>Aveux non Avenus</em>, and in the original French it reads, "Sous ce masque un visage. Je n'en finirai pas de soulever tous ces visages."

There is disagreement on the English translation of the second part of the quote:

"Beneath this mask, another mask. I will not stop peeling off all these faces." - <a href="http://www.neuegalerie.at/97/cahun/ausstellung_e.html">Neue Gallerie</a>, an exhibitor of Cahun's work.

"Beneath this mask, another mask.  I will never be finished lifting off all these faces." - Printed on the inlay of <a href="http://www.vforvendettarocks.org/">V For Vendetta</a>'s album, <em>Beneath This Mask, Another Mask</em>.

"Beneath this mask, another mask. I will never cease to carry all these faces." - <a href="http://www.flickr.com/photos/naufragio/53856376/">Some random person on flickr</a>.

Regardless of the translation, the quote is the closest I've come to defining both blogging, and my queerness.

<strong>Masks And Blogging</strong>

I used to keep a secret diary.  I gave myself a pseudonym, and also gave all those who featured in the diary some sort of false name, generally based upon an applicable adjective.

The point of all this obfuscation was to allow me to write totally freely - put down my innermost feelings and saddest thoughts and deepest fears and desires.  In short, to say everything, whilst maintaining complete privacy for me and the people I knew.

However, despite the diary being pretty frank, I still left stuff out and changed events and reinterpreted motivations and was too easy and too hard on myself.  Inevitably, I wanted to project an image - to don a mask - both for me and my unseen readership.

All my representations of myself are masks: <a href="http://www.facebook.com/profile.php?id=502815370">Facebook</a>, <a href="http://twitter.com/maryrosecook">Twitter</a>, this diary, the real world, my reflection in the mirror.

Does one ever peel away the final mask?

<strong>Masks And Queer</strong>

The translations of Cahun's quote have different tones.  The first is sort of combative, saying: I will not stop changing the way you perceive me.  The third is much sadder.  It makes Cahun sound like she is not evolving, just becoming more burdened by her projections.

I transition from gender to gender and sexuality to sexuality.  I think there is probably a close coupling between the two: boyish lesbian became girly straight became androgynous whatever.  The umbrella term for all this is queer, but, by definition, the word queer doesn't really mean anything.  Like situationism.

So, each new combination of gender and sexuality is a new mask that I wear for a while and then stuff in my little black rucksack.

But, sometimes, I think there is a face under there somewhere.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>279</wp:post_id>
		<wp:post_date>2007-10-28 00:11:09</wp:post_date>
		<wp:post_date_gmt>2007-10-27 23:11:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>beneath-this-mask-another-mask-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Alice&#039;s hidden notes</title>
		<link>http://maryrosecook.com/blog/post/alices-hidden-notes-2</link>
		<pubDate>Sat, 27 Oct 2007 23:10:12 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/alices-hidden-notes-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p>I keep on finding these little notes inside the books on my shelves.  Each note describes why Alice likes the enclosing book, what it means to her, why she thought I&#8217;d like it, why she wanted me to read it.</p>

<p>About two years, Alice and I had a correspondence.  She was putting together a cassette of spoken word performances and, coincidentally, I&#8217;d recently read some of my own short stories into the little microphone on my laptop and played the recordings back out to a tape deck.</p>

<p>We got to talking via email, initially about the tape, but increasingly about our lives and our favourite bands and our dreams and our Mums and our teddy-bears and and our sexual identities.  We imagined each other into our walks and nights out and crafternoons.  Emails developed into letters and letters grew into parcels; parcels of books and CDs and little sketches and home-made stickers and notes.</p>

<p>We kept up our correspondence for about a year, but our letters dwindled, and then stopped.  She got a new girlfriend, I started seeing a new boy.</p>

<p>But each time I find one of those notes, I go back to that time, and feel how I felt.</p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>280</wp:post_id>
		<wp:post_date>2007-10-28 00:10:12</wp:post_date>
		<wp:post_date_gmt>2007-10-27 23:10:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>alices-hidden-notes-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mr. Ellis</title>
		<link>http://maryrosecook.com/blog/?p=409</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=409</guid>
		<description></description>
		<content:encoded><![CDATA[hammer, foursquare, playground + snow, craft fair, thumb on spacebar, scissors]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>409</wp:post_id>
		<wp:post_date>2013-04-07 21:55:51</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Git from the inside out</title>
		<link>http://maryrosecook.com/blog/?p=466</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/blog/?p=466</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>466</wp:post_id>
		<wp:post_date>2015-03-18 20:35:37</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>For Whom The Bell Tolls</title>
		<link>http://maryrosecook.com/blog/post/for-whom-the-bell-tolls-2</link>
		<pubDate>Sat, 08 Mar 2008 23:50:42 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/for-whom-the-bell-tolls-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p>I saw my old friend, Max, this weekend and he recommended For Whom The Bell Tolls.  I bought a copy and started it on the train home from Leeds.  I have just got to a very tense scene where Robert is in the guerrillas&#8217; cave and is asserting his authority over the disillusioned Pablo.</p>

<p>Hemingway writes so plainly and everything is so well grounded, literally, in the senses.  He gives us a few specific details to convey a meal, or an environment.  His rope-soled canvas shoes and his oily wines are impressions that rest upon our tongues and beneath our feet - at our points of contact with the world.</p>

<p>A few years ago, I was killing time at the airport and I read the first few pages of a Tom Clancy novel.  Clancy is a writer who, presumably to maximise his output, begins sentences with very little idea of where they are going.  So, he spends most of his time writing himself out of linguistic holes.  He will go to extraordinary lengths to avoid repetition, referring to the spinning blades of the helicopter to avoid repeating the word rotor.  In contrast, if Hemingway has said wine already, he will say it again if it helps make the sentence clearer.</p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>236</wp:post_id>
		<wp:post_date>2008-03-09 00:50:42</wp:post_date>
		<wp:post_date_gmt>2008-03-08 23:50:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>for-whom-the-bell-tolls-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/241</link>
		<pubDate>Wed, 13 Feb 2008 23:48:59 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/241</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  I just cannot stop listening to B. Fleischmann&#8217;s Melancholie, an electronica re-interpretation of Schubert piano miniatures. So beautiful and so sad.  Danke, Theresa.  <a href="http://www.amazon.com/o/ASIN/B000MTFD6K/104-4472888-8346311?SubscriptionId=1CXR6M1N827JKZRCNE82">Get it</a>.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>241</wp:post_id>
		<wp:post_date>2008-02-14 00:48:59</wp:post_date>
		<wp:post_date_gmt>2008-02-13 23:48:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>241</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>C4[1] videos available</title>
		<link>http://maryrosecook.com/blog/post/c41-videos-available-2</link>
		<pubDate>Wed, 13 Feb 2008 23:47:02 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/c41-videos-available-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p>The <a href="http://www.rentzsch.com/c4/c41VideosAvailable">videos</a> from <a href="http://rentzsch.com/c4/">C4</a>[1], the second iteration of the Mac software development conference, are now online at curator <a href="http://rentzsch.com/">Rentzsch</a>&#8217;s website.</p>

<p><a href="http://www.wilshipley.com/blog/">Wil Shipley</a>&#8217;s talk on hype is particularly good.</p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>242</wp:post_id>
		<wp:post_date>2008-02-14 00:47:02</wp:post_date>
		<wp:post_date_gmt>2008-02-13 23:47:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>c41-videos-available-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/243</link>
		<pubDate>Thu, 07 Feb 2008 23:46:05 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/243</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  Heading off to Berlin. A guy with a skateboard has, so far, been with me the whole way. I wonder of he is going too.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>243</wp:post_id>
		<wp:post_date>2008-02-08 00:46:05</wp:post_date>
		<wp:post_date_gmt>2008-02-07 23:46:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>243</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  Pitchfork&#039;s Review of The Bedlam in Goliath by The Mars Volta </title>
		<link>http://maryrosecook.com/blog/post/pitchforks-review-of-the-bedlam-in-goliath-by-the-mars-volta</link>
		<pubDate>Tue, 05 Feb 2008 23:45:10 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/pitchforks-review-of-the-bedlam-in-goliath-by-the-mars-volta</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>244</wp:post_id>
		<wp:post_date>2008-02-06 00:45:10</wp:post_date>
		<wp:post_date_gmt>2008-02-05 23:45:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pitchforks-review-of-the-bedlam-in-goliath-by-the-mars-volta</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The C word</title>
		<link>http://maryrosecook.com/blog/post/the-c-word-2</link>
		<pubDate>Thu, 31 Jan 2008 23:44:13 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/the-c-word-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p>Bill Gates recently gave a <a href="http://www.youtube.com/watch?v=rZs4Qnb0j4A">speech</a> at the World Economic Forum in Davos.  He argued that &#8220;creative capitalism&#8221; was the way to satisfy both philanthropic and economic concerns.  The idea is this: the increase in standards of living brought by capitalism mainly benefit the rich, so companies should put more effort into developing products and services for the poor.</p>

<p>The phrase &#8220;creative capitalism&#8221; brings to mind another alliterative pair of c-words: <a href="http://en.wikipedia.org/wiki/Compassionate_conservatism">compassionate conservatism</a>.</p>

<p>Both these concepts are, in effect, bargains.  Creative capitalism says to companies, &#8220;If you make products for poor people, you will be rewarded with greater profits.&#8221;  Compassionate conservatism says to governments, &#8220;Give control of social services to external organisations who you are strongly aligned with and you&#8217;ll be rewarded with goodwill from the population and you can distance yourselves from any bad results.&#8221;</p>

<p>And both these bargains are bound up with capitalism, which is centred not on the free market or the accumulation of wealth, but instead on the idea of false choice.  Yes, you may buy from or work for a number of companies, but they are all motivated by the same desires and thus, really, you only have one choice.</p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>245</wp:post_id>
		<wp:post_date>2008-02-01 00:44:13</wp:post_date>
		<wp:post_date_gmt>2008-01-31 23:44:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-c-word-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  Wynne Greenwood has released new music </title>
		<link>http://maryrosecook.com/blog/post/wynne-greenwood-has-released-new-music</link>
		<pubDate>Wed, 30 Jan 2008 23:43:18 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/wynne-greenwood-has-released-new-music</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>246</wp:post_id>
		<wp:post_date>2008-01-31 00:43:18</wp:post_date>
		<wp:post_date_gmt>2008-01-30 23:43:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wynne-greenwood-has-released-new-music</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Oh, the shame</title>
		<link>http://maryrosecook.com/blog/post/oh-the-shame-2</link>
		<pubDate>Wed, 23 Jan 2008 23:42:21 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/oh-the-shame-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p>Look at this cover.  People on the tube are going to think I&#8217;m reading a fucking romance novel.</p>

<p><img src="http://www.werenotthecoolkids.com/images/IMG_0332.jpg" width="500" /></p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date>2008-01-24 00:42:21</wp:post_date>
		<wp:post_date_gmt>2008-01-23 23:42:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>oh-the-shame-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>New computing equipment</title>
		<link>http://maryrosecook.com/blog/post/new-computing-equipment-2</link>
		<pubDate>Mon, 21 Jan 2008 23:41:24 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/new-computing-equipment-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p>Loathe as I am, I am compelled:</p>

<p><img src="http://www.werenotthecoolkids.com/images/IMG_0328.jpg" height="375" width="500" /></p>

<p>The external monitor is not on because, when I said to the guy in the Apple Store, &#8220;All the cables I need are included, right?&#8221;, instead of answering, &#8220;No, they&#8217;re not.  You&#8217;ll need to buy a special adapter&#8221;, he, either lying or mis-informed, said, &#8220;Yes&#8221;.</p>

<p>This is the first time I&#8217;ve had a proper keyboard and mouse for my laptop.  The big joke is, I keep on reaching over them to get to the inbuilt trackpad and keyboard.</p>

<p>Pictured: 20&#8221; Apple Cinema Display, MacBook, microKORG, iPhone, Tascam US-122, SM58, children&#8217;s eight-note glockenspiel (in C).</p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>248</wp:post_id>
		<wp:post_date>2008-01-22 00:41:24</wp:post_date>
		<wp:post_date_gmt>2008-01-21 23:41:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-computing-equipment-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Making music</title>
		<link>http://maryrosecook.com/blog/post/making-music-2</link>
		<pubDate>Fri, 18 Jan 2008 23:40:26 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/making-music-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p>What about this? The music starts and, after a little while, you hear static and then the click of the radio being switched off. Someone begins speaking to someone else in the room and, thus, a play begins, only to be interrupted by one of the characters opening a window and the music resuming from a car parked outside. Or this? Past loves are characters who have left Neighbours: &#8220;I just bumped into Karl Kennedy and he said that Sophie had rung from Brisbane and she&#8217;s going out with a drug dealer&#8221; etc. </p>

<p>I play guitar all the time, but some weeks, even some months, I just can&#8217;t write music.  But then, out of nowhere, my fingers are in some configuration, and I pick some pattern and it sounds good.  I record it into Ableton Live and start messing around. Maybe I try to sing sad (always sad) melodies over what I have recorded, or maybe I tinker with my keyboard or doss around making crazy effects to add to the guitar.  And things get easier after that because one riff suggests another.</p>

<p>So, after that, I usually end up with a few consecutive sections of song. This is the first draft. I might then send an mp3 to my Dad to get his opinion, or just start adding sections or layers that sound good. I might keep the original vocal melodies or rip them out and try again. I might start doing some drums, one of the few musical things I can do when I&#8217;m not feeling inspired.</p>

<p>Once the song is finished, I write out the nonsensical ramblings that I sang when working out the vocal melodies, take my meter and syllable counts from there and then write some real lyrics. </p>

<p>By this point, the original idea is usually lost.  If I&#8217;ve kept it in the song, it is by sheer chance because the music is so hard to find that the idea must be discarded at the first sign of its incompatibility with the song.  So, the lyrical idea doesn&#8217;t so much drape over as balance on top of the music.</p>

<p>Or, to put it another way, the wine never shapes the glass.</p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>249</wp:post_id>
		<wp:post_date>2008-01-19 00:40:26</wp:post_date>
		<wp:post_date_gmt>2008-01-18 23:40:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>making-music-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Coffee and Sunlight</title>
		<link>http://maryrosecook.com/blog/post/coffee-and-sunlight-2</link>
		<pubDate>Thu, 17 Jan 2008 23:39:30 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/coffee-and-sunlight-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p>On Sunday morning, I took the tube from Brixton to Leicester Square, walked down Charing Cross Road and sat on the steps of Trafalgar Square.  As I smoked a cigarette, someone went past with a cup of coffee and so I got up, walked to Pret and got myself a cup and then resumed my position.</p>

<p>I sat in perfect contentment, the misleadingly named Destroyer playing on my iPhone, the sun in my eyes and the coffee warm between my hands.  I thought about how happy I was.</p>

<p>Twelve-thirty came and I walked up the steps of the National Gallery to meet my Dad.  We looked at some Van Dyke paintings and then headed off to see some Rembrants.</p>

<p>My phone rang.  It was work and something was broken and I had to go in.</p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>250</wp:post_id>
		<wp:post_date>2008-01-18 00:39:30</wp:post_date>
		<wp:post_date_gmt>2008-01-17 23:39:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>coffee-and-sunlight-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PageRank</title>
		<link>http://maryrosecook.com/blog/post/pagerank-2</link>
		<pubDate>Wed, 16 Jan 2008 23:38:34 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/pagerank-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p>Jesus fucking Christ I have a fucking Google PageRank of 5! The site has only been up a few weeks.  How is this possible? I don&#8217;t think anyone links to me.</p>

<p><strong>Update:</strong> Ah, panic over: it&#8217;s actually 3.</p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date>2008-01-17 00:38:34</wp:post_date>
		<wp:post_date_gmt>2008-01-16 23:38:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pagerank-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>And, we&#039;re back</title>
		<link>http://maryrosecook.com/blog/post/and-were-back-2</link>
		<pubDate>Mon, 14 Jan 2008 23:37:37 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/and-were-back-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  Two hours later, almost to the minute, I have <a href="http://www.macrumorslive.com/">read the Mac Rumours live update</a>, fought off the urge to order a <a href="http://www.apple.com/macbookair/">MacBook Air</a> this second, listened to a <a href="http://profile.myspace.com/index.cfm?fuseaction=user.viewprofile&amp;friendID=10198231">Dragbody</a> album and a <a href="http://www.jeremywarmsley.com/">Jeremy Warmsley</a> album and  switched the maryrosecook.com deployment system from a change-the-files-in-the-app-directory-by-hand approach to a fully awesome and automatic <a href="http://www.capify.org/">Capistrano</a>-powered kind of thing.  If you want to capify your site and you host with TextDrive, there is a good tutorial <a href="http://www.youtilize.com/post/deploying-with-capistrano-on-textdrive">here</a>.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>252</wp:post_id>
		<wp:post_date>2008-01-15 00:37:37</wp:post_date>
		<wp:post_date_gmt>2008-01-14 23:37:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>and-were-back-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Maintenance</title>
		<link>http://maryrosecook.com/blog/post/maintenance-2</link>
		<pubDate>Mon, 14 Jan 2008 23:36:40 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/maintenance-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  The website will be down for about two hours while I switch over to Capistrano deployment.  In the meantime, all five of you who read this, go and check out the <a href="http://www.macrumorslive.com/">Macworld keynote announcements</a>.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>253</wp:post_id>
		<wp:post_date>2008-01-15 00:36:40</wp:post_date>
		<wp:post_date_gmt>2008-01-14 23:36:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>maintenance-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  An account of the making of The Mars Volta&#039;s new album </title>
		<link>http://maryrosecook.com/blog/post/an-account-of-the-making-of-the-mars-voltas-new-album</link>
		<pubDate>Sun, 13 Jan 2008 23:35:43 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/an-account-of-the-making-of-the-mars-voltas-new-album</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>254</wp:post_id>
		<wp:post_date>2008-01-14 00:35:43</wp:post_date>
		<wp:post_date_gmt>2008-01-13 23:35:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>an-account-of-the-making-of-the-mars-voltas-new-album</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/255</link>
		<pubDate>Thu, 10 Jan 2008 23:34:46 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/255</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  I used to hope that love was like that moment in The Snowman where you&#8217;re staring at the ground and then someone grabs you by the hand and says Look over here and pulls you up into the air.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>255</wp:post_id>
		<wp:post_date>2008-01-11 00:34:46</wp:post_date>
		<wp:post_date_gmt>2008-01-10 23:34:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>255</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The view gem my window</title>
		<link>http://maryrosecook.com/blog/post/the-view-gem-my-window-2</link>
		<pubDate>Wed, 02 Jan 2008 23:33:54 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/the-view-gem-my-window-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p>Last night, I leaned on the window-sill in my room and smoked a final cigarette before bed. I looked out onto my quiet street and saw a woman walking in circles in the middle of the road. She wore a sleek black coat and a black pencil skirt and black, witchy boots.</p>

<p>She looked at each car that came along the street, and then we would both watch as it drove around her or forced her to step back onto the pavement.</p>

<p>It was freezing outside, so I stubbed out my cigarette and closed the window. I watched the woman walk away down the road, and then I had a sip of water, switched off the light, got under the covers and lay in the dark.</p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>257</wp:post_id>
		<wp:post_date>2008-01-03 00:33:54</wp:post_date>
		<wp:post_date_gmt>2008-01-02 23:33:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-view-gem-my-window-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Art</title>
		<link>http://maryrosecook.com/blog/post/art-2</link>
		<pubDate>Thu, 20 Dec 2007 23:32:57 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/art-2</guid>
		<description></description>
		<content:encoded><![CDATA[In Held, a track by Fakes, Billie says "This is not a piece of art.  This is my life."  What's the difference?

When John Congleton of The Paper Chase put his ex-girlfriend's break-up answerphone message on Young Bodies Heal Quickly, You Know, was his relationship with the girl already burnt out, or was he stamping on its embers?

Sunset Rubdown's song, The Taming Of The Hands That Came Back To Life: "She said my sails are flapping in the wind.  I said, Can I use that in a song? She said, I mean the end begins.  I said, I know, can I use that too?" Was her reply altered by his artistic request?

What would happen if one subjugated everything to art? What if I revealed some secret things in order to write a great article, and in the process I sacrificed relationships with people I know? Or, what if I spent all my time making the best album in the world, only to emerge and find that the things I had written about were gone?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>258</wp:post_id>
		<wp:post_date>2007-12-21 00:32:57</wp:post_date>
		<wp:post_date_gmt>2007-12-20 23:32:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>art-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/259</link>
		<pubDate>Tue, 18 Dec 2007 23:31:01 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/259</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  It is quite fiddly to take photos of oneself and arm-around-shoulder buddies with the iPhone. However, some slight assistance is afforded by the clever mirrored Apple logo on the back.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>259</wp:post_id>
		<wp:post_date>2007-12-19 00:31:01</wp:post_date>
		<wp:post_date_gmt>2007-12-18 23:31:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>259</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/260</link>
		<pubDate>Sun, 16 Dec 2007 23:30:04 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/260</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  I walked into the Borders in the airport and picked up a copy of Saturday, the book I read when I last went to New York City, and read again about lone and strange and poignant times. Then, Theresa SMSed me say that she had missed her flight and I put the book back on the shelf and went to meet her.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>260</wp:post_id>
		<wp:post_date>2007-12-17 00:30:04</wp:post_date>
		<wp:post_date_gmt>2007-12-16 23:30:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>260</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  Y Combinator: Startup Ideas We&#039;d Like to Fund </title>
		<link>http://maryrosecook.com/blog/post/y-combinator-startup-ideas-wed-like-to-fund</link>
		<pubDate>Sun, 31 Aug 2008 00:14:12 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/y-combinator-startup-ideas-wed-like-to-fund</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>209</wp:post_id>
		<wp:post_date>2008-08-31 01:14:12</wp:post_date>
		<wp:post_date_gmt>2008-08-31 00:14:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>y-combinator-startup-ideas-wed-like-to-fund</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>He is my hero</title>
		<link>http://maryrosecook.com/blog/post/he-is-my-hero-2</link>
		<pubDate>Sat, 02 Aug 2008 00:12:17 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/he-is-my-hero-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <img src="http://werenotthecoolkids.com/images/joker.jpg" />
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>211</wp:post_id>
		<wp:post_date>2008-08-02 01:12:17</wp:post_date>
		<wp:post_date_gmt>2008-08-02 00:12:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>he-is-my-hero-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hacking and transience</title>
		<link>http://maryrosecook.com/blog/post/hacking-and-transience-2</link>
		<pubDate>Fri, 25 Jul 2008 00:11:23 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/hacking-and-transience-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p>Some people think that programmers are like artists<sup>1</sup> and others think they are like designers and can, at their best, be like craftsmen<sup>2</sup>.</p>

<p>Sense and Sensibility, published in 1811, is still widely read and praised.  A beautiful chair carved a hundred years ago can still be admired and sat upon today.  The tin can, invented in 1810<sup>3</sup>, remains the best method of cheap, long-term food storage.  Thus, there are examples of pieces of art, craftsmanship and design that have longevity.</p>

<p>However, do the fruits of hacking have the same longevity? I am confident that, however good it is, no one will be using the current version of my dating web site in ten years&#8217; time.  In fact, the same could be said of any of today&#8217;s programs and web sites.</p>

<p>Hacking, then, is closest to design because both methods are iterative, whereas artistry and craftsmanship are not.  Novels are written, revised and then published.  Chairs are carved, adjusted and then sold.  In contrast, successful programs and web sites do not remain static, they are improved.  The tin cans we use now are significantly different from the ones made in 1810.  Thus, the difference between hacking and design, and art and craftsmanship, is that, with the former, stasis means death.</p>

<p>Will this change as hacking matures? It hasn&#8217;t changed for design. Design meets a specific, current need.  Art and craftsmanship soothe more general, perennial desires: feeling vicarious sadness, or taking the weight off one&#8217;s feet.</p>

<p>Why are designers and hackers happy making things that will not outlive them? Perhaps the pleasure in the work is enough.  Or perhaps the urge for contemporary approval is greater than the urge for longevity.  But it still makes me sad that I am pouring my creativity onto the ground so that it will nourish the grass for a little while longer.</p>

<p><br /><sup>1</sup> Paul Graham&#8217;s essay, <a href="http://paulgraham.com/hp.html">Hackers And Painters</a>.<br /><sup>2</sup> Joel Spolsky&#8217;s essay, <a href="http://www.joelonsoftware.com/articles/Craftsmanship.html">Craftsmanship</a><br /><sup>3</sup> Wikipedia <a href="http://en.wikipedia.org/wiki/Tin_can">article on the tin can</a></p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>213</wp:post_id>
		<wp:post_date>2008-07-25 01:11:23</wp:post_date>
		<wp:post_date_gmt>2008-07-25 00:11:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hacking-and-transience-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>When you come to the end, you go back to the beginning</title>
		<link>http://maryrosecook.com/blog/post/when-you-come-to-the-end-you-go-back-to-the-beginning-2</link>
		<pubDate>Thu, 10 Jul 2008 00:10:27 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/when-you-come-to-the-end-you-go-back-to-the-beginning-2</guid>
		<description></description>
		<content:encoded><![CDATA[[In this post, there are lots of spoilers for The Wire.  If you haven't seen all five series, go and watch them.]

Lester Freamon in The Wire: "We're building something here, Detective. We're building it from scratch. All the pieces matter."

The writers on The Wire occasionally let their characters say what it is the programme is driving at.

David Simon, the creator, has said that The Wire is about the way institutions affect people's lives<sup>1</sup>.  He has also said the programme is modeled upon Greek tregedies<sup>2</sup>, and as he noted, Grecian tragedy is obsessed with fate.  If you combine these three insights, you come up with something magical: a piece of art that simultaneously champions two opposing views.  In the case of The Wire: that every piece matters, and that the characters are fated.

For the characters, they are fated.  Their personalities dictate what they will do when placed in circumstance. For the viewer, every piece matters.  They do not have a complete picture of the characters' personalities.  Thus, they cannot predict what the characters will do in each situation until every personality facet has been revealed.

This contradiction is illustrated by Jimmy McNulty's progression through Series 1.  McNulty takes pride in his work and refuses to let police politics or his home life get in the way of his work.  This means that when his superiors become concerned that his indictments will start riling their superiors, he continues his investigation.  At the end of the series, this leads to him being exiled to a dead-end detail in the Baltimore port.

However, there is an extra subtlety: people can be beholden to zero or more institutions.  Can the characters in The Wire choose the institutions to which they belong, and thus have a choice in their fate?

By the end of Series 3, McNulty has had enough of detective work and become a beat officer.  This allows him to join the institution of marriage by moving in with Beatie Russell.

Thus, at the end of Series 3, McNulty withdraws from one institution and joins another.  Did he choose this, and thus his fate? In a sense.  He willfully chose to leave the first institution because it could not meet his terms.

By Series 5, McNulty is a detective again and, consequently, he goes back to drinking and philandering.  However, he was most definitely ripped out of his newly adopted institution by the pull of his old one.  Thus, in that sense, he had no choice.

<sup>1</sup> "[The show is] really about the American city, and about how we live together. It's about how institutions have an effect on individuals, and how, whether you're a cop, a longshoreman, a drug dealer, a politician, a judge [or] lawyer, you are ultimately compromised and must contend with whatever institution you've committed to." Source: <a href="http://en.wikipedia.org/wiki/The_Wire_(TV_series)#cite_note-TAR-0">David Simon "The Target" commentary track [DVD], 2005</a>.

<sup>2</sup> "Much of our modern theater seems rooted in the Shakespearean discovery of the modern mind. We're stealing instead from an earlier, less-traveled construct - the Greeks - lifting our thematic stance wholesale from Aeschylus, Sophocles, Euripides to create doomed and fated protagonists who confront a rigged game and their own mortality." Source: <a href="http://www.believermag.com/issues/200708/?read=interview_simon">David Simon interview in The Believer, 2007</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>214</wp:post_id>
		<wp:post_date>2008-07-10 01:10:27</wp:post_date>
		<wp:post_date_gmt>2008-07-10 00:10:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>when-you-come-to-the-end-you-go-back-to-the-beginning-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/215</link>
		<pubDate>Wed, 09 Jul 2008 00:08:31 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/215</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  If <a href="http://twitter.com">Twitter</a> has invented a new mode of communication, and <a href="http://digg.com">Digg</a> has invented a new mode of content filtering, does that mean that there is lots of room for Twitter clones that cater to different communities, in the same way that there are lots of Digg clones that lean towards different topics and styles of content?
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>215</wp:post_id>
		<wp:post_date>2008-07-09 01:08:31</wp:post_date>
		<wp:post_date_gmt>2008-07-09 00:08:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>215</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Listen! Listen!</title>
		<link>http://maryrosecook.com/blog/post/listen-listen-2</link>
		<pubDate>Tue, 01 Jul 2008 00:07:33 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/listen-listen-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p>Just found an amazing American public radio interview programme, <a href="http://www.maximumfun.org/">The Sound Of Young America</a>.  The interviewer asks interesting questions and gets out of the way.  I have listened, in a prostration of amazement, to the following:</p>

<p><a href="http://www.maximumfun.org/blog/2008/06/podcast-ariel-schrag-cartoonist-and.html">Ariel Schrag</a><br /><a href="http://www.maximumfun.org/blog/2007/12/podcast-live-in-chicago-steve-albini.html">Steve Albini</a></p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date>2008-07-01 01:07:33</wp:post_date>
		<wp:post_date_gmt>2008-07-01 00:07:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>listen-listen-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Don&#039;t talk to the cops</title>
		<link>http://maryrosecook.com/blog/post/dont-talk-to-the-cops-2</link>
		<pubDate>Wed, 18 Jun 2008 00:06:36 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/dont-talk-to-the-cops-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  An American lawyer enumerates the reasons you should never talk to the police and, more importantly, hammers home the fact that there aren&#8217;t any reasons <strong>to</strong> talk.

<object height="344" width="425"><param name="movie" value="http://www.youtube.com/v/i8z7NC5sgik&amp;hl=en" />
<embed src="http://www.youtube.com/v/i8z7NC5sgik&amp;hl=en" type="application/x-shockwave-flash" height="405" width="500"></embed></object>

Part 2, a police officer confirms:

<object height="344" width="425"><param name="movie" value="http://www.youtube.com/v/08fZQWjDVKE&amp;hl=en" />
<embed src="http://www.youtube.com/v/08fZQWjDVKE&amp;hl=en" type="application/x-shockwave-flash" height="405" width="500"></embed></object>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date>2008-06-18 01:06:36</wp:post_date>
		<wp:post_date_gmt>2008-06-18 00:06:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dont-talk-to-the-cops-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/218</link>
		<pubDate>Tue, 10 Jun 2008 00:05:40 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/218</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  Wow, wow, wow.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>218</wp:post_id>
		<wp:post_date>2008-06-10 01:05:40</wp:post_date>
		<wp:post_date_gmt>2008-06-10 00:05:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>218</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/219</link>
		<pubDate>Mon, 09 Jun 2008 00:04:44 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/219</guid>
		<description></description>
		<content:encoded><![CDATA[

  
  Snow Leopard is a cute name for the next release of OS X, but there are two problems with <a href="http://daringfireball.net/2008/06/snow_leopard">the theory</a>.  First, if you are not a Mac fan, it is difficult to discern the relationship between Snow Leopard and Leopard.  Which is newer? Do I need one to install the other? Who knows? Second, it has been <a href="http://www.roughlydrafted.com/2008/06/05/wwdc-2008-moscone-west-spy-shots/">reported</a> that <a href="http://www.roughlydrafted.com/wp-content/uploads/2008/06/img-0654.jpg">banners reading &#8220;OS X Leopard&#8221;</a> are hanging in Moscone West, ready for WWDC.  Why tout Leopard when you&#8217;re going to announce Snow Leopard?
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>219</wp:post_id>
		<wp:post_date>2008-06-09 01:04:44</wp:post_date>
		<wp:post_date_gmt>2008-06-09 00:04:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>219</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Des Ark, they break my heart</title>
		<link>http://maryrosecook.com/blog/post/des-ark-they-break-my-heart-2</link>
		<pubDate>Fri, 30 May 2008 00:03:47 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/des-ark-they-break-my-heart-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  I have always really liked Des Ark but, for some reason, for the last week, I have not been able to stop watching their videos on YouTube.

They make me want to cry, Aimee&#8217;s guitar playing makes me boil with envy, and their two delivery methods (crushing rock and crushing acoustic) leave me lost in admiration.

<object height="355" width="425"><param name="movie" value="http://www.youtube.com/v/JmYdix-XGmg&amp;hl=en" />
<param name="wmode" value="transparent" />
<embed src="http://www.youtube.com/v/JmYdix-XGmg&amp;hl=en" wmode="transparent" type="application/x-shockwave-flash" height="418" width="500"></embed></object>

<object height="355" width="425"><param name="movie" value="http://www.youtube.com/v/PlJq1-mgoto&amp;hl=en" />
<param name="wmode" value="transparent" />
<embed src="http://www.youtube.com/v/PlJq1-mgoto&amp;hl=en" wmode="transparent" type="application/x-shockwave-flash" height="418" width="500"></embed></object>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date>2008-05-30 01:03:47</wp:post_date>
		<wp:post_date_gmt>2008-05-30 00:03:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>des-ark-they-break-my-heart-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Nature</title>
		<link>http://maryrosecook.com/blog/post/nature-2</link>
		<pubDate>Tue, 20 May 2008 00:01:57 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/nature-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p>Michael Mann has always given great attention to detail in his films: getting people to train his actors to behave like <a href="http://www.imdb.com/name/nm0120483/bio">convicts</a>, <a href="http://findarticles.com/p/articles/mi_m0HNN/is_8_19/ai_n6171215">capturing the light of sodium street lamps properly</a>, having <a href="http://www.imdb.com/title/tt0113277/trivia">his armed characters check chamber</a>.</p>

<p>&#8220;We have full-time people who just show customers the code, or look at other specifications, and things of that nature.&#8221;</p>

<p>&#8220;&#8230;burn rates, ignition propensities, things of this nature.&#8221;</p>

<p>The first quote is from a Bill Gates <a href="http://programmersatwork.wordpress.com/bill-gates-1986/">interview</a> in 1986.  The second is one of Jeffrey Wigand&#8217;s lines in The Insider.</p>

<p>Both quotes include the phrase, &#8220;thing of [this/that] nature.&#8221;  When I read the interview with Gates, that phrase stuck out as something that only a precise person, an engineer, would say.  And precision is Wigand&#8217;s defining characteristic.</p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>223</wp:post_id>
		<wp:post_date>2008-05-20 01:01:57</wp:post_date>
		<wp:post_date_gmt>2008-05-20 00:01:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nature-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Eating iPods</title>
		<link>http://maryrosecook.com/blog/post/eating-ipods-2</link>
		<pubDate>Tue, 13 May 2008 00:00:01 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/eating-ipods-2</guid>
		<description></description>
		<content:encoded><![CDATA[You can please everyone.

Why does everyone love Radiohead and the iPod, yet no one deride them as philistine? Why did reddit go from being a relatively interesting news site to a politically-leaning version of Digg? Why is Digg populated by moronic stories?

It's a matter of taste.

Steve Jobs sired the iPod by the force of his refined taste.  The masses loved it because almost everyone can find a use for it, and because it is aesthetically pleasing.

Most pop music only has the former quality - we all like to dance, and to replay a melody in our heads.  But Radiohead (1) take those nice melodies and spit them out in newish ways.  Thus, they win the approval of everyone, including the critics.  So, to a lesser extent, do Sonic Youth.

A few times a day, I visit a website called Hacker News.  It's quite like reddit: people post news items, vote and comment on them, and the most popular items get the most exposure.  The difference with Hacker News is that all the news items are ostensibly focused on hacking (ingenious problem-solving).  Even in the three months since I joined, I've noticed a drop in the overall quality of the news items.  But how does this drop in quality manifest itself?

It is often said of universally revered pieces of art that they have been "done very well".  When people say this, their admiration is a proxy for aesthetic pleasure within a well-understood set of rules.  Jane Austen (2) took the romance novel, a traditionally trashy form, and wrote books that conformed to the established rules, but achieved great artistic heights.  Converge released Jane Doe, a record that toes the metalcore line with its beatdowns and screaming and blast beats and heavy, distorted riffs.  But they show such technical excellence and the music sounds so bleak that the record exceeds everything else in the genre.

Converge are a popular hardcore band, but they are not a popular band.  I like hardcore, but my Mum does not, she says, because of the screaming.  Most people share her view.  Thus, Converge will never achieve the critical and mass popularity of Radiohead because, though they are very aesthetically pleasing, most people cannot find a use for them.  Cathartic screams are just not their cup of tea.

How do you achieve aesthetic pleasure? There are two ways.  One, appeal to a narrowly-defined group of people whose aesthetic judgement is closely aligned. Two, find the superset of the world's taste and embody it.

This explains what has happened to reddit and Digg, and what is happening to Hacker News.  These sites began with a core group of users who all had fairly closely aligned interests and values and so it was easy for the site to give them aesthetic pleasure.  Once the user group became more diverse, there were an increasing number of stories posted that only appealed to a subset of the users' interests and values.  Therefore, these items get fewer votes and less attention.  What rises to the top is the items that are universally appealing.  But wait.  Instead of a dictator with impeccable taste in charge, there is a mass of independent people.  This universal appeal is based upon a lowest common denominator.  We all quite like pictures of cute cats, and Top 10 lists and bold, unsubstantiated headlines.  But these things only push our aesthetic pleasure bars up to maybe a four.  Thus, mediocrity reigns.

The iPod has a dictator with impeccable taste and everyone can find a use for it.  The same is true of Radiohead.  Converge fail because of the second condition of universal popularity.  reddit, the first.

(1) I don't actually like Radiohead, but I am an outlier.
(2) See Paul Graham's article, <a href="http://www.paulgraham.com/heroes.html">Some Heroes</a>, for more on good writers who chose populist genres.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>224</wp:post_id>
		<wp:post_date>2008-05-13 01:00:01</wp:post_date>
		<wp:post_date_gmt>2008-05-13 00:00:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>eating-ipods-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Throw Text</title>
		<link>http://maryrosecook.com/blog/post/throw-text-2</link>
		<pubDate>Sat, 10 May 2008 23:58:04 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/throw-text-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p>I&#8217;ve been working on a large personal project for the last four months.  To keep myself fresh, I&#8217;ve also done a couple of little mini projects.  The first was <a href="http://tweviews.com">Tweviews</a>, tiny reviews on Twitter.</p>

<p>I knocked up the second this weekend: <a href="http://throwtext.com">Throw Text</a>, instant text storage and retrieval. I know there a lot of these things on the &#8216;net, most called Online Notepad.  But my goals for Throw Text are a bit different:</p>

<p>1. Identical sign-up, edit and retrieve screens.<br />
2. Text stored as you type.<br />
3. Clean, clean cleanliness.</p>

<p>Some technical notes.  Throw Text was written in <a href="http://www.rubyonrails.org/">Ruby on Rails</a>.  It is hosted on <a href="http://slicehost.com">Slicehost</a> for $20 a month.  It is served by <a href="http://www.apache.org/">Apache</a> 2 and <a href="http://www.modrails.com/">mod_rails</a> (aka Passenger).  The data is stored in <a href="http://www.mysql.com/">MySQL</a>.  It took longer to set up the hosting than to write the code.</p>

<p>So, give it a whirl: <a href="http://throwtext.com">Throw Text</a>.</p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date>2008-05-11 00:58:04</wp:post_date>
		<wp:post_date_gmt>2008-05-10 23:58:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>throw-text-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using cron with Rails on Slicehost</title>
		<link>http://maryrosecook.com/blog/post/using-cron-with-rails-on-slicehost-2</link>
		<pubDate>Thu, 08 May 2008 23:57:07 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/using-cron-with-rails-on-slicehost-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p>I need to run a model method on my Slicehost production app every hour.  I tried rake+cron, cronedit and a number of nut.crack(sledgehammer) queueing server solutions.  Some didn&#8217;t work and the rest were unreliable.  Therefore, for all you Ruby On Rails On Slicehost people, here is my approach. Treasure it.</p>

<p>1. ssh into your Slicehost account.</p>

<p>2. Switch to your user directory: <code>cd ~/</code></p>

<p>3. Make a new directory: <code>mkdir cronlogs</code></p>

<p>4. Make a new cron log file: <code>nano notifications.log</code></p>

<p>5. Add a space to the file and then save it.</p>

<p>6. The crontab is a text file that holds all your scheduled cron jobs.  Edit it: <code>crontab -e</code></p>

<p>7. We are going to enter a line into this file.  It will have the following structure: <code>[timings] [switch to your app directory] &amp;&amp; [path to ruby] script/runner -e [environment] [method to run] &gt; [path to cron log]</code></p>

<p>8. Here is what I entered into my crontab.  When you write your own version, make sure that the paths reflect where you have stored ruby and your app, and that you fill in the blank for your app name and set your own timings. <code>1 1 * * * cd /home/admin/public_html/[your app name]/current &amp;&amp; /usr/local/bin/ruby script/runner -e production 'Match.generate_and_save_matches' &gt; ~/cronlogs/notifications.log</code></p>

<p>8a. It is a good idea to test the command you enter (minus the scheduling information) in your command line.  If it doesn&#8217;t work there, it won&#8217;t work when run by cron, either.  </p>

<p>9. If you try and save your crontab and it says you have errors, make sure the whole thing is on one line.</p>

<p>10. If your model method runs OK, you will probably get no feedback.  However, if there was an error, you should either get some mail or something should get written to the cron log you created.</p>

<p><a href="http://twitter.com/maryrosecook/statuses/806692908">The tweet I sent once I got this working</a>.</p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date>2008-05-09 00:57:07</wp:post_date>
		<wp:post_date_gmt>2008-05-08 23:57:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-cron-with-rails-on-slicehost-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Books I have read recently</title>
		<link>http://maryrosecook.com/blog/post/books-i-have-read-recently-2</link>
		<pubDate>Thu, 01 May 2008 23:55:14 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/books-i-have-read-recently-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p><a href="http://www.gigamonkeys.com/book/">Practical Common Lisp</a>, Peter Seibel</p>

<p><a href="http://en.wikipedia.org/wiki/DMZ_(DC_Comics)">DMZ: On The Ground</a>, Brian Wood and Riccardo Burchielli</p>

<p><a href="http://en.wikipedia.org/wiki/For_Whom_the_Bell_Tolls">For Whom The Bell Tolls</a>, Ernest Hemingway</p>

<p><a href="http://www.amazon.co.uk/Programming-Collective-Intelligence-Building-Applications/dp/0596529325">Collective Intelligence</a>, Toby Segaran</p>

<p><a href="http://www.amazon.co.uk/Best-Technology-Writing-Steven-Levy/dp/0472032666">The Best of Technology Writing 2007</a>, Steven Levy, editor</p>

<p><a href="http://www.oup.com/us/catalog/he/subject/PoliticalScience/PoliticalTheory/Democracy/?view=usa&amp;ci=9780192803955">Political Philosphy</a>, David Miller</p>

<p><a href="http://www.paulgraham.com/hp.html">Hackers And Painters</a>, Paul Graham</p>

<p><a href="http://en.wikipedia.org/wiki/Violent_Cases">Violent Cases</a>, Neil Gaiman and Dave McKean</p>

<p><a href="http://en.wikipedia.org/wiki/Surely_You" re_joking>Surely You&#8217;re Joking, Mr Feynman!</a>, Richard P. Feynman</p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date>2008-05-02 00:55:14</wp:post_date>
		<wp:post_date_gmt>2008-05-01 23:55:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>books-i-have-read-recently-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A beautiful boy</title>
		<link>http://maryrosecook.com/blog/post/a-beautiful-boy-2</link>
		<pubDate>Mon, 24 Mar 2008 23:54:27 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/a-beautiful-boy-2</guid>
		<description></description>
		<content:encoded><![CDATA[I am totally in love with Spencer Krug.  I adore how he gets so angry when he sings.

<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="425" height="355" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="wmode" value="transparent" /><param name="src" value="http://www.youtube.com/v/DYwZNRwvLP8&amp;hl=en" /><embed type="application/x-shockwave-flash" width="425" height="355" src="http://www.youtube.com/v/DYwZNRwvLP8&amp;hl=en" wmode="transparent"></embed></object>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>232</wp:post_id>
		<wp:post_date>2008-03-25 00:54:27</wp:post_date>
		<wp:post_date_gmt>2008-03-24 23:54:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-beautiful-boy-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tweviews</title>
		<link>http://maryrosecook.com/blog/post/tweviews-2</link>
		<pubDate>Thu, 13 Mar 2008 23:53:30 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/tweviews-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p>Tiny reviews on <a href="http://twitter.com">Twitter</a>.

How artfully can you describe your impression of a song or a movie, a book or an album? There is no space for value judgements, no room for, &#8220;this sucks&#8221;.  Just tell us something interesting.  We want to see the inner life of this piece of art.  We want you to make us care about it.
</p>
<ul>
<li>The Wire Series 4 &#8230; A satisfying meal and a great, rippling flood of causation.</li>
<li>For Whom The Bell Tolls, Hemingway &#8230; Written close to the ground, to the tongue - at the contact points between man and world.</li>
</ul>To get these little gems and others like them, follow <a href="http://twitter.com/tweviews">tweviews</a> on Twitter.

To post a tweview, send a Twitter update like this: &#8216;@tweviews item, author &#8230; review&#8217;.

To find out more, check out the <a href="http://tweviews.com">tweviews website</a>.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>233</wp:post_id>
		<wp:post_date>2008-03-14 00:53:30</wp:post_date>
		<wp:post_date_gmt>2008-03-13 23:53:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tweviews-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Compiling Defence</title>
		<link>http://maryrosecook.com/blog/post/the-compiling-defence-2</link>
		<pubDate>Tue, 11 Mar 2008 23:52:35 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/the-compiling-defence-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p><img src="http://imgs.xkcd.com/comics/compiling.png" /><br />
Source: <a href="http://xkcd.com/303/">xkcd comic 303</a></p>

<p>In my dynamic, Ruby-infused world, the Compiling Defence is disappointingly impotent.</p>

<p>However, since I began using <a href="http://www.capify.org">Capistrano</a> on <a href="http://www.joyent.com/connector/web-hosting/">Joyent</a> shared servers, I have found an even better defence: &#8220;Deploying!&#8221;</p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>234</wp:post_id>
		<wp:post_date>2008-03-12 00:52:35</wp:post_date>
		<wp:post_date_gmt>2008-03-11 23:52:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-compiling-defence-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>EJ</title>
		<link>http://maryrosecook.com/blog/post/ej-2</link>
		<pubDate>Sun, 09 Mar 2008 23:51:38 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/ej-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p>Taken with the iPhone at the weekend.</p>

<p><img src="http://www.werenotthecoolkids.com/images/ellie.jpeg" width="500" /></p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date>2008-03-10 00:51:38</wp:post_date>
		<wp:post_date_gmt>2008-03-09 23:51:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ej-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  The author of xkcd.com , Randall Munroe, speaking at Google. </title>
		<link>http://maryrosecook.com/blog/post/the-author-of-xkcd-com-randall-munroe-speaking-at-google</link>
		<pubDate>Sat, 30 Aug 2008 23:49:53 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/the-author-of-xkcd-com-randall-munroe-speaking-at-google</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>239</wp:post_id>
		<wp:post_date>2008-08-31 00:49:53</wp:post_date>
		<wp:post_date_gmt>2008-08-30 23:49:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-author-of-xkcd-com-randall-munroe-speaking-at-google</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  Rigorous cataloguing of social dress codes </title>
		<link>http://maryrosecook.com/blog/post/rigorous-cataloguing-of-social-dress-codes</link>
		<pubDate>Sat, 15 Nov 2008 00:35:58 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/rigorous-cataloguing-of-social-dress-codes</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>187</wp:post_id>
		<wp:post_date>2008-11-15 01:35:58</wp:post_date>
		<wp:post_date_gmt>2008-11-15 00:35:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rigorous-cataloguing-of-social-dress-codes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  BlueTripCSS Framework - Blueprint meets Tripoli &#124; Capsize Designs </title>
		<link>http://maryrosecook.com/blog/post/bluetripcss-framework-blueprint-meets-tripoli-capsize-designs</link>
		<pubDate>Sun, 09 Nov 2008 00:34:05 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/bluetripcss-framework-blueprint-meets-tripoli-capsize-designs</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>189</wp:post_id>
		<wp:post_date>2008-11-09 01:34:05</wp:post_date>
		<wp:post_date_gmt>2008-11-09 00:34:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bluetripcss-framework-blueprint-meets-tripoli-capsize-designs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  Daniel Azuma: Implementing DSL Blocks </title>
		<link>http://maryrosecook.com/blog/post/daniel-azuma-implementing-dsl-blocks</link>
		<pubDate>Thu, 06 Nov 2008 00:33:07 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/daniel-azuma-implementing-dsl-blocks</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date>2008-11-06 01:33:07</wp:post_date>
		<wp:post_date_gmt>2008-11-06 00:33:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>daniel-azuma-implementing-dsl-blocks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  Clojure </title>
		<link>http://maryrosecook.com/blog/post/clojure-%c2%bb-home</link>
		<pubDate>Thu, 06 Nov 2008 00:32:10 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/clojure-%c2%bb-home</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>191</wp:post_id>
		<wp:post_date>2008-11-06 01:32:10</wp:post_date>
		<wp:post_date_gmt>2008-11-06 00:32:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>clojure-%c2%bb-home</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Plosiv</title>
		<link>http://maryrosecook.com/blog/post/plosiv-2</link>
		<pubDate>Tue, 04 Nov 2008 00:31:16 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/plosiv-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <p>Plosiv helps you live with the pizazz, the panache, you always wanted.</p>

<p>Now, you can follow a depression of the mind with a depression of a button that precipitates a depression of the air.  A sense of drama will pervade your actions.  A feeling of significance, or tension.</p>

<p>Some have an impact that others lack: movie stars set hearts thumping, video game characters have combustible accessories and musicians are supported by the drop.</p>

<p>Imagine if you could walk into a room and have everyone&#8217;s gaze drawn to you.  Imagine seeing a pretty young lady&#8217;s eyes widen as you deliver a telling insight.  Imagine your father clapping you on the back with the approval and trust you always wanted.</p>

<p>With Plosiv, all this is possible.</p>

<p>It&#8217;s so simple.  Keep it in your pocket.  Finger its hand-crafted, noir-sheen plastic.  And, when you need that extra emphasis, press the button.</p>

<p>Plosiv. Individual emphasis.</p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>193</wp:post_id>
		<wp:post_date>2008-11-04 01:31:16</wp:post_date>
		<wp:post_date_gmt>2008-11-04 00:31:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>plosiv-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  RubyMine - Download Public Preview </title>
		<link>http://maryrosecook.com/blog/post/rubymine-download-public-preview</link>
		<pubDate>Tue, 04 Nov 2008 00:30:20 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/rubymine-download-public-preview</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>194</wp:post_id>
		<wp:post_date>2008-11-04 01:30:20</wp:post_date>
		<wp:post_date_gmt>2008-11-04 00:30:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rubymine-download-public-preview</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  The Lost Years &amp; Last Days of David Foster Wallace </title>
		<link>http://maryrosecook.com/blog/post/the-lost-years-last-days-of-david-foster-wallace-rolling-stone</link>
		<pubDate>Sat, 01 Nov 2008 00:29:23 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/the-lost-years-last-days-of-david-foster-wallace-rolling-stone</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>195</wp:post_id>
		<wp:post_date>2008-11-01 01:29:23</wp:post_date>
		<wp:post_date_gmt>2008-11-01 00:29:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-lost-years-last-days-of-david-foster-wallace-rolling-stone</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  The Unfinished Swan - paint-throwing maze game </title>
		<link>http://maryrosecook.com/blog/post/the-unfinished-swan-paint-throwing-maze-game</link>
		<pubDate>Wed, 29 Oct 2008 00:27:29 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/the-unfinished-swan-paint-throwing-maze-game</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>197</wp:post_id>
		<wp:post_date>2008-10-29 01:27:29</wp:post_date>
		<wp:post_date_gmt>2008-10-29 00:27:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-unfinished-swan-paint-throwing-maze-game</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  why&#039;s (poignant) guide to ruby :: 6. Downtown </title>
		<link>http://maryrosecook.com/blog/post/why%e2%80%99s-poignant-guide-to-ruby-6-downtown</link>
		<pubDate>Mon, 27 Oct 2008 00:26:33 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/why%e2%80%99s-poignant-guide-to-ruby-6-downtown</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date>2008-10-27 01:26:33</wp:post_date>
		<wp:post_date_gmt>2008-10-27 00:26:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>why%e2%80%99s-poignant-guide-to-ruby-6-downtown</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  .c( whytheluckystiff )o. -- Seeing Metaclasses Clearly </title>
		<link>http://maryrosecook.com/blog/post/c-whytheluckystiff-o-seeing-metaclasses-clearly</link>
		<pubDate>Mon, 27 Oct 2008 00:25:37 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/c-whytheluckystiff-o-seeing-metaclasses-clearly</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>199</wp:post_id>
		<wp:post_date>2008-10-27 01:25:37</wp:post_date>
		<wp:post_date_gmt>2008-10-27 00:25:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>c-whytheluckystiff-o-seeing-metaclasses-clearly</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  Future Of Web Apps - London 2008 </title>
		<link>http://maryrosecook.com/blog/post/future-of-web-apps-london-2008</link>
		<pubDate>Mon, 27 Oct 2008 00:24:41 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/future-of-web-apps-london-2008</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>200</wp:post_id>
		<wp:post_date>2008-10-27 01:24:41</wp:post_date>
		<wp:post_date_gmt>2008-10-27 00:24:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>future-of-web-apps-london-2008</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SCJP</title>
		<link>http://maryrosecook.com/blog/post/scjp-2</link>
		<pubDate>Thu, 23 Oct 2008 00:23:45 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/scjp-2</guid>
		<description></description>
		<content:encoded><![CDATA[

  
  <img src="http://werenotthecoolkids.com/images/scjpnihilism.jpg" width="600" />
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>201</wp:post_id>
		<wp:post_date>2008-10-23 01:23:45</wp:post_date>
		<wp:post_date_gmt>2008-10-23 00:23:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scjp-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/202</link>
		<pubDate>Tue, 07 Oct 2008 00:22:48 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/202</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  Giles Bowkett is rocking my world.  Not just for <a href="http://gilesbowkett.blogspot.com/2008/01/drive-propellerhead-reason-with-ruby.html">Archaeopteryx</a>, not just for his rant about VC and paternal patronage (a tautology) but because of the way he just hacks away at stuff because it&#8217;s fun.  I do that, too, but I don&#8217;t have his admirable ability to not care if no one else cares.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>202</wp:post_id>
		<wp:post_date>2008-10-07 01:22:48</wp:post_date>
		<wp:post_date_gmt>2008-10-07 00:22:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>202</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  the perceptron - astute music recommendations </title>
		<link>http://maryrosecook.com/blog/post/the-perceptron-astute-music-recommendations</link>
		<pubDate>Mon, 06 Oct 2008 00:21:51 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/the-perceptron-astute-music-recommendations</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>203</wp:post_id>
		<wp:post_date>2008-10-06 01:21:51</wp:post_date>
		<wp:post_date_gmt>2008-10-06 00:21:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-perceptron-astute-music-recommendations</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Creating a music recommendation engine</title>
		<link>http://maryrosecook.com/blog/post/creating-a-music-recommendation-engine-2</link>
		<pubDate>Sun, 05 Oct 2008 00:20:55 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/creating-a-music-recommendation-engine-2</guid>
		<description></description>
		<content:encoded><![CDATA[I have spent the last six weeks writing a music recommendation engine, theperceptron.com It was fun.

<strong>From the user's perspective:</strong>
<ol>
	<li>Enter a band you like.</li>
	<li>Get recommendations for other bands you might also like.</li>
	<li>Test out the artists recommended by visiting their Myspaces and websites, reading their Wikipedia summaries and listening to sample tracks.</li>
	<li>Say whether you like or dislike your recommended bands.</li>
	<li>Add promising bands to your playlist so you can listen later.</li>
	<li>Suggest an artist or two that the site didn't recommended.</li>
	<li>Get on with your life.</li>
</ol>
<strong>From the code's perspective:</strong>

Recommendations are made based on connections between artists. These connections are found in data taken from the internet:
<ul>
	<li>Recommendations made by actual humans: tinymixtapes.com and epitonic.com and users of the perceptron.</li>
	<li>Artist admiration: artists' top friends on Myspace.</li>
	<li>Artists on the same mixtape: muxtape.com</li>
	<li>Artists on the same record label: wikipedia.org</li>
	<li>Artists posted to the same mp3 blog: hypem.com</li>
	<li>Artists who have played gigs together: myspace.com</li>
</ul>
Each rating action that a user can perform on a recommended artist - liking or disliking, visiting websites, listening to songs or adding them to the playlist - is associated with a certain number of points. These points are used in two ways. First, each source has a running total of points given to the recommendations made by the source. Second, each artist connection has a running total of the number of points it has accrued.

Recommendations are given a score based upon these point totals. Ignoring the weightings of the source and connection score, a recommendation's score is calculated thus:

<em>score = (source_points + connection_points) / num_source_connections</em>

the perceptron's algorithm is pretty obvious.  What makes the site good is the choice of data sources. However, the algorithm does allow experimentation with adding data sources. If I add a bad one, the scores given to its recommendations drop very rapidly. It only took about 200 user rating actions to get the site's data source weights pretty good. Here is the current table (higher numbers are better):
<table class="admin_table">
<tbody>
<tr>
<td class="admin_table_td">Source</td>
<td class="admin_table_td">Score</td>
</tr>
<tr>
<td class="admin_table_td">Epitonic similar artists</td>
<td class="admin_table_td">0.439</td>
</tr>
<tr>
<td class="admin_table_td">Tiny Mix Tapes similar artists</td>
<td class="admin_table_td">0.316</td>
</tr>
<tr>
<td class="admin_table_td">Myspace top friends</td>
<td class="admin_table_td">0.128</td>
</tr>
<tr>
<td class="admin_table_td">Mixtapes</td>
<td class="admin_table_td">0.075</td>
</tr>
<tr>
<td class="admin_table_td">Record labels</td>
<td class="admin_table_td">0.020</td>
</tr>
<tr>
<td class="admin_table_td">Epitonic other artists</td>
<td class="admin_table_td">0.016</td>
</tr>
<tr>
<td class="admin_table_td">MP3 blogs</td>
<td class="admin_table_td">0.003</td>
</tr>
<tr>
<td class="admin_table_td">Gigs</td>
<td class="admin_table_td">Score hasn't settled, yet.</td>
</tr>
<tr>
<td class="admin_table_td">the perceptron user recommendations</td>
<td class="admin_table_td">Score hasn't settled, yet.</td>
</tr>
</tbody>
</table>
<ol></ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date>2008-10-05 01:20:55</wp:post_date>
		<wp:post_date_gmt>2008-10-05 00:20:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creating-a-music-recommendation-engine-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  Confreaks: GoRuCo 2008 </title>
		<link>http://maryrosecook.com/blog/post/confreaks-goruco-2008</link>
		<pubDate>Fri, 03 Oct 2008 00:18:59 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/confreaks-goruco-2008</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>205</wp:post_id>
		<wp:post_date>2008-10-03 01:18:59</wp:post_date>
		<wp:post_date_gmt>2008-10-03 00:18:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>confreaks-goruco-2008</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  xkcd - Height </title>
		<link>http://maryrosecook.com/blog/post/xkcd-height</link>
		<pubDate>Wed, 01 Oct 2008 00:17:03 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/xkcd-height</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date>2008-10-01 01:17:03</wp:post_date>
		<wp:post_date_gmt>2008-10-01 00:17:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xkcd-height</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>the perceptron</title>
		<link>http://maryrosecook.com/blog/post/the-perceptron-2</link>
		<pubDate>Sat, 20 Sep 2008 00:16:06 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/the-perceptron-2</guid>
		<description></description>
		<content:encoded><![CDATA[

  
  <p><a href="http://theperceptron.com">the perceptron</a> is not a music recommendation website. It is a giant, bmx-riding, AIWA-headphoned, sunglassed, could-totally-get-an-A-in-maths-brained robot that processes the musical internet, notes your every move, and then plays you music you will fall in love with.</p>

<p>- <a href="http://theperceptron.com/blog/show/20">the perceptron blog</a></p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>207</wp:post_id>
		<wp:post_date>2008-09-20 01:16:06</wp:post_date>
		<wp:post_date_gmt>2008-09-20 00:16:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-perceptron-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  Lovely account of working on a start-up </title>
		<link>http://maryrosecook.com/blog/post/lovely-account-of-working-on-a-start-up</link>
		<pubDate>Mon, 01 Sep 2008 00:15:09 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/lovely-account-of-working-on-a-start-up</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date>2008-09-01 01:15:09</wp:post_date>
		<wp:post_date_gmt>2008-09-01 00:15:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lovely-account-of-working-on-a-start-up</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Deft and intuitive player character movement in a 2D platformer</title>
		<link>http://maryrosecook.com/blog/post/deft-and-intuitive-player-character-movement-in-a-2d-platformer</link>
		<pubDate>Mon, 13 Oct 2008 19:22:06 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=380</guid>
		<description></description>
		<content:encoded><![CDATA[Last week, I released <a href='http://emptyblack.com'>Empty Black</a>, my 2D shooter/puzzler/platformer.  In this article, I'll describe how I made the player movement deft and intuitive.  <a href='http://emptyblack.com/play.html'>Play the game</a> before you read on, so you'll know what I'm talking about.

My general approach was to change something, then try it out.  I took the ideas for adjustments from several sources.

One.  I examined the parameters affecting the movement of the player characters in other 2D platformers.  Is the floor slippy? What is the ratio of sideways movement to jump height? Does the character accelerate as it moves? Is the character's jump height affected by the length of time the player holds the jump button? Is the character slowed when it bumps into a moveable object?

Two.  I examined the unusual behaviours of the player characters in other 2D platformers.  Super Meat Boy makes the character leap away from the wall automatically when wall-jumping.  Spelunky lets the character pull himself up and over ledges.  In Castlevania, the character can do an extra jump while in mid-air.

Three.  I got people to play test.  <a href='http://kemalenver.com'>Kemal</a> told me that the character movement should be effortless.  Specifically, if the character hits a wall near the top, it should slip up and over.  <a href='http://www.honeyslug.com/'>Ricky</a> told me it was weird that the player had no control over the height of the character's jump.  He showed me how, when hopping over an obstacle in a room with a low ceiling, he bumped his head.  Ricky also pointed out the jarring effect of the initial slow down of the character when it lands after a jump.  Everyone told me that airborne movement was too sensitive.  Everyone told me that wall-jumping was too finicky.

Four.  I read pieces written by programmers about their character movement algorithms.  These pieces were mostly confined to short comments, rather than in-depth analyses.  Hence, this article.

To the algorithm.

The short version: a pile of hacks.

The long version:

The player presses the jump key.  The first question is: can the character jump? Which means: is the character in contact with anything that can be used as a place to jump from?

Empty Black uses <a href='http://box2d.org/'>Box2D</a> to control the physics of the game world.  Any movements are subject to Box2D's models of the forces of friction and gravity.  Further, Box2D handles the reactions of objects that collide: bounces, shoves, spins and slides.  The game can interrogate Box2D and ask what objects a particular object is touching.  If the character is currently touching something solid, the character may jump.

Except, it's not quite that simple.  As well as leaping from the ground, the character can wall-jump.  This means landing and clinging onto a wall, then jumping again, away from the wall.

<img src='/images/walljump.png' />

This technique is used frequently as a way for the player to get the character up a narrow shaft.  They jump it back and forth between the vertical, parallel walls of the shaft, ascending with each jump.

<img src='/images/walljumpshaft.png' />

This ability is bounded.  The player may jump the character out from a wall and land it on the same wall.  At this point, it may not jump again.  If the player tries to make it jump, the character will fall.  This bound is there to improve the gameplay.  It is easier to design fun levels if I can rely on the unscalable nature of a solitary wall.

The bound makes it harder to decide if the character has a solid footing.  The character should be able to jump from the ground as many times as the player likes.  But it should not be able to jump from the same wall twice in a row.

Fortunately, Box2D has a metaphysical object that complements the corporeal walls, enemies and bullets: the sensor.  This spiritual creature has no physical presence.  It has a location in the world and it registers collisions.  The programmer can interrogate it about such collisions, just as with physical objects.

What I did was to attach a wide, short sensor to the bottom of the character.  It would look like this, if you could see it:

<img src='/images/bottomsensor.png' />

Notice how the sensor overlaps the ground.

Now, instead of asking the character object about collisions, the game asks the character's bottom sensor.

How does that help? It doesn't.  But I can attach two more sensors to the character, one on each of its sides.

<img src='/images/allsensors.png' />

This means that the game can ask each sensor if it is touching anything.  If the bottom sensor is touching some solid footing, jumps are always allowed.  If only a side sensor is touching a solid footing, the game must investigate further.

Jumps will be allowed in all cases but two.

One.  The character lands against the wall it has just jumped from.

<img src='/images/samewall.png' />

The game keeps a record of the last sensor that registered the solid footing for a jump.  If it was a side sensor, and the character is using the same sensor for registration of the current solid footing, the jump is not allowed.

If the player loses control during a wall-jump ascent, the character will begin to fall.  The player might manage to press jump as it hits a wall on its way down.  It is possible that this wall will be the one they most recently jumped from.  If it is, the jump would be prevented.  However, there is an exception that permits the jump if the character is lower than it was when it jumped the time before.  This exception allows the player to recover from their mistake.  It makes the controls more forgiving.

Two.  The character lands and sticks to the wall.  The player continues to press the direction key that holds the character against the wall.  They press jump again.  The jump is not allowed.  If it were, the character would slide up the wall like this:

<img src='/images/slideupwall.png' />

To stop this, the game only allows the jump if the player is not pressing the character into the wall.

There is an exception.  If the character is near the top of a wall, it may jump.  This lets it slip up and over the wall.

<img src='/images/upandover.png' />

The game now knows if the character is allowed to jump.  To enact the jump, upward force is applied for a single instant.  The character's velocity is high when it first starts moving.  It is progressively attenuated by gravity.  Some distance into the air, all the character's momentum will be gone and it will begin falling.

If the player releases the jump button before the character has reached its peak in the jump, the character will immediately begin falling.  I stole this idea from Super Meat Boy.  The effect is that of a glass ceiling being inserted above the character's head.  This allows the player to control the height of the jump.  It stops Ricky getting a sore head.

The magnitude of the force of the jump is usually constant.  However, it is increased in two situations.

First, when the character is carrying a crate.  This stops the weighted character's jumps turning into lame little bunny hops.

Second, when the character is falling faster than usual.  Imagine the character is wall-jumping and, because of a player fumble, it hits the next wall at a point lower than the point it jumped from.  To help the player recover, their next attempt at a jump from a wall will lift the character with a force greater than normal.  The difference from the normal force is proportional to the disparity between the normal and actual force of falling.

Now: sideways movement.

The player presses the left arrow key.  What happens?

A leftward force is continually applied until the player releases the key.  The magnitude of the force depends on how fast the character is currently moving.  If it is at top speed, no force is applied.  If it is stationary, a large force is applied.  The idea is to get the character to top speed as fast as possible, then hold it at that speed.  This makes the movement more predictable.  It also solves Ricky's second problem.  The character immediately regains top speed after it lands a jump.

The player releases the key that moves the character left.  What happens?

The character immediately stops.  There is no slippiness.  Thus, the character is easier to control.

When I was designing the character movement, it was hard to keep the code tidy.  I tried to find the smallest number of rules that required the least subsequent modification with hacks.

Two examples.

One.  I tried to eliminate the slippiness of the floor by setting the friction very high.  But this had many undesired consequences.  It was hard to get the player moving sideways at top speed without also making airborne movement too sensitive.  Crates could no longer be shoved, and mis-throws would leave them perched on ledges.  I added code to immediately stop the character upon release of the move key.

Two.  Slipping up and over a ledge was just a matter of the player pressing the jump key near the top of a wall.  But if the character was only half way up a wall, such a jump would mean it slid upwards and got stranded.  I could have left that behaviour as it was.  But that would have made wall-jumping harder.  I could have automatically jumped the character away from the wall.  But that seemed too nannyish.  So, I prevented jumps when the player was pressing into the wall but was not near the top of it.

In both cases, it was worth slightly modifying a generally correct behaviour with an ugly but small hack that had no repercussions.

The general approach was to try stuff to explore the options.  But the goal was a few broad rules.  I did this by only deciding on a permanent change after a careful check of the ramifications.  And I sometimes entirely remade the rules, as with the addition of the sensors to the character.

Here is a pocket-sized summary for you.

Examine the overall behaviours and specific parameters of other games.  Get as much player feedback as you can.  Make many changes.  Tidy up after yourself.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>380</wp:post_id>
		<wp:post_date>2008-10-13 20:22:06</wp:post_date>
		<wp:post_date_gmt>2008-10-13 19:22:06</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>deft-and-intuitive-player-character-movement-in-a-2d-platformer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Kisses: the codename for my new app, and fun little functions</title>
		<link>http://maryrosecook.com/blog/post/kisses-the-codename-for-my-new-app-and-fun-little-functions-2</link>
		<pubDate>Fri, 13 Mar 2009 00:54:23 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/kisses-the-codename-for-my-new-app-and-fun-little-functions-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  Get the indefinite article for a noun:<br /><br />
<script src="http://gist.github.com/78374.js"></script><br />

Convert a number like 28,947,345 to a vaguer, but more digestible, statement like 29 million:<br /><br />
<script src="http://gist.github.com/78376.js"></script>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date>2009-03-13 01:54:23</wp:post_date>
		<wp:post_date_gmt>2009-03-13 00:54:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>kisses-the-codename-for-my-new-app-and-fun-little-functions-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Calculating whether to help the man beside me on the train who is having a heart attack</title>
		<link>http://maryrosecook.com/blog/post/calculating-whether-to-help-the-man-beside-me-on-the-train-who-is-having-a-heart-attack-2</link>
		<pubDate>Tue, 10 Mar 2009 00:53:27 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/calculating-whether-to-help-the-man-beside-me-on-the-train-who-is-having-a-heart-attack-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  Some friends and I were talking about delays on The London Underground.  Someone rather heartless was complaining about the people who choose to throw themselves onto the tracks at rush hour.  We got to talking about delays that result from, "A person being taken ill on a train." From there, we started doing calculations to determine whether it was more utilitarian to let someone die than delay thousands of people's journeys.
<br /><br />
Assumptions:

<ul>
<li>x people have their journey delayed.</li>
<li>A person being taken ill on a train results in a journey delay of half an hour per traveller.</li>
<li>The person gets taken ill on the Northern Line.</li>
<li>The ill person is of <a href="http://www.statistics.gov.uk/cci/nugget.asp?ID=6">average age</a> (39) and lives clean.  <a href="http://www.uwic.ac.uk/shss/dom/newweb/Lifestyle/age_expectancy2.htm">Thus</a>, they have a life expectancy of 88.</li>
<li>Ignore leap days.</li>
<li>There are <a href="http://en.wikipedia.org%3Cbr/%3E/wiki/Northern_Line">206,734,000</a> journeys made per annum on the Northern Line.</li>
<li>On this day, 566,395 will use the Northern Line.</li>
</ul>
Calculations:<br /><br />ill person rest of life &gt; 0.5 * x<br />429240 hours &gt; 0.5 * x<br />858480 &gt; x
<br /><br />
So, if x, the number of travellers who are delayed, is more than 858,480, it is better to let the person die in a corner than disrupt the transport service. 
<br /><br />
The good news is that even if every single person who was going to travel on the Northern Line that day were on it at that moment, it would still be worth doing the decent thing.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>161</wp:post_id>
		<wp:post_date>2009-03-10 01:53:27</wp:post_date>
		<wp:post_date_gmt>2009-03-10 00:53:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>calculating-whether-to-help-the-man-beside-me-on-the-train-who-is-having-a-heart-attack-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rewired State</title>
		<link>http://maryrosecook.com/blog/post/rewired-state-2</link>
		<pubDate>Tue, 10 Mar 2009 00:52:30 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/rewired-state-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  Last Saturday, I went to <a href="http://rewiredstate.org">Rewired State</a>, a hackday where people made useful apps that use government data.  The Guardian hosted us and gave us delicious free food.  We got some free beer in the evening, too.<br /><br />I did an app called <a href="http://theperceptron.com/lab/voxpomp">Voxpomp</a> that lets you search statements made by MPs in Parliament and then cross-reference the results with the news stories of the time.<br /><br />It was a great day - lots of nice people and interesting conversations.  I would love to see a Dewired State that was about using technology to let people build their own data sources and communities away from the government.<br /><br />You can see all the hacks on the <a href="http://projects.rewiredstate.org">Rewired State project page</a>.  My favourites were:<br /><br />* <a href="http://www.circus-foundation.org/projects/one-click-organisations/">One Click Organisations</a>.  Answer a few questions and the legal framework for your organisation will be drawn up.  You can also use the app to maintain your members list and propose and vote on motions.  I kind of wish the app could work outside of the assumption of a voting democracy, but it is only in its early stages.<br /><br />* <a href="http://projects.rewiredstate.org/projects/section-44">Section 44</a>.  A place to document instances where people were stopped and searched under Section 44 of the Terrorism Act.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>162</wp:post_id>
		<wp:post_date>2009-03-10 01:52:30</wp:post_date>
		<wp:post_date_gmt>2009-03-10 00:52:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rewired-state-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Git</title>
		<link>http://maryrosecook.com/blog/post/git-2</link>
		<pubDate>Tue, 03 Mar 2009 00:50:37 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/git-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  I've been using <a href="http://git-scm.com/">Git</a> for a while.  I like it.  However, it's kind of like watching <a href="http://www.imdb.com/title/tt0092563/">Angel Heart</a>: you get to the end and you go, "Wow."  But, then, you start to recurse from the denouement and fully expand the solutions you came up with as you watched the film.  Then, it becomes more like, "Whoa, that's means that...", "Oh, no! But he...", "Holy shitting fuck he had sex with..."<br /><br />Explaining Git to someone produces even more of a contrast between first and subsequent reactions.  The person you're explaining it to starts out like one of those people looking at a Magic Eye: "Mmmm, yeah, that's really weird."  And then they get it and they leap backwards shouting, "It's a fucking 3D <a href="http://www.amersol.edu.pe/ms/7th/7block/jungle_research/new_cards/14/pinkdolphin.jpg">pink dolphin</a>."
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>164</wp:post_id>
		<wp:post_date>2009-03-03 01:50:37</wp:post_date>
		<wp:post_date_gmt>2009-03-03 00:50:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>git-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My first open source app: Playmary</title>
		<link>http://maryrosecook.com/blog/post/my-first-open-source-app-playmary-2</link>
		<pubDate>Sun, 08 Feb 2009 00:47:49 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/my-first-open-source-app-playmary-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  Grab a copy from the <a href="http://github.com/maryrosecook/playmary">Github repository</a>. There are full set up instructions in the README.<br /><br />First, I cleaned up the app folder.  I put references to all my personal scripts, documentation files, deploy.rb and database.yml into .gitignore.  I put database.yml in the shared folder on the server, then added a task to my Capistrano deploy.rb so it would create a symlink from shared/config/database.yml to current/config<br /><br />Second, I cleaned all the secret and Playmary.com-specific stuff out of the code: Amazon AWS login details, the link to the default audiography, contact information.  I put it all into shared/config/config.yml and then wrote a method that returns the data referenced by the passed key.<br /><br />Finally, I had to get rid of all this secret stuff from the project's git history.  After wrestling with rebase for quite a while, I gave in.  I deleted the .git folder in my local copy of the code, changed the name of the Github repository to playmary-old, created a new repository on Github called playmary and pushed my local copy of the code into it.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>168</wp:post_id>
		<wp:post_date>2009-02-08 01:47:49</wp:post_date>
		<wp:post_date_gmt>2009-02-08 00:47:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-first-open-source-app-playmary-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Commando</title>
		<link>http://maryrosecook.com/blog/post/commando-2</link>
		<pubDate>Sun, 01 Feb 2009 00:46:53 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/commando-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  When I was at University, I started writing a game called Commando.  I used the SDL graphics library with C++ and developed on Windows.<br /><br />I followed a tutorial that taught the basics of movement and input.  I drew some horrendous graphics of some flat buildings and a stick man holding a gun.<br /><br />I got the basic stuff working so that the protagonist could move, jump, shoot and lob grenades.  I added a shooting star that periodically appeared in the night sky, stars that came out, distant backgrounds that scrolled by more slowly than the buildings in the foreground.  I added fountains, grenade explosions and ricochets, all based on particle effects.  I added gravity.<br /><br />However, the protagonist was alone.  He had no one to share these beautiful things with, or kill.  My development stalled, but I'm not sure why.<br /><br />I'm better at finishing things these days: playmary.com, theperceptron.com and my band's records are all complete and consumable.<br /><br />However, writing games is different to making websites and writing songs.  With the things I finish, the dependencies are minimal and the units self-contained.  Web pages may call on central functionality, but they can be written in relative isolation.  My songs have different, minimally related sections and often change key and time-signature.<br /><br />Games have a few central areas of activity - the input manager, the renderer, the object update loop - that are fed by hundreds of integrated parts.  They are more like people.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>169</wp:post_id>
		<wp:post_date>2009-02-01 01:46:53</wp:post_date>
		<wp:post_date_gmt>2009-02-01 00:46:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>commando-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/170</link>
		<pubDate>Wed, 25 Feb 2009 00:45:56 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/170</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <a href="http://libcom.org/library/abolish-restaurants">    Abolish Restaurants</a><br /><br />This is the best zine I've ever read.  My friend, Dave, perfectly described it: "On the surface, it's a description of the restaurant business, but, underneath, it's an attack on the way capitalism destroys everyday life."
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>170</wp:post_id>
		<wp:post_date>2009-02-25 01:45:56</wp:post_date>
		<wp:post_date_gmt>2009-02-25 00:45:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>170</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  The ACL is Dead, Zed Shaw </title>
		<link>http://maryrosecook.com/blog/post/the-acl-is-dead-zed-shaw</link>
		<pubDate>Tue, 13 Jan 2009 00:44:03 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/the-acl-is-dead-zed-shaw</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>172</wp:post_id>
		<wp:post_date>2009-01-13 01:44:03</wp:post_date>
		<wp:post_date_gmt>2009-01-13 00:44:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-acl-is-dead-zed-shaw</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Why do Capistrano deploys of git code take so long?</title>
		<link>http://maryrosecook.com/blog/post/why-do-capistrano-deploys-of-git-code-take-so-long-2</link>
		<pubDate>Mon, 12 Jan 2009 00:43:12 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/why-do-capistrano-deploys-of-git-code-take-so-long-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  1. I am a bumbrain.<br />2. I am using git.  Thus, the whole repository, including all previous revisions, is kept in a folder called .git which lives inside my local code copy.  A Capistrano deploy involves <em>uploading</em> a tarred copy of the project via <em>ssh</em> to the server.  This is slow.<br /><br />I plan to dump Capistrano and change my deployment process to: log into server, git pull from <a href="http://github.com">Github</a> (only a diff, so super quick), restart mongrels.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>174</wp:post_id>
		<wp:post_date>2009-01-12 01:43:12</wp:post_date>
		<wp:post_date_gmt>2009-01-12 00:43:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>why-do-capistrano-deploys-of-git-code-take-so-long-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  Brutal New York - Photographs 1965 to 1995 </title>
		<link>http://maryrosecook.com/blog/post/brutal-new-york-photographs-1965-to-1995</link>
		<pubDate>Sun, 11 Jan 2009 00:42:16 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/brutal-new-york-photographs-1965-to-1995</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>175</wp:post_id>
		<wp:post_date>2009-01-11 01:42:16</wp:post_date>
		<wp:post_date_gmt>2009-01-11 00:42:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>brutal-new-york-photographs-1965-to-1995</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Collaborative zombies</title>
		<link>http://maryrosecook.com/blog/post/collaborative-zombies-2</link>
		<pubDate>Sat, 20 Dec 2008 00:41:33 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/collaborative-zombies-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  Most recommendation systems that one sees on the internet are based on collaborative filtering.  The idea here is that if Johnny, Jenny, Joseph, Julian and Gilly all like A and B, there is probably a connection between those items.  Thus, if someone likes A, you can recommend them B.
<br /><br />
There are a couple of problems with this technique.
<br /><br />
First, it skews itself towards popularity and consensus.  If A is a really popular thing, it is more likely to appear in people's likes and, thus, more likely to be recommended.
<br /><br />
Second, the calculations are computationally intensive.  At the absolute worst, you could have (items owned ^ users) links to explore.  With a modest 100,000 users, each with a tiny collection of 10 items, this would equate to a maximum of 1.0 × 10^50 connections.
<br /><br />
Both these problems can be somewhat mitigated.  If you want to err towards the eccentric and the niche, you can lower the threshold of people required to deem two items connected.  So, maybe you would only require Johnny, Jenny and Julian to like both A and B in order to connect those items.
<br /><br />
If you want to make collaborative filtering less computationally expensive, you can do a couple of things.  First, cut out low-frequency items.  Second, process data in chunks.  Doing 50,000 users in one chunk and 50,000 in another will lose you some connections, but it will also massively reduce the computational load.
<br /><br />
Recently, I found a way to extract user music library data from <a href="http://emusic.com">Emusic</a>.  First, I found that if you add an Emusic user username onto "<a href="http://www.emusic.com/profile/ajax/downloads/artists.html?nickname=&quot;">http://www.emusic.com/profile/ajax/downloads/artists.html?nickname=&quot;</a>, you get back a list of artists by whom the user has downloaded songs.  I compiled a <a href="http://github.com/maryrosecook/commonusernames/">corpus</a> of common words, first names and last names.  I wrote a script to fuse these two things and ended up with 382,808 music library artist entries for 15,155 users.
<br /><br />
I wrote another script to extract 588,425 artist connections from this data.  To deem two artists connected, the script required that they occur together in at least twenty people's music libraries.
<br /><br />
As some of you may know, <a href="http://theperceptron.com">the perceptron</a> uses a number of music recommendation <a href="http://theperceptron.com/stats">data sources</a>.  Each has a weight that is based on the approval that users have shown the data source's recommendations.  At the moment, the Emusic data source's weight is hovering around 12%.  The top two sources each have weights of 34%.  However, Emusic's weight will increase as its recommendations are exposed to more users.
<br /><br />
One of my favourite things about the perceptron is that the vast majority of its <a href="http://theperceptron.com/stats">data sources</a> are based on conscious human opinions.  The data comes from gig line-ups, mixtapes, human recommendations, artist admiration, record labels and mp3 blogs.  I find collaborative filtering a little depressing: it's just SO mechanical.  One way to a) further improve its efficiency and b) make it a little more human would be to cluster users based upon demographic indicators, and then do the filtering.  How ace would it be to be able to do collaborative filtering on the music libraries of everyone who went to the same gig? Or everyone who is the same age? Or groups of people who are friends with each other? Or who all like the same film? If <a href="http://last.fm">last.fm</a> aren't doing this, they are fucking crazy.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>180</wp:post_id>
		<wp:post_date>2008-12-20 01:41:33</wp:post_date>
		<wp:post_date_gmt>2008-12-20 00:41:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>collaborative-zombies-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The icon</title>
		<link>http://maryrosecook.com/blog/post/the-icon-2</link>
		<pubDate>Thu, 18 Dec 2008 00:40:37 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/the-icon-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  For me, every idea and dream and activity has a tableau associated with it.  Like, when I think of making music with my band, I think the <a href="http://werenotthecoolkids.com/music/index.php">records I've already made</a>.  Or, when I think of having children, I think of lying in bed with my baby and my baby.
<br /><br />
When I think of the central idea of <a href="http://theperceptron.com">the perceptron</a>, I think of a giant web of connections between artists and the tendrils of recommendation spidering out from Des Ark to other bands I love.
<br /><br />
However, these are idealisations and simplifications.  More accurate versions would be simultaneously rushing my daughter to school and wiping her runny nose, sitting on a chair in my bedroom fiddling around on my guitar, a mess of pre-calculation and map-reading and planned routes.
<br /><br />
Which is to say, things are beautiful and theoretical in the mind and then get ugly and practical.
<br /><br />
So, in order to calculate recommendations in reasonable time, the perceptron does a few things.  Every link between artists has a grade.  Fine.  But it has to be precalculated. In most cases, spidering does not go past direct links from the starting point.  That tenuous, five-leap link between two bands that turns out to be brilliant: bullshit.
<br /><br />
However, sometimes, that practicality can bring beauty.  The moment of hitting upon a beautiful new melody.  Your daughter saying, "I love you, Mummy", as she gets out of the car.  Exploring indirect links that go via artists that the user has said they like and getting recommended <a href="http://theperceptron.com/recommendation/artist/converge1">Converge</a> from <a href="http://theperceptron.com/recommendation/artist/des+ark">Des Ark</a>.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>181</wp:post_id>
		<wp:post_date>2008-12-18 01:40:37</wp:post_date>
		<wp:post_date_gmt>2008-12-18 00:40:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-icon-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>last.fm Hack Day 2008</title>
		<link>http://maryrosecook.com/blog/post/last-fm-hack-day-2008-2</link>
		<pubDate>Wed, 17 Dec 2008 00:39:40 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/last-fm-hack-day-2008-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  Sunday was hack day.<br /><br />I arrived about ten and stood with lots of other people outside the venue.&nbsp; I smoked a cigarette.&nbsp; I sipped my coffee.<br /><br />We went in and found places to sit on sofas, at tables, in corners.&nbsp; Some guy from Microsoft said something, and then the programming began.<br /><br />I did two hacks.<br /><br />For my first, I added <a href="http://last.fm">last.fm</a> to <a href="http://theperceptron.com">the perceptron</a> as a new recommendation data source.&nbsp; My MacBook spent a lot of time pulling recommendations via the last.fm API and crunching data.&nbsp; the perceptron tracks user behaviour in order to determine the quality of its data sources.&nbsp; The top two, Tiny Mix Tapes reviewer recommendations and Epitonic writer recommendations, have a weighting of around 33% each.&nbsp; Poor old last.fm has only a 5% weight.&nbsp; However, in fairness, the perceptron favours the niche, whereas last.fm is a lot more comprehensive.&nbsp; Further, there are a lot of new bands in the database that haven't had time to accrue points for the last.fm data source.<br /><br />My <a href="http://theperceptron.com/lab/where_to_live">second hack</a> was quite mini. It takes your last.fm username and tells you where you should be living, based on where your favourite bands are playing the most gigs.&nbsp; I should move to New York City.<br /><br />At 7pm, bolstered by free food and a free bar, people did demos.&nbsp; Two highlights:<br /><br /><a href="http://playground.audioscrobbler.com/matt/hackday/?user=maryrosecook">Songcolours</a>. This takes your last.fm username and shows you colours and words from the lyrics of your favourite songs.&nbsp; Very tretty.<br /><br />StaffWars.&nbsp; This uses some program that allows you to pipe music from your computer to a set of speakers.&nbsp; With StaffWars, if a challenger to the current piper can correctly answer an automatically generated musical trivia question, they can take control of the speakers.<br /><br />It really was a good day.&nbsp; I met lots of lovely people and had a splendid time.&nbsp; Thanks so much to the last.fm guys for hosting the event.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>182</wp:post_id>
		<wp:post_date>2008-12-17 01:39:40</wp:post_date>
		<wp:post_date_gmt>2008-12-17 00:39:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>last-fm-hack-day-2008-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Zach Hill, The Present, Trencher</title>
		<link>http://maryrosecook.com/blog/post/zach-hill-the-present-trencher-2</link>
		<pubDate>Thu, 11 Dec 2008 00:38:44 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/zach-hill-the-present-trencher-2</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://myspace.com/trenchergrind">Trencher</a> were kind of good, but they only really have two songs: the doom one and the grind one.  Here are the band:

<a title="Trencher 1 by maryrosecook, on Flickr" href="http://www.flickr.com/photos/23309790@N07/3101033154/"><img src="http://farm4.static.flickr.com/3098/3101033154_5b7150a87f.jpg" alt="Trencher 1" width="600" border=0 /></a>
<a href="http://www.myspace.com/thepresentnewyork">
The Present</a> were half avant garde plinky plonky noise and half echoed-out rock music.  The drummer drummed on his knees.  The band had a wonderfully large amount of equipment on stage with them:

<a title="The Present 1 by maryrosecook, on Flickr" href="http://www.flickr.com/photos/23309790@N07/3100196997/"><img src="http://farm4.static.flickr.com/3133/3100196997_eb49cf9d41.jpg" alt="The present 1" width="600" border=0 /></a>

<a href="http://www.myspace.com/zachhillmusic">Zach Hill</a>, the drummer from Hella, was the closest I've come to religious music.  Over the last few years. his drumming has become a boring party trick.  He's like someone who still thinks the war is on, but instead of the war, it's Spencer Seim.

However, he was born for his solo project.  There were echoes of it in his Nervous Cop record with Greg Saunier of Deerhoof.  However, what achieved with that record relied on cut-ups and post-processing.  Now, he achieves it on his own, live.

Don't listen to the record.  There is some kind of switch in the brain that just like offers an unsubstantiated explanation for a purely audio experience of Hill's drumming that is something other than the truth which is: he drums really fast.  So, see him live, or get halfway there by watching a video:

<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="600" height="475" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="allowFullScreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="src" value="http://www.youtube.com/v/q9jysyLG5_M&amp;hl=en&amp;fs=1" /><param name="allowfullscreen" value="true" /><embed type="application/x-shockwave-flash" width="600" height="475" src="http://www.youtube.com/v/q9jysyLG5_M&amp;hl=en&amp;fs=1" allowscriptaccess="always" allowfullscreen="true"></embed></object>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>183</wp:post_id>
		<wp:post_date>2008-12-11 01:38:44</wp:post_date>
		<wp:post_date_gmt>2008-12-11 00:38:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>zach-hill-the-present-trencher-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  The Goslings </title>
		<link>http://maryrosecook.com/blog/post/the-goslings</link>
		<pubDate>Fri, 21 Nov 2008 00:37:47 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/the-goslings</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>184</wp:post_id>
		<wp:post_date>2008-11-21 01:37:47</wp:post_date>
		<wp:post_date_gmt>2008-11-21 00:37:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-goslings</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  How do I get into noise music? </title>
		<link>http://maryrosecook.com/blog/post/how-do-i-get-into-noise-music</link>
		<pubDate>Thu, 20 Nov 2008 00:36:50 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/how-do-i-get-into-noise-music</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>185</wp:post_id>
		<wp:post_date>2008-11-20 01:36:50</wp:post_date>
		<wp:post_date_gmt>2008-11-20 00:36:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-do-i-get-into-noise-music</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  Randall Munroe&#039;s visit to Google (xkcd)</title>
		<link>http://maryrosecook.com/blog/post/randall-munroes-visit-to-google-xkcd</link>
		<pubDate>Tue, 17 Mar 2009 00:13:15 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/randall-munroes-visit-to-google-xkcd</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>210</wp:post_id>
		<wp:post_date>2009-03-17 01:13:15</wp:post_date>
		<wp:post_date_gmt>2009-03-17 00:13:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>randall-munroes-visit-to-google-xkcd</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/222</link>
		<pubDate>Tue, 17 Mar 2009 00:02:54 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/222</guid>
		<description></description>
		<content:encoded><![CDATA[

  
  <a href="http://www.skyscrapercity.com/showthread.php?t=402544">Photographs of New York City</a>, 1965 to 1995.  Despite the sparse text, there is a fascinating narrative here.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>222</wp:post_id>
		<wp:post_date>2009-03-17 01:02:54</wp:post_date>
		<wp:post_date_gmt>2009-03-17 00:02:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>222</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/227</link>
		<pubDate>Mon, 16 Mar 2009 23:56:11 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/227</guid>
		<description></description>
		<content:encoded><![CDATA[

  
  I am listening to a song that I don&#8217;t remember but that I must have downloaded at the same time as all those other songs that make me feel sad.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>227</wp:post_id>
		<wp:post_date>2009-03-17 00:56:11</wp:post_date>
		<wp:post_date_gmt>2009-03-16 23:56:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>227</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/268</link>
		<pubDate>Mon, 16 Mar 2009 23:23:31 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/268</guid>
		<description></description>
		<content:encoded><![CDATA[

  
  I haven&#8217;t written a song since I released my last EP three months ago. And it&#8217;s not for want of trying. Thank God I have other creative outlets and projects to think about.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>268</wp:post_id>
		<wp:post_date>2009-03-17 00:23:31</wp:post_date>
		<wp:post_date_gmt>2009-03-16 23:23:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>268</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Another kiss</title>
		<link>http://maryrosecook.com/blog/post/another-kiss-2</link>
		<pubDate>Fri, 11 Sep 2009 01:12:04 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/another-kiss-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  I have made a new collection on Kisses that <a href="http://kisses.heroku.com/collection/causeofdeath">compares the likelihood of different causes of death</a>.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>135</wp:post_id>
		<wp:post_date>2009-09-11 02:12:04</wp:post_date>
		<wp:post_date_gmt>2009-09-11 01:12:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>another-kiss-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Waterfall and agile in pounds</title>
		<link>http://maryrosecook.com/blog/post/waterfall-and-agile-in-pounds-2</link>
		<pubDate>Tue, 08 Sep 2009 01:11:10 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/waterfall-and-agile-in-pounds-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  The Waterfall method of developing software guarantees a result: a digital version of the requirements specification.  Agile methods of developing software provide a service: software development.
<br /><br />
Agile is replacing Waterfall.  This means that software development is going from being fixed price to rate-based<sup>1</sup>.  With Waterfall, the developer would write the specification and then quote an estimate.  With agile, the developer still writes a rough specification, but the features in it are not guaranteed to appear in the final product.  Instead, the developer says, "Let's build this software together, and it will cost you £x per day."  It's kind of like a cab ride: you tell the cabbie your destination, but you can settle up and get out at any time.
<br /><br />
Which party, developer or client, is favoured financially by each of these methods? That depends on how good the developer is at estimating how long a piece of work will take.  If they are great, Waterfall is better because they can sign a contract up front and get a guaranteed amount of money.  If they are less than great, agile is better because they can't dig themselves into a horrible underestimation hole.
<br /><br />
Unfortunately, all developers suck at estimating work.  To accurately estimate, you need to think through every problem you'll encounter.  To find every problem, you have to go through the work in detail.  To go through the work in detail, you need to do the work.  Some help is afforded by previous experience, but software development is rife with novel, tricky little problems.
<br /><br />
So, financially speaking, Waterfall is bad for developers, and agile is better.
<br /><br />
<sup>1</sup> Agile changes software development from manufacturing (secondary) to a service (tertiary).  It was never quaternary, and it is also, finally, a developed country industry.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>137</wp:post_id>
		<wp:post_date>2009-09-08 02:11:10</wp:post_date>
		<wp:post_date_gmt>2009-09-08 01:11:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>waterfall-and-agile-in-pounds-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>You Are Full Of Junk</title>
		<link>http://maryrosecook.com/blog/post/you-are-full-of-junk-2</link>
		<pubDate>Tue, 08 Sep 2009 01:10:13 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/you-are-full-of-junk-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  The words to a <a href="http://maryrosecook.playmary.com/track/standhhhsplitep_youarefullofjunk">song</a> by Stand, a hardcore band:
<br /><br />
You are full of junk and junk fills your desires, but we know it's easier to sit in a comfy chair with an ice cool beer and a kitsch pink horizon of how your life might take some form. Junk is cheap, junk is holiday romance, junk is beer and T.V. Junk is playtime. Junk is once in a blue moon in Hollywood U.S.A. Junk is a coffee shop, a bunch of actors and a monkey. Junk is bland and junk is your future, should you let junk into your life.
<br /><br />
They talk about what they mean on the <a href="http://standhc.net/words.html">words page</a> of their website.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date>2009-09-08 02:10:13</wp:post_date>
		<wp:post_date_gmt>2009-09-08 01:10:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>you-are-full-of-junk-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>the perceptron is dead</title>
		<link>http://maryrosecook.com/blog/post/the-perceptron-is-dead-2</link>
		<pubDate>Wed, 26 Aug 2009 01:09:17 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/the-perceptron-is-dead-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  I am sad to see the <a href="http://theperceptron.com">little lady</a> leave.  However, $43 a month for hosting is quite a lot, so she has to go.  The <a href="http://github.com/maryrosecook/theperceptron/">code</a> is open source and on GitHub.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date>2009-08-26 02:09:17</wp:post_date>
		<wp:post_date_gmt>2009-08-26 01:09:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-perceptron-is-dead-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to watch video on one monitor and work on another monitor in VLC on OS X</title>
		<link>http://maryrosecook.com/blog/post/how-to-watch-video-on-one-monitor-and-work-on-another-monitor-in-vlc-on-os-x-2</link>
		<pubDate>Thu, 13 Aug 2009 01:08:20 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/how-to-watch-video-on-one-monitor-and-work-on-another-monitor-in-vlc-on-os-x-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  1. Open Preferences.<br />2. Click the All radio button in the bottom left.<br />3. Open the Video sub-menu on the left hand side.<br />4. Open the Output Modules sub-menu of the Video menu.<br />5. Click on MacOSX.<br />6. Untick the Back Screens In Fullscreen checkbox.<br />7. Click the Save button on the bottom right.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date>2009-08-13 02:08:20</wp:post_date>
		<wp:post_date_gmt>2009-08-13 01:08:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-watch-video-on-one-monitor-and-work-on-another-monitor-in-vlc-on-os-x-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/141</link>
		<pubDate>Mon, 10 Aug 2009 01:07:23 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/141</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  Several years ago, my friend, Nick, and I were doing some late night joinery at <a href="http://www.thecommonplace.org.uk/">The Common Place</a>.  The building had failed its fire safety inspection and so we were making mini atriums around each entrance to hold fire doors.  Nick was telling me about this amazing book by a chap called Derrick Jensen.  The theme that is prominent in my mind is how you could use a special language to communicate with a duck and reconcile it to its death.  Several years later, my ungirlfriend began talking to me about the amazing Jensen.  She was dismissive of One Quack For Yes, Two For No (or whatever it's called), but was in love with his magnum opus, <a href="http://en.wikipedia.org/wiki/Endgame_%28Derrick_Jensen_books%29">Endgame</a>.  I scoffed.  I sneered.  I wheeled out the one quack joke for the seventeenth time this year.  Unfortunately for my credibility, today I find myself entranced by <a href="http://video.google.co.uk/videoplay?docid=8649250863235826256">Jensen's video about Endgame</a>.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date>2009-08-10 02:07:23</wp:post_date>
		<wp:post_date_gmt>2009-08-10 01:07:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>141</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/142</link>
		<pubDate>Sun, 09 Aug 2009 01:06:26 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/142</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  On Friday night, I programmed and came up with <a href="http://switchoffthelightbeforeyouleave.com/">Switch off the light before you leave</a> and my Mum watched the period drama, <a href="http://www.imdb.com/title/tt0260615/">The Forsyte Saga</a>, on ITV Watch Again.  The Forsytes would suffer horrendous misfortune and dish out utter nastiness, but, then, every fifteen minutes, they would forget their troubles, go to a raucous disco and a man would shout at them about how they should be drinking Bacardi.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date>2009-08-09 02:06:26</wp:post_date>
		<wp:post_date_gmt>2009-08-09 01:06:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>142</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>When I died</title>
		<link>http://maryrosecook.com/blog/post/when-i-died-2</link>
		<pubDate>Fri, 17 Jul 2009 01:04:46 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/when-i-died-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  The first thing I remember is:<br /><br />

Someone said, "How do you feel?"<br />I said, "Terrific".<br /><br />

However, that happened after I had been in intensive care for several days.  The story starts a few days before.<br /><br />

At 7pm on 12th May 2009, I was walking along Tooley Street near London Bridge.  I had just left work and was on my way to meet Andie at Bar Wotever.  I fell and hit my head.  A crowd of passers-by gathered.  One of them put me in the recovery position and one of them called an ambulance.  PC Lee and PC Harmsworth passed by on their motorcycles, saw the crowd and went over.  They examined me and found that my heart wasn't beating.  One of them did CPR until the ambulance arrived.<br /><br />

The paramedics took over the CPR.  They gave me two shocks from the defibrillator and managed to restart my heart.  They took me to the Accident and Emergency department at St Thomas's Hospital.  I was transferred to the Intensive Care Unit.  I was heavily sedated and a machine was breathing for me.  My Mum and Dad and my older sister, Jess, arrived in the late evening.<br /><br />

To reduce the chance of brain damage, the doctors used a cooled saline drip and ice blankets to keep my body very cold for the first twenty-four hours.  After a couple of days, a doctor decided it was time for me to breathe on my own.  The sedatives were stopped and, as I came awake, my air tube was removed from my throat and I breathed.<br /><br />

My Dad says he asked me whether I could hear him and I nodded a tiny "Yes".<br /><br />

I was in intensive care for a week and then I was transferred to Beckett, one of the cardiac wards.  I remember little of the first week there.  I talked to my friend, Nick, on the phone one day and he referred to something we'd spoken about the day before and I said I didn't recall the fact that we'd talked.  One night, I awoke in the midst of a dream where I was attached by wires to Jeremy from Peep Show.  I found a nurse adjusting the leads of my heart monitor and I said, "No, don't touch those! You'll kill Jeremy." The lovely ward sister, John, came and took me through an excruciatingly embarrassing compos mentis test ("What is your name?" "Where are you?" "What day is it?")<br /><br />

After a week on the ward, I was basically back to normal.  Unfortunately, the doctors couldn't work out what had caused my cardiac arrest.  The original plan had been to install a defibrillator in my chest.  This would detect dangerous heart rhythms and revert them back to good old sinus with an electric shock directly into my heart.  However, somehow  the doctors' aspirations became much greater and things turned into a sort of Sherlock Holmes mystery.<br /><br />

After a <a href="http://en.wikipedia.org/wiki/Computed_tomography">CT scan</a> (3D organ imaging with X-Rays), several <a href="">angiograms</a> (wire with camera on the end fed into the leg and up into the heart), several <a href="http://en.wikipedia.org/wiki/Magnetic_resonance_imaging">MRI</a> scans (3D organ imaging with magnetic resonance), several <a href="http://en.wikipedia.org/wiki/Echocardiography">echocardiograms</a> and a lot of blood tests, the following was discovered:<br /><br />

Part of the lateral ventricular wall of my heart is dead.<br /><br />

The circumflex artery that runs down the middle of my heart was coming from the wrong place.  In most people, it comes from the <a href="http://en.wikipedia.org/wiki/Aorta">aorta</a> - the main artery into the heart - and delivers lovely oxygenated blood.  In one in forty-thousand people, it comes from the pulmonary artery and delivers lame deoxygenated blood.<br /><br />

My aorta was bulging dangerously.  <br /><br />

The doctors worked up some theories.<br /><br />

Most of the people with the misplaced artery die as infants because the part of the heart supplied by the circumflex doesn't get enough oxygen.  My body compensated by growing little vessels to deliver oxygenated blood from another heart artery to the under-oxygenated area.  However, as I walked down Tooley Street, the already poor oxygen supply to the lateral ventricular wall of my heart became very bad.  The tissue there died from lack of oxygen.  My heart went into <a href="http://en.wikipedia.org/wiki/Ventricular_fibrillation">ventricular fibrillation</a> and then stopped.<br /><br />

When I was one year old, my aorta was too narrow.  A surgeon slit it open and installed some synthetic material in the slit to widen it.  Now, aged twenty-eight, the stitches in the synthetic material were coming loose.  If left to its own devices, my aorta would rupture and it would be curtains.<br /><br />

After about five weeks in hospital, the doctors cooked up a solution to these problems.<br /><br />

To get a good oxygen supply to the lateral ventricular wall of my heart, they would perform a bypass to move the circumflex artery so it was fed by the aorta.  To prevent my aorta rupturing, they would chop out the bulging section and replace it with a synthetic tube.  This would be done in one mammoth operation.<br /><br />

I found some of the details distressing.  I would be on a heart and lung machine for most of the operation.  Because the main vocal cord is wrapped around the aorta, it might be severed, thus destroying my voice.  Because they would be operating near the arteries that supply the spine, it was possible they might sever one and paralyse me.  There was a 10% chance that I would die on the table.<br /><br />

On the morning of the operation, my Mum and Dad and my brother, Matt, hung out with me at my bed.  We laughed a lot.  Matt told me he loved me for the first time.  I was given two <a href="http://en.wikipedia.org/wiki/Temazepam">Temazepam</a> and went off to theatre waving a jaunty goodbye.<br /><br />

The operation took ten hours.  Afterwards, I spent twenty-four hours unconscious in intensive care.<br /><br />I woke up in the High Dependency Unit.  I could move my legs.  I could speak.  I was drugged up to the eyeballs on morphine.  I ate four yoghurts and talked to my Mum.<br /><br />The next day, the nurses removed the tubes that were draining blood from my chest.  The day after that, I was moved to Doulton, another cardiac ward.   The day after that, the nurses removed the dressings that covered the main incision in my chest and I had my first post-operative shaky-kneed shower.<br /><br />

When they were developing the original Macintosh, the Apple engineers referred not to a deadline for the project, but instead to a constant time to completion.  In other words, the end was always in sight, but never got any nearer.  I felt the same way about being in hospital.  However, two weeks after the operation, eight weeks after I'd been admitted, I was discharged.<br /><br />

Two weeks after that, I am sitting in bed at my Mum's house and writing this.  I have a new scar down the middle of my chest.  I have been to a party and into town a few times and came back very tired.  I sleep in the afternoon.  I can't run.  Sneezing feels like my collar bone is going to split in two.  Sometimes, I feel afraid when I go to sleep.  I get out of breath when I speak.<br /><br />

Dying meant that I missed out on a bunch of life: The Acorn, Horse The Band and Jamie Stewart gigs, several parties, supper with my brother and sister, the Anarchist Conference, the Queer Insurrection gathering in Leeds, a screening of Objectified, the Radical Routes party and my sister's birthday, and a beside-myself-with-excitement visit to my ungirlfriend in Bradford.<br /><br />

But, life is slowly coming back.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>148</wp:post_id>
		<wp:post_date>2009-07-17 02:04:46</wp:post_date>
		<wp:post_date_gmt>2009-07-17 01:04:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>when-i-died-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The end of the world, Lee Marvin, shooting police officers, Bruce Sterling and Godspeed You! Black Emperor</title>
		<link>http://maryrosecook.com/blog/post/the-end-of-the-world-lee-marvin-shooting-police-officers-bruce-sterling-and-godspeed-you-black-emperor-2</link>
		<pubDate>Wed, 17 Jun 2009 01:03:49 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/the-end-of-the-world-lee-marvin-shooting-police-officers-bruce-sterling-and-godspeed-you-black-emperor-2</guid>
		<description></description>
		<content:encoded><![CDATA[

  
  <p>This evening, I talked to my girl and then got into bed.  Because I'm in hospital, each night, I fall asleep hooked up to Monty the heart monitor and my iPhone.  I listened to a <a href="http://maryrosecook.playmary.com/track/desark_mysaddleiswaitingcmonjustonit">heart-breaking song</a> by Des Ark, then a <a href="http://maryrosecook.playmary.com/track/musicforone_forwardsandback">beautiful, cyclical, looking-across-the-misty-hills-early-in-the-morning type song</a> by my friend, Sherry, that then segued into talks from <a href="http://www.webstock.org.nz/talks/events/webstock-09/">Webstock 2009</a>. I heard a bit of <a href="http://vimeo.com/5102055">Tom Coates on tracking data about aspects of our lives</a> and then segued my own way into sleep.</p>

<p>I woke up a while later having had a restless dream where I was on some sort of mission to sabotage or subvert the government.  I'd been through a sort of army-like training programme with some fellow activist friends and now we were running through darkened offices and municipal buildings at night.  I think I shot a policeman.  I woke just after I had stuffed myself into a dumb waiter to find that Tom Coates had finished talking and Bruce Sterling had been going for a while.</p>

<p>He alternated between a monotone that sounded like Lee Marvin describing the end of the world in Godspeed You! Black Emperor's song, <a href="http://maryrosecook.playmary.com/track/godspeedyoublackemperor_thedeadflagblues">The Dead Flag Blues</a>, and a more robust sing-song delivery that was like the accompanying music.  In my half-sleep state, my revolutionary dream merged with the end of the world he was describing into a shaking, tremulous feeling filled with possibility.</p>

<p>You can <a href="http://2009.r2.co.nz/20090219/bruce-s.mp3">listen to the audio of his talk</a> [relevant section starts around 1h and 31m in], or you can watch <a href="http://"></a><a href="http://vimeo.com/4955251">the video</a> [relevant section is the last seven or eight minutes], or you can read the <a href="http://www.wired.com/beyond_the_beyond/2009/03/what-bruce-ster/">transcript</a> [relevant section excerpted below].</p>

<hr />
<p>Bruce Sterling at Webstock 2009, excerpt:</p>

<p>"Are there some non-financial structures that are less predatory and unstable than this radically out-of-kilter invisible hand? The invisible hand is gonna strangle us! Everybody's got a hand out  -  how about offering people some visible hands?</p>

<p>"Not every Internet address was a dotcom. In fact, dotcoms showed up pretty late in the day, and they were not exactly welcome. There were dot-orgs, dot edus, dot nets, dot govs, and dot localities.</p>

<p>"Once upon a time there were lots of social enterprises that lived outside the market; social movements, political parties, mutual aid societies, philanthropies. Churches, criminal organizations  -  you're bound to see plenty of both of those in a transition - Labor unions - not little ones, but big ones like Solidarity in Poland; dissident organizations, not hobby activists, big dissent, like Charter 77 in Czechoslovakia.</p>

<p>"Armies, national guards. Rescue operations. Global non-governmental organizations. Davos Forums, Bilderberg guys.</p>

<p>"Retired people. The old people can't hold down jobs in the market. Man, there's a lot of 'em. Billions. What are our old people supposed to do with themselves? Websurf, I'm thinking. They're wise, they're knowledgeable, they're generous by nature; the 21st century is destined to be an old people's century. Even the Chinese, Mexicans, Brazilians will be old. Can't the web make some use of them, all that wisdom and talent, outside the market?</p>

<p>"Market failures have blown holes in civil society. The Greenhouse Effect is a market failure. The American health system is a market failure  -  and most other people's health systems don't make much commercial sense. Education is a loss leader and the university thing is a mess.</p>

<p>"Income disparities are insane. The banker aristocracy is in hysterical depression. Housing is in wreckage; the market has given us white-collar homeless and a million empty buildings.</p>

<p>"The energy market is completely freakish. If you have no fossil fuels, you shiver in the dark. If you do have them, your economy is completely unstable, your government is corrupted and people kill you for oil.</p>

<p>"The human trafficking situation is crazy. In globalization people just evaporate over borders. They emigrate illegally and grab whatever cash they can find. If you don't export you go broke from trade imbalances. If you do export, you go broke because your trading partners can't pay you.</p>

<p>"Kinda hard to face up to all this, especially when it's laid out in this very bald fashion.</p>

<p>"But you know, I'm not scared by any of this. I regret the suffering, I know it's big trouble  -  but it promises massive change and a massive change was inevitable. The way we ran the world was wrong.</p>

<p>"I've never seen so much panic around me, but panic is the last thing on my mind. My mood is eager impatience. I want to see our best, most creative, best-intentioned people in world society directly attacking our worst problems. I'm bored with the deceit. I'm tired of obscurantism and cover-ups. I'm disgusted with cynical spin and the culture war for profit. I'm up to here with phony baloney market fundamentalism. I despise a prostituted society where we put a dollar sign in front of our eyes so we could run straight into the ditch.</p>

<p>"The cure for panic is action. Coherent action is great; for a scatterbrained web society, that may be a bit much to ask. Well, any action is better than whining. We can do better.</p>

<p>"I'm not gonna tell you what to do. I'm an artist, I'm not running for office and I don't want any of your money. Just talk among yourselves. Grow up to the size of your challenges. Bang out some code, build some platforms you don't have to duct-tape any more, make more opportunities than you can grab for your little selves, and let's get after living real lives.</p>

<p>"The future is unwritten. Thank you very much."</p>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>149</wp:post_id>
		<wp:post_date>2009-06-17 02:03:49</wp:post_date>
		<wp:post_date_gmt>2009-06-17 01:03:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-end-of-the-world-lee-marvin-shooting-police-officers-bruce-sterling-and-godspeed-you-black-emperor-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>enclosure</wp:meta_key>
			<wp:meta_value><![CDATA[http://2009.r2.co.nz/20090219/bruce-s.mp3
60546846
audio/mpeg
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  Woman faces riot police in Tehran </title>
		<link>http://maryrosecook.com/blog/post/woman-faces-riot-police-in-tehran</link>
		<pubDate>Sun, 14 Jun 2009 01:02:53 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/woman-faces-riot-police-in-tehran</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>150</wp:post_id>
		<wp:post_date>2009-06-14 02:02:53</wp:post_date>
		<wp:post_date_gmt>2009-06-14 01:02:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>woman-faces-riot-police-in-tehran</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  Rachel Carns - Wikipedia </title>
		<link>http://maryrosecook.com/blog/post/rachel-carns-wikipedia</link>
		<pubDate>Sat, 13 Jun 2009 01:01:56 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/rachel-carns-wikipedia</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>151</wp:post_id>
		<wp:post_date>2009-06-13 02:01:56</wp:post_date>
		<wp:post_date_gmt>2009-06-13 01:01:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rachel-carns-wikipedia</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/152</link>
		<pubDate>Sat, 09 May 2009 01:00:59 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/152</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  "In trench warfare five things are important: firewood, food, tobacco, candles, and the enemy. In winter on the Zaragoza front they were important in that order."<br /><br />- Homage To Catalonia, George Orwell.<br /><br />At hack days seven things are important: wi-fi, power, coffee, food, comfort, warmth, sleep. In spring at Open Hack London they were
important in that order.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date>2009-05-09 02:00:59</wp:post_date>
		<wp:post_date_gmt>2009-05-09 01:00:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>152</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  Working with PGP and Mac OS X </title>
		<link>http://maryrosecook.com/blog/post/working-with-pgp-and-mac-os-x</link>
		<pubDate>Tue, 05 May 2009 00:59:02 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/working-with-pgp-and-mac-os-x</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>153</wp:post_id>
		<wp:post_date>2009-05-05 01:59:02</wp:post_date>
		<wp:post_date_gmt>2009-05-05 00:59:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>working-with-pgp-and-mac-os-x</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  Great review of Ariel Schrag&#039;s Likewise </title>
		<link>http://maryrosecook.com/blog/post/great-review-of-ariel-schrags-likewise</link>
		<pubDate>Tue, 28 Apr 2009 00:58:05 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/great-review-of-ariel-schrags-likewise</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date>2009-04-28 01:58:05</wp:post_date>
		<wp:post_date_gmt>2009-04-28 00:58:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>great-review-of-ariel-schrags-likewise</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>London G20 Climate Camp Protest photos</title>
		<link>http://maryrosecook.com/blog/post/london-g20-climate-camp-protest-photos-2</link>
		<pubDate>Thu, 02 Apr 2009 00:57:11 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/london-g20-climate-camp-protest-photos-2</guid>
		<description></description>
		<content:encoded><![CDATA[

  
  <img src="http://farm4.static.flickr.com/3550/3406743498_427497be98_d.jpg" style="" width="600" /><br /><br />

<a href="http://www.flickr.com/photos/23309790@N07/sets/72157616165058051/">See the whole set</a>.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>156</wp:post_id>
		<wp:post_date>2009-04-02 01:57:11</wp:post_date>
		<wp:post_date_gmt>2009-04-02 00:57:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>london-g20-climate-camp-protest-photos-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>BarcampLondon6</title>
		<link>http://maryrosecook.com/blog/post/barcamplondon6-2</link>
		<pubDate>Tue, 31 Mar 2009 00:56:14 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/barcamplondon6-2</guid>
		<description></description>
		<content:encoded><![CDATA[In short, fun fun fun fun.

We set up at The Guardian's offices on Friday evening.  I and a few other lucky organisers made a lot of Lego men:

<img src="http://maryrosecook.com/images/IMG_0138.JPG" alt="" width="600" />

We returned at 8 a.m. on Saturday.  People registered and got their swag bags (customised t-shirt, Lego man with accessories, Sharpie).

For those that don't know, one the best things about Barcamp is that anyone can put on a session.  I went to a session about hacking the baking of bread:

Gui's thesis (<a href="http://www.slideshare.net/guioconnor/sourdough-bread-hacking-and-social-baking">slides</a>) is that one can try out recipes and then improve them through further experimentation.  He said that because of the long periods that bread must be left alone, it is the perfect activity to interleave with hacking sessions.  You mix flour and water, cover and leave it for two days.  You will have a pit of bacteria.  Add more flour and water, leave for another two days.  Take a third of the result - leaven - add more flour and water, knead, leave to prove, knead, then bake.  Use the rest of the leaven as your next starter batch.  Share it with friends.  Add other stuff.

<img src="http://maryrosecook.com/images/IMG_0147.JPG" alt="" width="600" />

I went to a talk on young people by a guy called Will.  We talked mostly about the divide between younger and older people and about whether the two groups differ.  Did you know that people under sixteen can, after 9pm, be escorted by Police out of central London?

<img src="http://maryrosecook.com/images/IMG_0152.JPG" alt="" width="600"  />

I did a session on <a href="http://theperceptron.com">the perceptron</a>.  I talked about how to make good music recommendations (<a href="http://www.slideshare.net/maryrosecook/how-to-do-music-recommendation">slides</a>, <a href="http://blog.maryrosecook.com/post/6764040/Creating-a-music-recommendation-engine">an out of date blog post</a>).  We had a really great discussion about how music recommendations should *really* be done.

Could you graph a person's music taste against artist output over time?  That way, you might see a person fall in love with and out of love with bands.  You might see which parts of an artist's canon the user preferred.

Should you recommend only albums, or even songs, rather than artists?  It's rare to like all of the recorded output of even a favourite band.  Does the dissection of music into songs start to destroy the concept of the album?

We also talked about how to incorporate music discovery into everyday life.  Are clubs and the radio really as good as it gets? Could occasional new songs be interspersed with a majority of songs a user already knows? Will mobile music catalogues and perennial access to large libraries make this easier?

As night fell, the games of <a href="http://en.wikipedia.org/wiki/Mafia_%28party_game%29">Werewolf</a> began.

<img src="http://maryrosecook.com/images/IMG_0153.JPG" alt="" width="600"  />

I had never played before and fell instantly in love.  Players sit in a circle.  A few people are werewolves and the rest are villagers.  Each group has to eradicate the other to win the game.  Killings happen either in the night when the villagers are asleep and the werewolves silently agree upon someone to tear to shreds, or in the day when the villagers agree on someone to lynch.

I thought about why geeks choose to play a game defined by social interaction.  Someone pointed out that we like systems and environments with strict rules.  Thus, exploring social interaction - arguing, backing-up, lying, debating, confronting, sharing, joking - in a controlled environment is perfect.

Time wore on.  The clocks went forward and it got to five in the morning and I went to bed.  I say, "bed", but what I mean is a chair.  I pulled my coat around me and nodded off.  I awoke two hours later.

<img src="http://maryrosecook.com/images/IMG_0154.JPG" alt="" width="600"  />

We laid out breakfast and everyone munched away.  The Sunday sessions began (sadly, I didn't get to any of them).  I had a wonderful talk with Amir on how hacking is one of the great arts, but lacks the surface charisma of music and painting and theatre and has a disappointing disconnect between the raw materials and the product.

On the bus back to Brixton, I thought about how events that last several days are popular amongst many different groups.  Music festivals, camping trips, retreats, conferences, holidays, political protests.  But I think the key element is not the extended time, but the overnights.  There is something about that four-in-the-morning feeling that makes time feel special.  You know you should be in bed like everyone else, but you aren't - you are in another world.  I couldn't shake the feeling of being a kid run amok in the school after all the teachers have gone home.

Hey! Mr. Tambourine Man, play a song for me,
I'm not sleepy and there is no place I'm going to.
Hey! Mr. Tambourine Man, play a song for me,
In the jingle jangle morning I'll come followin' you.

Though I know that evenin's empire has returned into sand,
Vanished from my hand,
Left me blindly here to stand but still not sleeping.
My weariness amazes me, I'm branded on my feet,
I have no one to meet
And the ancient empty street's too dead for dreaming.

Take me on a trip upon your magic swirlin' ship,
My senses have been stripped, my hands can't feel to grip,
My toes too numb to step, wait only for my boot heels
To be wanderin'.
I'm ready to go anywhere, I'm ready for to fade
Into my own parade, cast your dancing spell my way,
I promise to go under it.

Then take me disappearin' through the smoke rings of my mind,
Down the foggy ruins of time, far past the frozen leaves,
The haunted, frightened trees, out to the windy beach,
Far from the twisted reach of crazy sorrow.
Yes, to dance beneath the diamond sky with one hand waving free,
Silhouetted by the sea, circled by the circus sands,
With all memory and fate driven deep beneath the waves,
Let me forget about today until tomorrow.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date>2009-03-31 01:56:14</wp:post_date>
		<wp:post_date_gmt>2009-03-31 00:56:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>barcamplondon6-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  Playlist of The Guardian&#039;s 1000 songs everyone must hear </title>
		<link>http://maryrosecook.com/blog/post/playlist-of-the-guardians-1000-songs-everyone-must-hear</link>
		<pubDate>Mon, 23 Mar 2009 00:55:17 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/playlist-of-the-guardians-1000-songs-everyone-must-hear</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>158</wp:post_id>
		<wp:post_date>2009-03-23 01:55:17</wp:post_date>
		<wp:post_date_gmt>2009-03-23 00:55:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>playlist-of-the-guardians-1000-songs-everyone-must-hear</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/163</link>
		<pubDate>Tue, 17 Mar 2009 00:51:33 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/163</guid>
		<description></description>
		<content:encoded><![CDATA[

  
  Made up a Friday joke:<br /><br />What is The RZA's favourite programming language?<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />Wuby.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>163</wp:post_id>
		<wp:post_date>2009-03-17 01:51:33</wp:post_date>
		<wp:post_date_gmt>2009-03-17 00:51:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>163</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  Munch Munch - Wedding (Live)</title>
		<link>http://maryrosecook.com/blog/post/munch-munch-wedding-live</link>
		<pubDate>Tue, 17 Mar 2009 00:48:46 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/munch-munch-wedding-live</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>167</wp:post_id>
		<wp:post_date>2009-03-17 01:48:46</wp:post_date>
		<wp:post_date_gmt>2009-03-17 00:48:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>munch-munch-wedding-live</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/196</link>
		<pubDate>Tue, 17 Mar 2009 00:28:26 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/196</guid>
		<description></description>
		<content:encoded><![CDATA[

  
  Saw Oxes live at The Luminaire in London on Tuesday.  They were pretty fucking great:

<object height="344" width="425"><param name="movie" value="http://www.youtube.com/v/K5pPCJuJDWc&amp;hl=en&amp;fs=1" />
<param name="allowFullScreen" value="true" />
<param name="allowscriptaccess" value="always" />
<embed allowfullscreen="true" src="http://www.youtube.com/v/K5pPCJuJDWc&amp;hl=en&amp;fs=1" allowscriptaccess="always" type="application/x-shockwave-flash" height="405" width="500"></embed></object>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>196</wp:post_id>
		<wp:post_date>2009-03-17 01:28:26</wp:post_date>
		<wp:post_date_gmt>2009-03-17 00:28:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>196</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/111</link>
		<pubDate>Tue, 09 Mar 2010 01:32:51 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/111</guid>
		<description></description>
		<content:encoded><![CDATA[I have just added my first Playmary track that <a href="http://maryrosecook.playmary.com/track/brucespringsteen_myhometown">includes an image as the comment</a>.  I have no idea why I haven't done this before.
<br/><br/>
This evening, I got off the U-Bahn at Görlitzer Bhf. and My Hometown by Bruce Springsteen came on my headphones and I looked down the platform and saw the clear, twilight Berlin sky and the sun falling out of the sky.  I stood a moment to take a photograph.
<br/><br/>
<img src="http://www.maryrosecook.com/images/IMG_1824.JPG" width=600>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>111</wp:post_id>
		<wp:post_date>2010-03-09 02:32:51</wp:post_date>
		<wp:post_date_gmt>2010-03-09 01:32:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>111</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Syndicate</title>
		<link>http://maryrosecook.com/blog/post/syndicate-4</link>
		<pubDate>Sat, 06 Mar 2010 01:31:55 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/syndicate-4</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://maryrosecook.com/images/syndicate.gif" alt="" width="600" />

I have just re-discovered Syndicate and spent the afternoon playing a graphically crippled SNES version on my MacBook Pro.  You can get the emulator <a href="http://www.snes9x.com/">here</a> and the ROM <a href="http://www.completeroms.com/Rompages/Snesusa/S/syndicate.html">here</a>.

I played Syndicate on my PowerMac when I was fifteen.  I have no idea where I got my copy - it was an old game even then.  I was in love with it and another game, Myth II, around the same time.

Though they are very different, I liked the same things about them: they let you use a few basic tools to create your own stories and solve problems in your own way, and they are set in a world that makes you lick your lips.

<img src="http://maryrosecook.com/images/Myth-II-Soulblighter_1.jpg" alt="" width="600" />

In Myth II, you have archers with flaming arrows and dwarves with satchel charges.  You can light the grass on fire to corral the enemy into a narrow gully.  You can use the satchel charges to blow up the front and back of a company of enemy soldiers, trapping the survivors in the middle.  You can lure the enemy into an area and then tell your archers to fire their flaming arrows to ignite hidden charges.

You can create your own scenarios of destruction, and plot the enemy's demise like a story.  Once you get good at a level, the carnage takes on an air of theatre, of ballet.

Each level in Myth II is just about wiping out the enemy's army, but Syndicate gives you more story to work with.  The hyper-capitalist company for which you work needs a politician assassinating.  He is to attend a mega-mall opening.  You could lie in wait by the road and blow up his car as he passes.  Or, you could hide your guns and blend in with the crowd and shoot him as he cuts the ribbon and then escape in his limousine.  Or, you could take over the minds of his bodyguards and get them to kill him for you, then slip away unnoticed.

<img src="http://maryrosecook.com/images/myth.jpg" alt="" width="600" />

Though Myth II has very little story in the levels, the mise-en-scène is wonderful.  The landscapes are so barren.  They are like the muddy no man's land between the trenches in the First World War.  Their sparseness draws attention to the soldiers like a stage draws attention to the actors.  The environment dictates the story as in the theatre-like battle-fields of Flags of Our Fathers, or the cold Detroit in Narc that made the world into an inhospitable place that left the characters naked and aggressive and scared, a place where things happen that no one will see.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date>2010-03-06 02:31:55</wp:post_date>
		<wp:post_date_gmt>2010-03-06 01:31:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>syndicate-4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Getting thrown out of a lesbian bookshop</title>
		<link>http://maryrosecook.com/blog/post/getting-thrown-out-of-a-lesbian-bookshop-4</link>
		<pubDate>Thu, 04 Mar 2010 01:30:58 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/getting-thrown-out-of-a-lesbian-bookshop-4</guid>
		<description></description>
		<content:encoded><![CDATA[

  
  This evening, my colleague, Mike, and I left the Ableton office and got on the U-Bahn.  We battled through the cold, found the right street, then the right number, then followed someone into the right building.<br /><br />We came up the stairs and into the lesbian bookshop.  There was to be a showing of <a href="http://www.imdb.com/title/tt0324158/">Tan de repente</a>, an Argentinian film about two punk rock girls who take a saleswoman on a road trip and try and seduce her.<br /><br />We found a few women hanging around, one of them in debate with a bloke.  My German is not great, but it became clear that men are not allowed in the lesbian bookshop.  So, my colleague, the other guy and I left.<br /><br />I was once involved in organising a feminist health weekender that was for women and woman-identified trans people only.  I felt that the event suffered because of that policy: the perspectives and ideas of my male friends were missing.  Further, I don't see how such a policy can be anything other that bigoted: it's prejudice in the literal sense, pre judgement.<br /><br />The most frequently used justification for such a policy is based on creating safe spaces.  If you exclude those who a group feels could impinge on their freedom, you create a haven where people can act and think as they wish without fear of harm.<br /><br />However, I think this is mistaken.  Just as much harm can come from those within a community as from those without.  Therefore, no security is gained for the loss in freedom.<br /><br />It seems far more practical and inclusive to let the group decide what kind of behaviour is acceptable and then deal with any grievances if they arise.<br /><br />I once helped to run a queer party in a social centre.  The venue had three policies: everyone was equal, and there were to be no bigoted language and no violence.  The key was that these policies gave everyone a hint on how they should behave, but were so vague that problems could be dealt with on a case by case basis, without reference to rules.<br /><br />This meant that the queer party had no requirements of queerness.  However, when some drunk guys came in at four in the morning and one of them made a personal remark that my friend found offensive, it was perfectly OK to ask them to leave.<br /><br />There are a few cases where exclusion seems reasonable.  I read about another feminist gathering where the sexual abuse survivor workshop was for survivors of abuse only.  Counselling, and consultations with solicitors and doctors are protected by law.  The common element seems to be that these are purely about private matters.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>113</wp:post_id>
		<wp:post_date>2010-03-04 02:30:58</wp:post_date>
		<wp:post_date_gmt>2010-03-04 01:30:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-thrown-out-of-a-lesbian-bookshop-4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Writing an mp3 crawler in Clojure</title>
		<link>http://maryrosecook.com/blog/post/writing-an-mp3-crawler-in-clojure-4</link>
		<pubDate>Sat, 27 Feb 2010 01:29:01 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/writing-an-mp3-crawler-in-clojure-4</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I've written an mp3 crawler to help me learn Clojure.  It's 150 lines.  I'm sure could be much shorter.  There are some URL parsing bugs.</p>

<p>Like all my projects, the code I talk about in this article is open source.  <a href="http://github.com/maryrosecook/scrawl">Get it from GitHub</a>.</p>

<h3>The basic flow</h3>

<ol>
<li>Start with a URL, like saidthegramophone.com</li>
<li>Request the page and find all the URLs on it.</li>
<li>Save all the ones that point at mp3s.</li>
<li>Note down how many mp3s were yielded.</li>
<li>Throw away ones that definitely don't point at other HTML pages (images, Javascript).</li>
<li>Throw away ones that are at hosts that don't seem to yield many mp3s.</li>
<li>Add the rest to the list of URLs to crawl.</li>
<li>Go to step 2 with the next item on that list.</li>
</ol>

<h3>Interesting points</h3>

<h4>Agents</h4>

<p>URLs are requested by asynchronous agents in batches of twenty.  Thus, they can be crawled much more quickly.  <code>crawl-batch-of-urls</code> maps the twenty items in <code>urls-to-crawl</code> to the <code>request-url</code> function.  This function creates a new http-agent and tells it to download the (HTML) content at the url.  <code>crawl-batch-of-urls</code> then waits up to ten seconds for all the agents in the batch to finish, then passes them back.</p>

<script src="http://gist.github.com/316641.js?file=agents.clj"></script>

<h4>Host scores</h4>

<p>A record is kept of the mp3-richness of each host the crawler encounters.  Each mp3 found on a host scores it a point.  Each crawl of a URL on the host loses it a point. So, say <a href="http://www.saidthegramophone.com/archives/in_this_box_or_another.php">www.saidthegramophone.com/archives/in_this_box_or_another.php</a> was crawled and five mp3s were found, four points would be added to the score for <a href="http://www.saidthegramophone.com">www.saidthegramophone.com</a></p>

<p><code>update-host-scores</code> updates a hash of hosts and scores after a new URL is crawled:</p>
		
<script src="http://gist.github.com/316641.js?file=update-host-scores.clj"></script>

<p><code>gen-host-scores</code> - </p>

<script src="http://gist.github.com/316641.js?file=gen-host-scores.clj"></script>
		
<p>- is called twice at the beginning of the program's execution:</p>

<script src="http://gist.github.com/316641.js?file=gen-host-scores-exec.clj"></script>

<p>Each time through the main execution loop, the urls crawled and urls saved thus far are written to disk.  Thus, for the first call, an empty hash map is the starting point and each of the urls crawled costs its host one point.  The second time, the hash of scores calculated the first time is the starting point and each of the mp3s found scores its host one point.</p>

<h4>Being encouraged to think better</h4>

<p>Through its immutable data structures and passable functions, Clojure is always pushing me to re-use code and employ recursion.  I felt very cool when I was able to write the following function that accepts a function to filter a sequence:</p>

<script src="http://gist.github.com/316641.js?file=remove-dupes-and-unwanted.clj"></script>

<h4>The main loop</h4>

<p>Scrawl, the function that runs the show.  If the list of passed url-crawl-agents is empty, a new batch is created and <code>scrawl</code> is called again.  If the next agent on the list failed to complete its data request, it is thrown away and <code>scrawl</code> is called again.  Otherwise, the function calculates all the required data and calls itself.</p>

<script src="http://gist.github.com/316641.js?file=scrawl.clj"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>114</wp:post_id>
		<wp:post_date>2010-02-27 02:29:01</wp:post_date>
		<wp:post_date_gmt>2010-02-27 01:29:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>writing-an-mp3-crawler-in-clojure-4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fare-dodging on the Berlin U-Bahn</title>
		<link>http://maryrosecook.com/blog/post/fare-dodging-on-the-berlin-u-bahn-4</link>
		<pubDate>Fri, 19 Feb 2010 01:28:04 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/fare-dodging-on-the-berlin-u-bahn-4</guid>
		<description></description>
		<content:encoded><![CDATA[
  
  I've had my ticket checked by an inspector on the Berlin U-Bahn 4 times in 36 days.  I've done maybe 90 (36 x 2.5) journeys in that time.  The penalty for travelling without a ticket is €40 and a shouting-at.  Using the estimate for the number of journeys I've made, I've spent €190 on travel.  Therefore, provided I could stand up to the shouting, it would have been better to eat the fines.<br /><br />There are certainly patterns to the ticket inspectors' movements.  They are probably most frequently seen during rush hours, and second-most frequently during office hours.  They are either assigned "beats", or they choose their own.  Either allows prediction of their movements.<br /><br />My first thought was to make a site that let people log ticket inspector sightings: line, time, station.  That way, you could figure out the low risk routes and the low risk times.  However, if such a data source was public, the BVG [the organisation that runs the public transport in Berlin] could easily change their habits to catch people out.<br /><br />My second thought was to make a website that let people share their inspector sightings with a trusted group of friends.  That way, if one group were compromised by the BVG, they would not compromise the data of the other groups.<br /><br />The difficulty with this approach is that it's not viable for people who can't afford the fine.  In <a href="http://www.crimethinc.com/texts/rollingthunder/insurrection.php">this wonderful article about insurrection</a>, I read about a fare dodgers' union in Stockholm.  The dues are 100 kronor a month, as opposed to 500 kronor for a monthly ticket, and, if you get caught, the union pays the fine.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>115</wp:post_id>
		<wp:post_date>2010-02-19 02:28:04</wp:post_date>
		<wp:post_date_gmt>2010-02-19 01:28:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fare-dodging-on-the-berlin-u-bahn-4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bands are better live</title>
		<link>http://maryrosecook.com/blog/post/bands-are-better-live-3</link>
		<pubDate>Sun, 07 Feb 2010 01:26:13 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/bands-are-better-live-3</guid>
		<description></description>
		<content:encoded><![CDATA[

  
  I go to gigs/concerts/shows a lot.  Gigs are just better than records.<br /><br />There is the sound of the audience booing or chatting or whooping or heckling or clapping.  Listen to the effect that the audience had on Bob Dylan at his <a href="http://en.wikipedia.org/wiki/The_Bootleg_Series_Vol._4:_Bob_Dylan_Live_1966,_The_%22Royal_Albert_Hall%22_Concert">"Royal Albert Hall" gig</a> in 1966.<br /><br />You can see the musicians making their music in front of you: how that ringing guitar sound is produced, or how he pulls of that riff, or how the drum player and the bass player have to make eye contact before the time signature change.  I saw Battles play at All Tomorrow's Parties last year and saw that Ian Williams does actually play the keyboard and guitar simultaneously.<br /><br />The musicians play with more conviction because they are performing and they are having an effect not just on the air but on the people in front of them, and the low lights and emotional atmosphere give them license to scream the scream they felt when they first wrote the song.<br /><br />The songs are different versions from those played on the record six months before because they can be adjusted in response to a changing idea of what sounds good, or at the discovery of a richer melody or simpler arrangement.  The album version of Sunset Rubdown's Us Ones In Between has the piano marking out the melody and the rhythm.  However, <a href="http://www.youtube.com/watch?v=Tv-_4xNEDck">this live version</a> has the piano nowhere and the song completely driven by a guitar string being alternately tightened and loosened.<br /><br />Perhaps most tellingly, if a band has a live album, it is usually my favourite.  Here are some examples on <a href="http://live.playmary.com">a special Playmary I made</a>.<br /><br />Audio recordings capture a good portion of the musical advantages of live gigs.  YouTube is great for gig videos, but the experience is too diffused by video-hopping and varying sound quality and the ten minute limit: songs are good, albums are great.<br /><br />I'm not quite sure where this is leading.<br /><br />Famous bands are well documented and, just as importantly, well distributed.  It is easy to buy a Bruce Springsteen or Bob Dylan live album.  What if every gig was recorded and then put up on the 'net? A lead going from the sound desk into a cassette recorder and, later, a
lead from the cassette recorder to a computer would be enough.  A quick upload to a website and it would be available to everyone.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>118</wp:post_id>
		<wp:post_date>2010-02-07 02:26:13</wp:post_date>
		<wp:post_date_gmt>2010-02-07 01:26:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bands-are-better-live-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  Addiction is... </title>
		<link>http://maryrosecook.com/blog/post/addiction-is-2</link>
		<pubDate>Sun, 07 Feb 2010 01:25:17 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/addiction-is-2</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>119</wp:post_id>
		<wp:post_date>2010-02-07 02:25:17</wp:post_date>
		<wp:post_date_gmt>2010-02-07 01:25:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>addiction-is-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Custom additions to the Firefox dictionary from the last two weeks</title>
		<link>http://maryrosecook.com/blog/post/custom-additions-to-the-firefox-dictionary-from-the-last-two-weeks-3</link>
		<pubDate>Sun, 31 Jan 2010 01:24:23 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/custom-additions-to-the-firefox-dictionary-from-the-last-two-weeks-3</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  Bürgeramt, emphasise, limonade, afterwards, eco, maryrosecookmusic, Afterwards, perceptron, fantasised, vokü, Temazepam, houmous, deoxygenated, lasagne, Friedrichshain, paralyse, bassy, dreamt, Skype, unsynchronised, organise, theatre, crescendoed, mojitos, yoghurts, Kensington, centred, realised, skittery, Facebook, unconferences, strappy, incongruent, Kreuzkölln, dicksuck, Kreuzberg, Orangienstr, Pilsner, Serpico, texted, Playmary, miaow, spelt, ungirlfriend, Blonde, CDs, analysing, Doulton.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date>2010-01-31 02:24:23</wp:post_date>
		<wp:post_date_gmt>2010-01-31 01:24:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>custom-additions-to-the-firefox-dictionary-from-the-last-two-weeks-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Adding keyboard control to Playmary</title>
		<link>http://maryrosecook.com/blog/post/adding-keyboard-control-to-playmary-3</link>
		<pubDate>Tue, 05 Jan 2010 01:23:26 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/adding-keyboard-control-to-playmary-3</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  <a href="http://playmary.com">Playmary</a> is my audio autobiography site.  You create an account and upload songs that you are listening to a lot, or that symbolise what is going on in your life.<br /><br />Up until now, you would click on songs to play and pause them, and when one song ended, the next would play.<br /><br />I've added some new code that lets you move through the playlist with the left and right arrows, and pause and play the current song with the space bar:<br /><br />

<script src="http://gist.github.com/268961.js?file=gistfile1.js"></script>

Code adapted from the source in <a href="http://www.geekpedia.com/tutorial138_Get-key-press-event-using-JavaScript.html">this article</a>.<br /><br />

The only downer is the space bar is a shortcut for scrolling in Safari, Internet Explorer and Firefox.  <a href="http://iamdanw.com">Dan W</a> and I couldn't think of any conventions for play controls in the browser.  j/k/l seems too obscure, and I really want the controls to mimic iTunes.  Hmmm.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>122</wp:post_id>
		<wp:post_date>2010-01-05 02:23:26</wp:post_date>
		<wp:post_date_gmt>2010-01-05 01:23:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>adding-keyboard-control-to-playmary-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Capture The Flag London</title>
		<link>http://maryrosecook.com/blog/post/capture-the-flag-london-3</link>
		<pubDate>Sun, 29 Nov 2009 01:22:29 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/capture-the-flag-london-3</guid>
		<description></description>
		<content:encoded><![CDATA[

  
  Really great fun.  Forty people, two eighths of a square mile, two flags, two jails.  Steal the other team's flag and return it to your base.  If you are in the other team's territory and one of them touches you, you must go to their jail and stay there until a member of your team frees you.  Other than physical violence, pretty much anything goes.  Run, sneak, hide behind cars and in shadows, blend in with the public, climb fences and dive under bushes, set up diversions and coordinated attacks.  <a href="http://capturetheflaglondon.blogspot.com/">Find out more</a>.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>123</wp:post_id>
		<wp:post_date>2009-11-29 02:22:29</wp:post_date>
		<wp:post_date_gmt>2009-11-29 01:22:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>capture-the-flag-london-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Capitalism and distance</title>
		<link>http://maryrosecook.com/blog/post/capitalism-and-distance-2</link>
		<pubDate>Mon, 09 Nov 2009 01:21:32 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/capitalism-and-distance-2</guid>
		<description></description>
		<content:encoded><![CDATA[

  
  Capitalism is founded on distance.  I specialise to become more efficient and, thus, more productive.  The more I write code for a living, the better I get and the more quickly I turn time and raw materials into money.  Because money is the goal, everything is subordinate to efficiency.  Others' well-being, my enjoyment and my ethics are secondary concerns.  So, my specialisation both distances me from the world and from what makes me myself.<br /><br />Then, I use this money to get the other things I need. Money travels well, so I can use it to buy sneakers made by children I will never meet, wood from forests I will never see cut down and aluminium unibody enclosures made in mills I will never hear.  This remoteness means I don't sense, and so I am not affected.  I sense neither the suffering in the places from which I import, nor the joy I could get from growing my own horse chestnut tree.<br /><br />I push away my culpability with representative democracy.  I absolve myself of blame with the distance between my views and those of my representative, the distance between me and their actions.  This distance is essential for the homogenisation of laws essential for the homogenisation of the transfer of money essential for the specialisation of work essential for efficiency essential for productivity essential for distance.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>124</wp:post_id>
		<wp:post_date>2009-11-09 02:21:32</wp:post_date>
		<wp:post_date_gmt>2009-11-09 01:21:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>capitalism-and-distance-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Escalation</title>
		<link>http://maryrosecook.com/blog/post/escalation-2</link>
		<pubDate>Wed, 04 Nov 2009 01:20:34 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/escalation-2</guid>
		<description></description>
		<content:encoded><![CDATA[

  
  I'm playing Grand Theft Auto IV: The Ballad Of Gay Tony.  I start a mission where I need to sabotage some building works.  I get into the car that Tony has lent me, pull away from the kerb and thread my way through the traffic.  I drive through the streets as Tony chatters away.<br /><br />Then, some idiot changes lanes into my path and I can't avoid driving into him.  I reverse angrily and accidentally hit the car behind.  Irate drivers toot their horns.  I get out of the car, aim my gun at the lane-changer and shoot him through his windscreen.  He gets out and tries to run, so I shoot him a few more times and he falls and dies on the tarmac.<br /><br />I hear sirens and a police car comes into view.  I open fire on it with my automatic rifle as it comes to a halt.  I get one policeman as he jumps out and the other while as he takes cover behind the bonnet.  Two more police cars arrive, so I throw a grenade at one, get back in my car and fire at them as I drive away.<br /><br />There are now a police helicopter, a SWAT van and two police cars after me.  I drive at top speed down one of the main roads in Liberty City, running over pedestrians, crashing into lamp-posts and smashing my way through a road-block. At last, after expending six clips, one grenade, some blood and seven lives, I manage to lose the police, so I follow the sat-nav in my clanking, smoking car back to the first building site that needs to be sabotaged and carry on with my mission.<br /><br />The destruction is fun.  It's what Grand Theft Auto is about.  But I like the moments when you're in that strange mode where you're still playing by the rules of the real world.  When you can choose to ignore the driver who didn't check his mirror.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>125</wp:post_id>
		<wp:post_date>2009-11-04 02:20:34</wp:post_date>
		<wp:post_date_gmt>2009-11-04 01:20:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>escalation-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Barcamp London 7</title>
		<link>http://maryrosecook.com/blog/post/barcamp-london-7-2</link>
		<pubDate>Mon, 26 Oct 2009 01:19:40 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/barcamp-london-7-2</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://maryrosecook.com/images/IMG_1610.JPG" width="600" />

<br />I helped organise this Autumn's London Barcamp.   It was at the IBM building on the Southbank.  We provided food, drink, some rooms, a bit of floor to sleep on and a blanket. Then, each of the 200 people who came did a twenty-minute session on something they know about. We had nine sessions running every half an hour from 10 a.m. on Saturday to 5pm on Sunday and there were lots of interesting discussions in the corridors.<br /><br />I saw some ace talks about PubSubHubBub, the boardgame Go, custom fonts on the web, erotic writing, the design of the TV programme LOST, a Nintendo Entertainment System emulator in Javascript, the art of improvisation, live-coding a Scheme interpreter in Ruby, and the dinner game Werewolf.<br /><br />My session was on <a href="http://awesomebands.playmary.com/">10 Fucking Awesome Bands You Should Be Listening To</a>.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>127</wp:post_id>
		<wp:post_date>2009-10-26 02:19:40</wp:post_date>
		<wp:post_date_gmt>2009-10-26 01:19:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>barcamp-london-7-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Anti-capitalism</title>
		<link>http://maryrosecook.com/blog/post/anti-capitalism-2</link>
		<pubDate>Fri, 02 Oct 2009 01:18:46 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/anti-capitalism-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  Things should be run differently.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>129</wp:post_id>
		<wp:post_date>2009-10-02 02:18:46</wp:post_date>
		<wp:post_date_gmt>2009-10-02 01:18:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>anti-capitalism-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Queer</title>
		<link>http://maryrosecook.com/blog/post/queer-2</link>
		<pubDate>Fri, 02 Oct 2009 01:17:48 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/queer-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  A malleable gender and sexuality.  Living in a punk/DIY/anti-captialist environment.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date>2009-10-02 02:17:48</wp:post_date>
		<wp:post_date_gmt>2009-10-02 01:17:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>queer-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/131</link>
		<pubDate>Fri, 02 Oct 2009 01:16:51 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/131</guid>
		<description></description>
		<content:encoded><![CDATA[

  
  In preparation for December, I made a <a href="http://open.spotify.com/user/maryrosecook/playlist/4qjff3mpoqOrOGnpFmTeKN">Spotify playlist</a> for <a href="http://atpfestival.com/Events/TenYearsOfATP.php">Ten Years of All Tomorrow's Parties</a>.  It contains an album for each of the bands on the line-up.  The following bands were not available on Spotify, so you can check them out at their Myspaces.
<br /><br />
<a href="http://atpfestival.com/Events/TenYearsOfATP/LineUp/TheForCarnation.php">The For Carnation</a>,
<a href="http://atpfestival.com/Events/TenYearsOfATP/LineUp/PapaM.php">Papa M,</a>
<a href="http://atpfestival.com/Events/TenYearsOfATP/LineUp/FuckButtons.php">Fuck Buttons</a>,
<a href="http://atpfestival.com/Events/TenYearsOfATP/LineUp/SleepySun.php">Sleepy Sun</a>,
<a href="http://atpfestival.com/Events/TenYearsOfATP/LineUp/SunnO.php">Sunn o)))</a>,
<a href="http://atpfestival.com/Events/TenYearsOfATP/LineUp/AlexanderTuckerAndDecomposedOrchestra.php">Alexander Tucker &amp; Decomposed Orchestra</a>,
<a href="http://atpfestival.com/Events/TenYearsOfATP/LineUp/TheMagicBand.php">The Magic Band</a>,
<a href="http://atpfestival.com/Events/TenYearsOfATP/LineUp/porn.php">Porn</a>,
<a href="http://atpfestival.com/Events/TenYearsOfATP/LineUp/TallFirs.php">Tall Firs</a>,
<a href="http://atpfestival.com/Events/TenYearsOfATP/LineUp/Beak.php">BEAK&gt;,</a>
<a href="http://atpfestival.com/Events/TenYearsOfATP/LineUp/Polvo.php">Polvo</a>,
<a href="http://atpfestival.com/Events/TenYearsOfATP/LineUp/Youm.php">youm</a>.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>131</wp:post_id>
		<wp:post_date>2009-10-02 02:16:51</wp:post_date>
		<wp:post_date_gmt>2009-10-02 01:16:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>131</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Old projects</title>
		<link>http://maryrosecook.com/blog/post/old-projects-2</link>
		<pubDate>Fri, 02 Oct 2009 01:15:55 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/old-projects-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  These are some things I'm not working on, anymore, but that might still be cool.<br /><br />- <a href="http://kisses.heroku.com/">Kisses</a>: compare the magnitude of stuff<br />
- <a href="http://lollipopsandgumdrops.heroku.com/">Lollipops and Gumdrops</a>: music recommendations<br />
- <a href="http://eardefender.heroku.com/">Ear Defender</a>: decide what music to listen to<br />- <a href="http://switchoffthelightbeforeyouleave.com/">Switch off the light before you leave</a>
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>132</wp:post_id>
		<wp:post_date>2009-10-02 02:15:55</wp:post_date>
		<wp:post_date_gmt>2009-10-02 01:15:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>old-projects-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>  &quot;And after having burnt everything?&quot;: Black Blocks and the question of strategy </title>
		<link>http://maryrosecook.com/blog/post/and-after-having-burnt-everything-black-blocks-and-the-question-of-strategy</link>
		<pubDate>Tue, 22 Sep 2009 01:14:58 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/and-after-having-burnt-everything-black-blocks-and-the-question-of-strategy</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>133</wp:post_id>
		<wp:post_date>2009-09-22 02:14:58</wp:post_date>
		<wp:post_date_gmt>2009-09-22 01:14:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>and-after-having-burnt-everything-black-blocks-and-the-question-of-strategy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Slender</title>
		<link>http://maryrosecook.com/blog/post/slender-2</link>
		<pubDate>Sun, 20 Sep 2009 01:13:01 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/slender-2</guid>
		<description></description>
		<content:encoded><![CDATA[


  
  A <a href="http://slender.heroku.com">new app</a> I've been working on.  It's a wunderkammer, or a cabinet of curiosities, or a digital scrapbook.  You fill it with your favourite pictures, pieces of text, songs and film clips.  Or, you could make a Slender for a wedding couple, or a new baby, or your Mum, or your girlfriend, and give it to them as a lovely present.  I've made <a href="http://slender.heroku.com/thecommonplace">one</a> for The Common Place, a social centre I was involved in when I lived in Leeds.<br /><br />Actually, you can't sign up, yet.  Soon.
  


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>134</wp:post_id>
		<wp:post_date>2009-09-20 02:13:01</wp:post_date>
		<wp:post_date_gmt>2009-09-20 01:13:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>slender-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Des Ark</title>
		<link>http://maryrosecook.com/blog/post/143</link>
		<pubDate>Tue, 16 Mar 2010 23:05:31 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/143</guid>
		<description></description>
		<content:encoded><![CDATA[<object width="600" height="475"><param name="movie" value="http://www.youtube.com/v/JmYdix-XGmg&hl=en_US&fs=1&"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/JmYdix-XGmg&hl=en_US&fs=1&" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="600" height="475"></embed></object>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date>2010-03-17 02:05:31</wp:post_date>
		<wp:post_date_gmt>2010-03-16 23:05:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>143</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>

Say you want an insurrection
</title>
		<link>http://maryrosecook.com/blog/post/say-you-want-an-insurrection-2</link>
		<pubDate>Tue, 16 Mar 2010 23:04:07 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/say-you-want-an-insurrection-2</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date>2010-03-17 02:27:07</wp:post_date>
		<wp:post_date_gmt>2010-03-16 23:04:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>say-you-want-an-insurrection-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How I made Street Hoarding, a Node.js and Redis application, or, a super simple explanation of asynchronicity, event loops, non-blocking IO, JavaScript, Comet and Node</title>
		<link>http://maryrosecook.com/blog/post/how-i-made-street-hoarding-a-node-js-and-redis-application-or-a-super-simple-explanation-of-asynchronicity-event-loops-non-blocking-io-javascript-and-node</link>
		<pubDate>Mon, 19 Apr 2010 00:00:16 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/?p=296</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Second update:</strong> thanks to <a href='http://jcoglan.com'>James Coglan</a> again, I have modified the code.  Now, the client message requests are held open until there is a new message to return, thus reducing the load on the server.

<strong>Update:</strong> Thanks to <a href='http://jcoglan.com'>James Coglan</a> for providing some lovely technical corrections to this article.

Go to the <a href='http://streethoarding.heroku.com'>Street Hoarding</a> homepage and you will see a message in big letters.  If you wish, you can type another message in the text box at the bottom of the page, press return, and see it take the place of the old message.  Anyone else on the site at that moment will see your words within a few hundredths of a second.  It's kind of like a community pin-up board, or some hoarding on a building site, or a promiscuous IM client with a very short memory.

Some of the key parts of the <a href='http://github.com/maryrosecook/streethoarding'>code</a> were taken from Ryan Dahl's demo <a href="http://chat.nodejs.org/">chat app</a> for Node.js.

My aim with this article is to explain how everything works to someone who is like I was before I wrote Street Hoarding: hazy about asynchronicity, event loops, non-blocking IO, JavaScript and <a href='http://nodejs.org'>Node.js</a>.

There are two elements: the client and the server.

<h3>The client</h3>

This is an HTML page that lays out the main message and the text box.  It is also the JavaScript that runs on the user's browser.  The JavaScript has two key functions.

<script src="http://gist.github.com/336937.js?file=longPoll.js"></script>

<code>longPoll()</code> runs the whole time the user has the webpage open.  It takes some data.  If this data is null, it is ignored.  If it is not null and has a message component, that message is displayed on the webpage through a jQuery update to the message div.  Either way, an XMLHttpRequest request is then made with jQuery to the <code>/latest_message</code> url on the server.  This request takes some time, but it is asynchronous.  That is very important.  When <code>longPoll()</code> is run, the data is processed, the URL request is made and, then, the execution of <code>longPoll()</code> continues past the <code>$.ajax()</code> call, and control is passed back to the computer processor so it can carry on doing other work.  When a success response comes back, the success function inside the <code>$.ajax()</code> function is run.  This pauses for a moment, then calls <code>longPoll()</code> again, passing it the data that the server responded with.  Next time through, the message inside this data will be written to the HTML page and the user will see it.

<script src="http://gist.github.com/336937.js?file=tryToSendMessage.js"></script>

<code>tryToSendMessage()</code> is called when the user submits a new message via the text field on the HTML page.  It first sends an (asynchronous, as always) request to the server to ask it whether the message the user entered has ever been said before.  If it has, it just tells the user they aren't being original and finishes.  Otherwise, it sends an (asynchronous) request to the <code>/send_message</code> URL, passing the user's message as a parameter, thus telling the server to save the message.

There are some improvements that could be made to this code.  First, when the message is sent to the server, it does not get updated in the user's browser immediately.  That will have to wait until the <code>longPoll()</code> function gets its next response from the server.  Second, the user has no idea whether the <code>/send_message</code> request was successful until <code>longPoll()</code> updates the webpage.  Third, the message is actually sent twice.  The uniqueness check request and send message request could have been combined into a single <code>/send_message</code> request that had the server respond with either an indication of success or a message saying that the message was not unique.

I keep on saying the word asynchronous.  Everyone who talks about Node.js goes on about asynchronous execution and this other thing, non-blocking input and output (IO).  What is crazy is that we haven't even got to the Node.js stuff, yet.  This is all browser magic that we've had for the last whatever years.

So, let's go back a bit.

When a request goes from the client to the server - either asking for the latest message or sending a new message - the computer processor doesn't hang around waiting for a response.  Instead, it moves on and deals with other tasks.  The processor returns its attention to the request when the response comes in.  Thus, the input and output are non-blocking.  Which is to say, waiting for data to arrive or be sent does not hold the processor up from its other tasks.  From this, we get asynchronicity - lines of code can get executed out of order.  If there is a pause whilst a function waits for something to happen and that something does not require the computer's processor, other work can be done in the meantime.

How does this work?

There is this thing called an event loop and every browser has one.  This is a function that just goes around and around, taking note of things that happen like a woman alone in a house at night straining to hear every floorboard creak and passerby's creep.  Code, like jQuery, that is running is the browser, can register its interest in different types of event.  So, when the <code>$.ajax()</code> jQuery function is called in <code>longPoll()</code>, it sends out the request and then tells the event loop it would be very interested in hearing about any HTTP responses that come back from the server.  The event loop eventually gets the response and passes it to jQuery which looks at the response to see if the request was a success, and then runs one of the two functions that we defined in <code>longPoll()</code>.

This is where JavaScript plays its part.  JavaScript has - and you may have heard this term before - first class functions. These confer several abilities, but the one we care about is that functions can be passed as arguments.  In <code>longPoll()</code>, functions are passed as the fifth and sixth properties of the <code>$.ajax()</code> call.  The first is to be run in the case of a response that indicates an error, the second in the case of a successful response.

Now, back to the request from our client code.  Using a browser means we are in an event loop.  Making an HTTP request means we have time when the processor is not being used.  Using jQuery means that control is handed back to the browser after a request is sent.  The browser regaining control means we have non-blocking IO.  Non-blocking IO means that the event loop continues to run whilst it awaits a response.  The event loop continuing to run means that other tasks can be dealt with in the mean time.

That deals with the wonders of non-blocking IO and asynchronicity on the client.  If we already have all that stuff, I ask, Why is Node.js so special? and I answer, Because this is now easy to do on the server, too.

<h3>The server</h3>

<script src="http://gist.github.com/336937.js?file=latest_message.js"></script>

There is some crazy fucking shit going on in the first line.  It uses fu, an imported piece of JavaScript code that acts as a mini router.  When you pass a url and a function to <code>fu.get()</code>, you are saying: when the Node.js server gets a request that was sent to this URL, run this function.  

<h4>A digression on how the router works that explains some things about JavaScript and the Street Hoarding code but that it's not really necessary to read to get the main points of this article</h4>

<script src="http://gist.github.com/336937.js?file=fu.js"></script>

<code>fu.get()</code> takes a URL and a function and adds the function to a hash, keyed with the URL.  <code>fu.listen()</code> starts the server defined by the server variable and makes it listen to events coming to the passed host (probably localhost) on the passed port.  We've eaten our way around the jam filling, so it's time to get sticky fingers.

<code>createServer()</code>, a Node.js function, is called with an anonymous function that takes a request and response, and the resulting server object is assigned to the server variable.  That anonymous function gets the URL on the passed request object, <code>req</code>, and looks in <code>getMap</code> to find the corresponding function to run.  For example, in the latest message code defined above, the url is <code>/latest_message</code> and the function is the rest of the code snippet.

We now meet a second special feature of JavaScript: prototyping.  The passed response object, <code>res</code>, has two new methods added to it on the fly: <code>simpleText()</code> and <code>simpleJSON()</code>.  The methods themselves are not that interesting - they just create a string to return to the client as a response to its request - it is the fact that they are stuck on the <code>res</code> object without such as a by your leave that I just know is making your head explode.

Finally, the handler function in <code>getMap</code> that corresponded to the requested url is called with the request and the super-charged-with-new-functions response.

<h4>Latest message</h4>

<script src="http://gist.github.com/336937.js?file=latest_message.js"></script>

So, the function passed to <code>fu.get()</code> extracts the since parameter that the client sent with the request.  This indicates when the client last received a user message from the server.  If the server has received a message from a user since then, <code>sendLatestMessageToClient()</code> is called.  

<script src="http://gist.github.com/336937.js?file=sendLatestMessageToClient.js"></script>

<code>sendLatestMessageToClient()</code> creates a new Redis client.  It calls <code>redisClient.stream.addListener()</code> to connect the Redis client to the Redis server, passing a function as the second argument.  Note the asynchronicity.  The Redis library does not hang around waiting while the Redis client connects to the Redis server.  Instead, behind the scenes, it passes control back to the server event loop which, at some point in the future, gets an I've Finished My Work And My Name Is The Redis Client Connection Function event which then calls the function passed as the second argument.

This function calls <code>redisClient.lindex()</code> which retrieves the first item in the messages list in the database.  Three arguments are passed: the key of the messages list, a <code>0</code> to indicate the first item in the list, and yet another callback function.  <code>redisClient.lindex()</code> retrieves the first message (did you notice the auxiliary bout of asynchronicity?), and the callback is run which closes the Redis client and runs the <code>simpleJSON()</code> function to send the message back to the client.  (Those of us who read the digression are like fully in a special secret club what knows how totally mind-fucking it is that the <code>res</code> object has a <code>simpleJSON()</code> function hanging around on it; those who did not read the digression will keep their heads fuck-free.)

<h4>New message</h4>

<script src="http://gist.github.com/336937.js?file=send_message.js"></script>

The function passed to <code>fu.get()</code> extracts the message from the request and calls <code>storeMessage()</code>, passing the message and yet another function to call back later.

<script src="http://gist.github.com/336937.js?file=storeMessage.js"></script>

<code>storeMessage()</code> goes through the familiar routine of creating a Redis client, requesting a connection to the Redis server, calling a Redis function (<code>redisClient.lpush</code>, this time), closing the Redis client and calling back the function passed as the second argument which:

Wait, stop a second.  Do you remember how I rather trailed off five paragraphs ago when I wrote, "If the server has received a message from a user since then, <code>sendLatestMessageToClient()</code> is called"?  By which I mean, I didn't say what happened if the server had not received a new message since the last message was sent to the user.  Let's have a look.

<script src="http://gist.github.com/336937.js?file=latest_message.js"></script>

Right.  Latest message requests that would normally be answered with the message that the client is already displaying are held open.  I know that was a long sentence, and this is a long article, and you are tired, but I hope that those last two words didn't slip by you.  Held open.  A response is not sent immediately.  Instead, a new item is pushed onto the <code>messageRequests</code> array: a hash of the <code>res</code> object and the <code>sendLatestMessageToClient()</code> function.

<script src="http://gist.github.com/336937.js?file=send_message.js"></script>

So, back to the <code>/send_message</code> code to see how it deals with the held message requests.  The code extracts the user's message, stores it and sends a success response back to the client.  For each message request that has been pushed onto <code>messageRequests</code>, <code>sendLatestMessageToClient()</code> is called.  This sends the latest message (probably the one received a few lines ago) back to the client, thus ending the request.  This is Comet: the client sends a request and no response is sent until there is something useful to send, thus the request is held open.

Ryan Dahl did two really cool things.  First, he wrote a library that lets you code an event-driven server in JavaScript.  However, this was not new.  Second, and more importantly, he wrote the core libraries so that they are non-blocking.  The problem with other event-driven programming libraries is that you can't be sure whether the auxiliary libraries you want to use are non-blocking.  If they are, you will stall your event loop and it will stop dealing with incoming events and everything will fall apart.

So, from the re-written libraries, we get non-blocking IO, which allows an event loop.  The event loop allows the server to run in a single process.  A single process means low memory usage.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>296</wp:post_id>
		<wp:post_date>2010-04-19 01:00:16</wp:post_date>
		<wp:post_date_gmt>2010-04-19 00:00:16</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-i-made-street-hoarding-a-node-js-and-redis-application-or-a-super-simple-explanation-of-asynchronicity-event-loops-non-blocking-io-javascript-and-node</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fourth EP</title>
		<link>http://maryrosecook.com/blog/post/fourth-ep</link>
		<pubDate>Wed, 07 Apr 2010 14:34:41 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/?p=301</guid>
		<description></description>
		<content:encoded><![CDATA[I finished the new <a href='http://maryrosecookmusic.com'>mary rose cook music</a> record months ago, but, since moving to Berlin, I haven't got around to photocopying the inlays and burning the CDs and doing the stapling.  Soon.

<img src='http://maryrosecook.com/images/youdiedon12thmay2009.png' width='600'/>

I wrote the note in the photograph and pinned it to my bedroom wall when I came back to London, two months after <a href='http://www.maryrosecook.com/post/when-i-died-2'>having a cardiac arrest</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>301</wp:post_id>
		<wp:post_date>2010-04-07 15:34:41</wp:post_date>
		<wp:post_date_gmt>2010-04-07 14:34:41</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fourth-ep</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Freeing disk space on your Linux server</title>
		<link>http://maryrosecook.com/blog/post/freeing-disk-space-on-your-linux-server</link>
		<pubDate>Fri, 09 Apr 2010 13:54:30 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/?p=303</guid>
		<description></description>
		<content:encoded><![CDATA[The websites that I host on <a href='http://slicehost.com'>Slicehost</a>, <a href='http://playmary.com'>Playmary</a> and <a href='http://streethoarding.com'>Street Hoarding</a>, keep crashing because my slice keeps running out of disk space.

To find out where disk space is being used:

1. Get to the root of your machine by running <code>cd /</code>
2. Run <code>sudo du -h --max-depth=1</code>
3. Note which directories are using a lot of disk space.
4. <code>cd</code> into one of the big directories.
5. Run <code>ls -l</code> to see which files are using a lot of space. Delete any you don't need.
6. Repeat steps 2 to 5.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>303</wp:post_id>
		<wp:post_date>2010-04-09 14:54:30</wp:post_date>
		<wp:post_date_gmt>2010-04-09 13:54:30</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>freeing-disk-space-on-your-linux-server</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>&quot;Maybe pretend that you&#039;re in the grocery store having to defend your queer body.&quot;</title>
		<link>http://maryrosecook.com/blog/post/304</link>
		<pubDate>Mon, 12 Apr 2010 21:51:19 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/304</guid>
		<description></description>
		<content:encoded><![CDATA[<object width="600" height="475"><param name="movie" value="http://www.youtube.com/v/RAzWydl7FzA&hl=en_US&fs=1&"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/RAzWydl7FzA&hl=en_US&fs=1&" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="600" height="475"></embed></object>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>304</wp:post_id>
		<wp:post_date>2010-04-12 22:51:19</wp:post_date>
		<wp:post_date_gmt>2010-04-12 21:51:19</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>304</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/306</link>
		<pubDate>Tue, 11 May 2010 11:00:25 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/306</guid>
		<description></description>
		<content:encoded><![CDATA[<a href='http://blog.xkcd.com/2010/05/06/sex-and-gender/'>A very fucking cool post</a> from Randall Munroe of <a href='http://xkcd.com'>xkcd</a> about the intersection between sex, gender and categorisation.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>306</wp:post_id>
		<wp:post_date>2010-05-11 12:00:25</wp:post_date>
		<wp:post_date_gmt>2010-05-11 11:00:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>306</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://maryrosecook.com/blog/post/307</link>
		<pubDate>Tue, 18 May 2010 13:32:04 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/post/307</guid>
		<description></description>
		<content:encoded><![CDATA[I've just read <a href='http://www.natterjackpress.co.uk/downloads/pamphlets/elephant-editions/insurrectional-project.pdf'>The Insurrectional Project</a> [PDF], a zine comprising discussions of different aspects of anarchism.  I disagreed with it as much as I agreed with it, but it has set off lots of little explosions in my head.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>307</wp:post_id>
		<wp:post_date>2010-05-18 14:32:04</wp:post_date>
		<wp:post_date_gmt>2010-05-18 13:32:04</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>307</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pistol Slut</title>
		<link>http://maryrosecook.com/blog/post/pistol-slut</link>
		<pubDate>Sat, 29 May 2010 08:36:25 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/?p=308</guid>
		<description></description>
		<content:encoded><![CDATA[<object width="600" height="680"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=12123249&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" /><embed src="http://vimeo.com/moogaloop.swf?clip_id=12123249&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="600" height="680"></embed></object>

A demo of the pre-alpha version of my JavaScript game, Pistol Slut.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>308</wp:post_id>
		<wp:post_date>2010-05-29 09:36:25</wp:post_date>
		<wp:post_date_gmt>2010-05-29 08:36:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pistol-slut</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pistol Slut: some details about her</title>
		<link>http://maryrosecook.com/blog/post/pistol-slut-how-she-works</link>
		<pubDate>Wed, 02 Jun 2010 10:25:18 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/?p=310</guid>
		<description></description>
		<content:encoded><![CDATA[<a href='http://pistolslut.com'>Pistol Slut</a> is a 2D side-scrolling shoot-em-up platformer that I am writing in JavaScript.  The game is displayed by a <a href='http://en.wikipedia.org/wiki/Canvas_element'>Canvas element</a>.  It works in <A href='http://google.com/chrome'>Google Chrome</a>, <a href='http://apple.com/safari'>Safari</a> and <a href='http://getfirefox.com'>Firefox</a> in theory, but not Internet Explorer.

<h3>Demo</h3>

The most recent vaguely stable version will always be available at <a href='http://pistolslut.com'>pistolslut.com</a>.

<h3>Framework</h3>

I use <a href='http://renderengine.com'>The Render Engine</a> by Brett Fattori.  It's a fabulous framework that handles the basics of rendering graphics and sprites to the Canvas element, moving objects, collision detection, animation and level loading.

<h3>Code</h3>

The Pistol Slut <a href='http://github.com/maryrosecook/pistolslut'>code</a> is open source and available on GitHub.  It would be a good reference for anyone who wants to learn about advanced capabilities of The Render Engine that aren't covered in the demos that come with the framework: animated sprites, level object loading and enemies.

<h3>Features so far</h3>

A scrolling background, running, jumping, shooting, muzzle flash, bullet ricochets, enemies, snow, animated sprites, scrolling Orwellian signs.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>310</wp:post_id>
		<wp:post_date>2010-06-02 11:25:18</wp:post_date>
		<wp:post_date_gmt>2010-06-02 10:25:18</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pistol-slut-how-she-works</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pistol Slut second demo</title>
		<link>http://maryrosecook.com/blog/post/pistol-slut-second-demo</link>
		<pubDate>Sat, 07 Aug 2010 23:21:16 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/?p=311</guid>
		<description></description>
		<content:encoded><![CDATA[<object width="600" height="678"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=13966464&amp;server=vimeo.com&amp;show_title=0&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1&amp;autoplay=0&amp;loop=0" /><embed src="http://vimeo.com/moogaloop.swf?clip_id=13966464&amp;server=vimeo.com&amp;show_title=0&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1&amp;autoplay=0&amp;loop=0" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="600" height="678"></embed></object>

This is the second demo of Pistol Slut, the 2D, shoot-em-up platformer I'm writing in JavaScript.  You can play it at <a href='http://pistolslut.com'>pistolslut.com</a>.

The game now has a mortal enemy who can shoot, take cover and be suppressed by incoming fire.  So, Pistol Slut can keep the enemy pinned down as she advances, then unleash a hail of bullets for the kill.  Pistol Slut is now mortal and can crouch, throw grenades and, the faster she shoots, the wilder her shots go.  After expending her magazine, she must reload.

Pistol Slut has paid a visit to the Sluts With Guns free shop and got an M9, Mac-10 and SPAS shotgun.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>311</wp:post_id>
		<wp:post_date>2010-08-08 00:21:16</wp:post_date>
		<wp:post_date_gmt>2010-08-07 23:21:16</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pistol-slut-second-demo</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>You Died on 12th May 2009 </title>
		<link>http://maryrosecook.com/blog/post/you-died-on-12th-may-2009</link>
		<pubDate>Thu, 08 Jul 2010 13:02:43 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/?p=312</guid>
		<description></description>
		<content:encoded><![CDATA[I've released my solo band's new record on CD.  It has six songs and you can <a href='http://maryrosecookmusic.com'>listen to and download it here</a>.  Or, <a href='mailto:maryrosecook@maryrosecook.com'>email me</a> your address and I'll send you a CD in the post.

<img src='/images/youdiedon12thmay2009.png' width='600' />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>312</wp:post_id>
		<wp:post_date>2010-07-08 14:02:43</wp:post_date>
		<wp:post_date_gmt>2010-07-08 13:02:43</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>you-died-on-12th-may-2009</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>It&#039;s Flashbeagle, Charlie Brown</title>
		<link>http://maryrosecook.com/blog/post/its-flashbeagle-charlie-brown</link>
		<pubDate>Sat, 07 Aug 2010 08:02:47 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/?p=313</guid>
		<description></description>
		<content:encoded><![CDATA[I used to watch this when I was a child.  I think my God mother gave it to me on video.  The <a href=''http://www.imdb.com/title/tt0123122/>programme</a> comprises four songs performed by characters from Peanuts.  A few years ago, my friend, Dave, and I discovered a mutual appreciation.  He even has a copy on DVD.  We recorded <a href='http://maryrosecook.playmary.com/track/grrlmageddon_lucysays'>a cover of Lucy Says</a> in the last afternoon before I moved from Leeds to London.

<object width="600" height="475"><param name="movie" value="http://www.youtube.com/v/B-hjGfG_GFY&amp;hl=en_US&amp;fs=1"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/B-hjGfG_GFY&amp;hl=en_US&amp;fs=1" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="600" height="475"></embed></object>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>313</wp:post_id>
		<wp:post_date>2010-08-07 09:02:47</wp:post_date>
		<wp:post_date_gmt>2010-08-07 08:02:47</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>its-flashbeagle-charlie-brown</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hurray for the Riff Raff</title>
		<link>http://maryrosecook.com/blog/post/hurray-for-the-riff-raff</link>
		<pubDate>Sun, 11 Jul 2010 19:04:05 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/?p=314</guid>
		<description></description>
		<content:encoded><![CDATA[<object width="600" height="475"><param name="movie" value="http://www.youtube.com/v/SEMGe9JkRqU&amp;hl=en_US&amp;fs=1"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/SEMGe9JkRqU&amp;hl=en_US&amp;fs=1" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="600" height="475"></embed></object>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>314</wp:post_id>
		<wp:post_date>2010-07-11 20:04:05</wp:post_date>
		<wp:post_date_gmt>2010-07-11 19:04:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hurray-for-the-riff-raff</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Experimanntag</title>
		<link>http://maryrosecook.com/blog/post/experimanntag</link>
		<pubDate>Thu, 15 Jul 2010 11:14:33 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/?p=315</guid>
		<description></description>
		<content:encoded><![CDATA[Last Monday, I did the first Experimanntag for my colleagues at <a href='http://ableton.com'>Ableton</a>.  I showed a film by <a href='http://www.imdb.com/name/nm0000520/'>Michael Mann</a> and then we went to <a href='http://www.myspace.com/experimontag'>Experimontag</a>, an experimental music club in Berlin.  Next week: The Insider.

<img src='/images/experimanntag1.gif' />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>315</wp:post_id>
		<wp:post_date>2010-07-15 12:14:33</wp:post_date>
		<wp:post_date_gmt>2010-07-15 11:14:33</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>experimanntag</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pistol Slut third demo</title>
		<link>http://maryrosecook.com/blog/post/pistol-slut-third-demo</link>
		<pubDate>Mon, 18 Oct 2010 14:56:26 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/?p=321</guid>
		<description></description>
		<content:encoded><![CDATA[<iframe src="http://player.vimeo.com/video/15932991?title=0&amp;byline=0&amp;portrait=0" width="600" height="368" frameborder="0"></iframe>

It's starting to turn into a game.  Last night, as I played through the level, I felt a first jolt of fun.  I've made the frame much wider to allow the pitched battles that I think are going to be the core of the game.  I've added mortars, floating Chinese lanterns and four planes of parallax scrolling.  I added and then removed cycling of the colour of the sky from dark to light to dark.  The police don't accidentally shoot each other any more, and they throw grenades.

It is so fun to work on a game.  It's a completely different type of programming from making a website.  There are far more interactions between different elements.  It is a machine with parts working in concert, whereas a website is a landscape with disparate lanes leading away from each other.  <a href='http://www.tomkleinpeter.com/'>Tom Klein Peter</a> said <a href='http://www.tomkleinpeter.com/2008/03/13/users-with-a-tattoo-of-your-logo-check/'>this</a> of building Audiogalaxy:

<blockquote>In fact, almost everything about the scale of the software fascinated me. I found that a system with hundreds of thousands of clients and thousands of events per seconds behaved like a physical machine built out of springs and weights. If one server process stalled for a moment, effects could ripple throughout the cluster. Sometimes, it seemed like there were physical oscillations – huge bursts of traffic would cause everything to slow down and back off, and then things would recover enough to trigger another burst of load. I had never even imagined that these sorts of problems existed in the software world and I found myself wishing I had taken control theory more seriously in college.</blockquote>

I am constantly generalising code so it can be shared: the code that moves objects around, the code for operating a weapon, the code for firing different types of ordinance, the code for different types of particle and particle effects.  And I am constantly fighting to improve performance.  Usually, when I add something new, the game becomes laggy.  I then work on optimisation for a while until I get performance reasonable again.  Sometimes, the optimisations involve re-writing the code to make it more efficient - for example, I rewrote the code that triggers events in the level to make the checks for trigger trips far quicker - this requires being clever.  Other times, the optimisations come from finding something that is computationally expensive and removing it - for example, I chopped up the graphic for the front-most parallax level into smaller parts to stop the engine wasting time drawing the great tracts of empty space - this requires sacrificing code elegance.  ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>321</wp:post_id>
		<wp:post_date>2010-10-18 15:56:26</wp:post_date>
		<wp:post_date_gmt>2010-10-18 14:56:26</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pistol-slut-third-demo</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>I wrote a quiz for my family. This is the film round. Name the actors pictured and the title.</title>
		<link>http://maryrosecook.com/blog/post/i-wrote-a-quiz-for-my-family-this-is-the-film-round-name-the-title-and-the-actors-pictured</link>
		<pubDate>Thu, 23 Dec 2010 22:31:20 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/?p=322</guid>
		<description></description>
		<content:encoded><![CDATA[<img src='/images/casablanca9.jpg' width="600" />

<img src='/images/presmen.png' width="600" />

<img src='/images/BDDefinition-Goodfellas-b-1080.jpg' width="600" />

<img src='/images/serpico.jpg' width="600" />

<img src='/images/chattanooga_200804A07_07.640x360.jpg' width="600" />

<img src='/images/NosferatuShadow.jpg' width="600" />

<img src='/images/heat-01.jpg' width="600" />

<img src='/images/dog-day-afternoon.jpg' width="600" />

<img src='/images/NM2.jpg' width="600" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>322</wp:post_id>
		<wp:post_date>2010-12-23 23:31:20</wp:post_date>
		<wp:post_date_gmt>2010-12-23 22:31:20</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>i-wrote-a-quiz-for-my-family-this-is-the-film-round-name-the-title-and-the-actors-pictured</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2D collision detection in Pistol Slut</title>
		<link>http://maryrosecook.com/blog/post/how-to-do-2d-collision-detection</link>
		<pubDate>Wed, 19 Jan 2011 12:39:45 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/?p=324</guid>
		<description></description>
		<content:encoded><![CDATA[For the last six months, I've been writing <a href='http://pistolslut.com'>Pistol Slut</a>, a 2D shoot-em-up in JavaScript.  In this article, I'll talk about how I solved some of the nastier problems with detecting collisions between 2D objects, specifically: bullets, grenades, exploding barrels, buildings and people.

You might find it helpful to <a href='http://pistolslut.com'>play Pistol Slut</a> before you read on, so you have a context for the things I talk about.

I will not be talking about per-pixel collision detection.  And I will only be talking about objects whose shapes can be roughly approximated to a rectangle.

Most of the examples in this article will be conducted in pseudo-code.  If you want to see the code I actually used, go and look at the <a href='http://github.com/maryrosecook/pistolslut'>repository for Pistol Slut</a>.  Both it, and the framework it is based on, <a href='http://renderengine.com'>The Render Engine</a>, are open source under the MIT license.  This means you can take the code and use it in any project, commercial or non-commercial, open source or not.  

This article will begin with the general approach to collision detection.  It will then go into special cases that solve some of the trickier problems.

<h3>Grids</h3>

Imagine the whole game world split up by a grid.  If two objects are in the same square of the grid, we assume they are colliding, like these two red squares.

<img src='/images/grid2.gif' width="600" />

Whereas, these two red squares are not colliding:

<img src='/images/grid3.gif' width="600" />

So, to detect whether a particular object is colliding with another one in our simple little world, we can use this code:

<script src="https://gist.github.com/780505.js?file=nonoverlappinggrid.ps"></script>

What if the world looks like this?

<img src='/images/grid4.gif' width="600" />

Uh-oh.

An object might exist in more than one grid square.  How about we get the coordinates of all four corners of each object and add the object to the grid square containers into which the coordinates of those corners fall? No, that's not going to fly, either, because the world might look like this:

<img src='/images/grid5.gif' width="600" />

There are two solutions.  Solution one, use bounding boxes, the subject of the next section.  But we don't really want to do that, because the grid is supposed to be a super-quick triage that dramatically cuts down the number of collisions we have to test further.  Solution two, assume that an object will never be bigger than a grid square and, therefore, we can just add it to the grid square container into which its top left corner falls, and the containers of the eight surrounding squares.  To make this happen, we can modify the second block in the previous code, giving us:

<script src="https://gist.github.com/780505.js?file=overlappinggrid.ps"></script>

One last thing: what happens if an object moves? It might have moved to a new grid square.  It's no big deal:

<script src="https://gist.github.com/780505.js?file=gridupdate.ps"></script>

<h3>Bounding boxes</h3>

We can now get a list of all the objects that a particular object is colliding with.  But that's kind of lies, isn't it? Though the two red squares in the first diagram are occupying the same grid square, they aren't actually colliding.  Grid square co-habitation is only the first step.  The next is to find out whether an object is actually overlapping another object, like these two love-birds:

<img src='/images/grid6.gif' width="600" />

We do this with bounding boxes.  A bounding box is a square that is as tight a fit as possible around the actual boundaries of an object.  A bounding box is defined by the x and y coordinates of its top left corner and the x and y coordinates of its bottom right corner.  If two objects' bounding boxes overlap, those two objects are colliding.  To calculate if two bounding boxes overlap, we run four tests that would confirm the boxes *don't* overlap.  If all four tests come back false, the boxes are overlapping:

<script src="https://gist.github.com/780505.js?file=boundingboxoverlap.ps"></script>

To get all the objects that a particular object is colliding with:

<script src="https://gist.github.com/780505.js?file=boundingboxusage.ps"></script>

<h3>Putting it all together</h3>

<script src="https://gist.github.com/780505.js?file=alltogether.ps"></script>

The object's reaction may depend on what type of object it has collided with.  Its decision about whether it wants to hear about more objects in its grid square in this tick might depend on whether its reaction involved it being destroyed.  If it is destroyed, it will probably remove itself permanently from the pool of objects in the grid.

<h3>Special cases</h3>

This is the tougher stuff.  I'll talk about how to deal with fast-moving objects, objects that can stand on top of others, objects that can push others and objects that bounce.

The root cause of most of the difficulties is the fact that objects can move several pixels per tick.  Thus, you do not always hear about collisions until after one object is well inside another.  Thus, it's sometimes hard to tell at what coordinates the impact occurred.  I'll take some objects from Pistol Slut, explain the difficulties with each object, and the solutions.

<h4>Bullets</h4>

Problem one: in a tick, bullets can pass right through objects they should be colliding with.  Solution: make sure they can't ever move at a pixel speed higher than your narrowest object.  You could do this by taking care to build objects that aren't too narrow, or put a speed limit on bullets that is based on the width of your narrowest object.

Problem two: it's hard to tell at what coordinates a bullet entered a dustbin, which makes it difficult to show the point of impact with a shower of sparks.  Solution: extrapolate back through time.  I have no idea what this technique is really called.

Here is a red dustbin with a red bullet being shot at it.  It passes through positions A, B and C in that order.

<img src='/images/matrix.gif' width="600" />

Unfortunately, ticks only occur when the bullet is at positions A and C.  Therefore, with the system outlined above, the bullet won't know about a collision until it reaches position C.  That will be fine for destroying the bullet to represent the fact that it has hit the dustbin, but it won't be so great for doing the beautiful shower of sparks.  If we drew those sparks at point C, the location of the bullet when we detected the collision, they would look like this:

<img src='/images/matrixwrongsparks.gif' width="600" />

Lame.

We need to find position B.  That way, the sparks will originate from the point of impact.  As a bonus, I will show you how to make the sparks go in the right direction.

For the first part, draw an imaginary green line between position C and position A.  That is, a line between where the bullet is now and where the bullet was in the previous tick.  Then, draw four more imaginary purple lines, one along each side of the bounding box of the dustbin.

<img src='/images/matrixlines.gif' width="600" />

The move is to find out which bounding box line the C to A line intersects, and where.  Here are two JavaScript functions; the first tells you if a line between p1 and p2 and a line between p3 and p4 are intersecting and the second tells you where.

<script src="https://gist.github.com/780505.js?file=lineline.js"></script>

So, with the power of maths in our hands, we can now figure out where position B is:

<script src="https://gist.github.com/780505.js?file=pointb.ps"></script>

And, thus, emit the shower of sparks from that point.

But in which rough direction should the sparks go? Ack.  Start crying: here comes some more maths.

<script src="https://gist.github.com/780505.js?file=reverseangle.js"></script>

<code>reverseAngle()</code> is the key function, here.  It gets the normal to the side of the dustbin that the bullet hit.  That is, it gets the outward-facing line that is perpendicular.  It gets the angle between the normal and the bullet's vector and then spins that angle around to adjust it to the direction appropriate for the side that was hit.  The result is the angle the sparks should go along.

<h4>Grenades</h4>

Problem one: grenades bounce.  Solution: use the code from the Bullets section to get the point of impact of the grenade and then reflect the angle of impact and send the grenade off in this new direction.  And maybe reduce the grenade's velocity a little to account for friction and the fact that grenades aren't exactly like super balls when it comes to bouncing.  Easy.

Problem two: solution one was a bit of a lie.  The reflect direction stuff we used for bullets will still work great with grenades, but the stuff with using the grenade's current and previous positions to get its trajectory and, thus, where it hit the dustbin, can be problematic.  It'll work most of the time, but not all.  I'll explain why.

When we drew the imaginary line between the current and previous positions of the bullet, we drew it between the top right hand corners of the two positions.  This is fine, because the bullet actually IS only a single point.  It's drawn as a single pixel.  But grenades are bigger than that.  So, something like this might happen:

<img src='/images/grenadeproblem.gif' width="600" />

The first time we hear about a collision with the red dustbin will be when the red grenade is at position C.  However, though the lower right portion of the grenade is intersecting with the dustbin at position C, the line we draw between the top left corners of each position does not, and will never, intersect with the dustbin.  There is no position B.  Thus, we will not get a point of impact and, thus, we won't know where to bounce the grenade from.

<img src='/images/IMG_2630.jpg' width="600" />

But, fear not.  We can solve this problem.  We could draw lines between each corner of the previous and next positions: top left to top left, top right to top right, and so forth.  However, there is a more elegant, more general solution: sweeping.

This solution has two cases.  In the first case, at a particular tick, the red grenade is intersecting the side of the red dustbin:

<img src='/images/grenadeintersectingdustbin.gif' width="600" />

In this case, the code to get the angle to bounce the grenade is straightforward:

<script src="https://gist.github.com/780505.js?file=grenadeoverlappingdustbinside.ps"></script>

To determine whether a line intersects a box, make a rectangle of the line and then see if that rectangle overlaps the box rectangle.  To make a rectangle from a horizontal or vertical line between p1 and p2:

<script src="https://gist.github.com/784756.js?file=rectfromline.ps"></script>

In the second case, the red grenade is already fully inside the dustbin:

<img src='/images/grenadeinsidedustbin.gif' width="600" />

To deal with this, we use a technique called sweeping.  The idea is to move the grenade back along its trajectory in small increments, testing at each position to see if it is overlapping any of the sides of the dustbin.  Like this:

<img src='/images/sweeping.gif' width="600" />

The initial collision is detected when the grenade is at position A.  We then sweep its position back incrementally to positions B, C and D, testing to see if it collides with any of the edges of the red dustbin.  We finally get a hit at position E.

To handle both this case and the previous case, we can write this code:

<script src="https://gist.github.com/784756.js?file=sweeping.ps"></script>

<h4>People</h4>

What is special about people? They can bump into and stand on top of things.  To handle these scenarios, we can write this code:

<script src="https://gist.github.com/784756.js?file=girl.ps"></script>

And to figure out whether the girl is falling or rising or walking through the dustbin, we can write this code:

<script src="https://gist.github.com/784756.js?file=girlfunctions.ps"></script>

<h4>Exploding barrels</h4>

Exploding barrels are not so notable for their explodeyness as for the fact that they can be pushed.  Using the code we are already using for the girl, we can handle this:

<script src="https://gist.github.com/784756.js?file=barrel.ps"></script>

<h3>Artificial intelligence</h3>

That's it for the collision detection in Pistol Slut.  Well done.  My next article will be about artificial intelligence with state machines.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>324</wp:post_id>
		<wp:post_date>2011-01-19 13:39:45</wp:post_date>
		<wp:post_date_gmt>2011-01-19 12:39:45</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-do-2d-collision-detection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Prophet, a great film</title>
		<link>http://maryrosecook.com/blog/post/a-prophet-a-great-film</link>
		<pubDate>Fri, 28 Jan 2011 20:27:06 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/?p=327</guid>
		<description></description>
		<content:encoded><![CDATA[<img src='/images/aprophet.jpg' width="600" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>327</wp:post_id>
		<wp:post_date>2011-01-28 21:27:06</wp:post_date>
		<wp:post_date_gmt>2011-01-28 20:27:06</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-prophet-a-great-film</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Next gig</title>
		<link>http://maryrosecook.com/blog/post/next-gig</link>
		<pubDate>Mon, 10 Jan 2011 18:33:00 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/?p=329</guid>
		<description></description>
		<content:encoded><![CDATA[<img src='/images/15-01-11 Valentin Stubl-MRC.jpg' width="600" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>329</wp:post_id>
		<wp:post_date>2011-01-10 19:33:00</wp:post_date>
		<wp:post_date_gmt>2011-01-10 18:33:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>next-gig</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>I&#039;m giving a talk about Pistol Slut at the Berlin JavaScript group</title>
		<link>http://maryrosecook.com/blog/post/javascript-berlin</link>
		<pubDate>Wed, 16 Feb 2011 14:36:31 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/?p=330</guid>
		<description></description>
		<content:encoded><![CDATA[I'll be speaking about Pistol Slut at the Berlin JavaScript group at 7pm on 17th February 2011.  You can find out more on the <a href='http://lanyrd.com/2011/berlinjs-feb/'>Lanyrd event page</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>330</wp:post_id>
		<wp:post_date>2011-02-16 15:36:31</wp:post_date>
		<wp:post_date_gmt>2011-02-16 14:36:31</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript-berlin</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The slides from my talk on Pistol Slut</title>
		<link>http://maryrosecook.com/blog/post/pistol-slut-talk-slides</link>
		<pubDate>Sun, 20 Feb 2011 14:22:04 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/?p=331</guid>
		<description></description>
		<content:encoded><![CDATA[Update: I gave a newer version of this talk at JSConf US 2011.  <a href='/post/the-slides-from-my-talk-at-jsconf-us-2011-fakery-artificial-intelligence-collision-detection-and-falling-in-love-in-pistol-slut-a-2d-platform-shooter-in-javascript'>See the slides</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[hi]]></excerpt:encoded>
		<wp:post_id>331</wp:post_id>
		<wp:post_date>2011-02-20 15:22:04</wp:post_date>
		<wp:post_date_gmt>2011-02-20 14:22:04</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pistol-slut-talk-slides</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>10997</title>
		<link>http://maryrosecook.com/blog/post/10997</link>
		<pubDate>Mon, 18 Apr 2011 15:47:21 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://www.maryrosecook.com/?p=334</guid>
		<description></description>
		<content:encoded><![CDATA[I have finished my new record. It has four songs: Argentina, Somaliland, Barcelona and Nicaragua. I recorded it on my phone in the kitchen of my apartment in Berlin. You can <a href="http://maryrosecookmusic.com">listen to and download it here</a>.

<img src="/images/10997.jpg" alt="" width="600" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>334</wp:post_id>
		<wp:post_date>2011-04-18 16:47:21</wp:post_date>
		<wp:post_date_gmt>2011-04-18 15:47:21</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>10997</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JSConf US 2011</title>
		<link>http://maryrosecook.com/blog/post/jsconf-us-2011</link>
		<pubDate>Wed, 27 Apr 2011 15:13:21 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=335</guid>
		<description></description>
		<content:encoded><![CDATA[I'll be speaking at <a href='http://2011.jsconf.us'>JSConf</a> in Portland on 2nd May.  I'm very excited.  I will talk about Pistol Slut.  Specifically: fakery, artificial intelligence, collision detection and falling in love.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>335</wp:post_id>
		<wp:post_date>2011-04-27 16:13:21</wp:post_date>
		<wp:post_date_gmt>2011-04-27 15:13:21</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jsconf-us-2011</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The slides from my talk at JSConf US: Fakery, artificial intelligence, collision detection and falling in love in Pistol Slut, a 2D platform shooter in JavaScript</title>
		<link>http://maryrosecook.com/blog/post/the-slides-from-my-talk-at-jsconf-us-2011-fakery-artificial-intelligence-collision-detection-and-falling-in-love-in-pistol-slut-a-2d-platform-shooter-in-javascript</link>
		<pubDate>Tue, 03 May 2011 18:46:16 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=337</guid>
		<description></description>
		<content:encoded><![CDATA[<img src='/images/pistolslutjsconfus2011.001.jpg' width="600" height="450" />
<img src='/images/pistolslutjsconfus2011.002.jpg' width="600" height="450" /><hr/>
<img src='/images/pistolslutjsconfus2011.004.jpg' width="600" height="450" /><hr/>
<img src='/images/pistolslutjsconfus2011.005.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.006.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.007.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.008.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.009.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.010.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.011.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.012.jpg' width="600" height="450" />

<img src='/images/pistolslutjsconfus2011.013.jpg' width="600" height="450" />

<img src='/images/pistolslutjsconfus2011.014.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.015.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.016.jpg' width="600" height="450" />

<img src='/images/pistolslutjsconfus2011.017.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.018.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.019.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.020.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.021.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.022.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.023.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.024.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.025.jpg' width="600" height="450" />

<img src='/images/pistolslutjsconfus2011.026.jpg' width="600" height="450" />

<img src='/images/pistolslutjsconfus2011.027.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.028.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.029.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.030.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.031.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.032.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.033.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.034.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.035.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.036.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.037.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.038.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.039.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.040.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.041.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.042.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.043.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.044.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.045.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.046.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.047.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.048.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.049.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.050.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.051.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.052.jpg' width="600" height="450" /><hr/>

<img src='/images/pistolslutjsconfus2011.053.jpg' width="600" height="450" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>337</wp:post_id>
		<wp:post_date>2011-05-03 19:46:16</wp:post_date>
		<wp:post_date_gmt>2011-05-03 18:46:16</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-slides-from-my-talk-at-jsconf-us-2011-fakery-artificial-intelligence-collision-detection-and-falling-in-love-in-pistol-slut-a-2d-platform-shooter-in-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Machine.js</title>
		<link>http://maryrosecook.com/blog/post/machine-js</link>
		<pubDate>Thu, 26 May 2011 14:12:02 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=341</guid>
		<description></description>
		<content:encoded><![CDATA[The first version of the artificial intelligence code that controlled the enemies in <a href='http://pistolslut.com'>Pistol Slut</a>, my 2D platform shooter, was a nightmare thicket of if statements.  Fortunately, someone told me about behaviour trees, and, after reading half of <a href='http://www.gamasutra.com/gdc2005/features/20050311/isla_01.shtml'>an excellent article about their implementation in Halo 2</a>, I rewrote the Pistol Slut AI code as a hierarchical state machine.  To do this, I made a little JavaScript library called <a href='http://machinejs.maryrosecook.com'>Machine.js</a> that implemented a generic behaviour tree.  This code is open source, like all of <a href='http://github.com/maryrosecook'>the code I write in my spare time</a>, but, today, I broke it out into its own library and released it as a separate project.  This should make it easier for other people to reuse.

Go to the <a href='http://machinejs.maryrosecook.com'>Machine.js home page</a> to get the code and read a tutorial.

And, in case you are interested, here is the entire behaviour tree for the enemies in Pistol Slut:

<script src="https://gist.github.com/993235.js?file=enemyai.js"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>341</wp:post_id>
		<wp:post_date>2011-05-26 15:12:02</wp:post_date>
		<wp:post_date_gmt>2011-05-26 14:12:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>machine-js</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Download 10997</title>
		<link>http://maryrosecook.com/blog/post/download-10997</link>
		<pubDate>Sat, 06 Aug 2011 23:12:32 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=345</guid>
		<description></description>
		<content:encoded><![CDATA[A few months ago, I <a href='http://maryrosecook.com/post/10997'>released my new record</a>, 10997.  I put it out as a CD-R and gave copies to friends and to people who emailed me.  I was reluctant to make it downloadable because the lyrics are about stuff that was current affairs.  Now, however, that's not really true, so <a href='http://maryrosecookmusic.com/'>stream and download away</a>.

<a href='http://maryrosecookmusic.com'><img src='/images/10997.jpg' width="600" style="border-style: none" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>345</wp:post_id>
		<wp:post_date>2011-08-07 00:12:32</wp:post_date>
		<wp:post_date_gmt>2011-08-06 23:12:32</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>download-10997</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Video of my talk at JSConf US on Fakery, artificial intelligence, collision detection and falling in love in Pistol Slut, a 2D platform shooter</title>
		<link>http://maryrosecook.com/blog/post/video-of-my-talk-on-fakery-artificial-intelligence-collision-detection-and-falling-in-love-in-pistol-slut-a-2d-platform-shooter</link>
		<pubDate>Mon, 31 Oct 2011 13:39:02 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=348</guid>
		<description></description>
		<content:encoded><![CDATA[<iframe src="http://blip.tv/play/g_Mngtf6MAI.html" width="600" height="429" frameborder="0" allowfullscreen></iframe><embed type="application/x-shockwave-flash" src="http://a.blip.tv/api.swf#g_Mngtf6MAI" style="display:none"></embed>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>348</wp:post_id>
		<wp:post_date>2011-10-31 14:39:02</wp:post_date>
		<wp:post_date_gmt>2011-10-31 13:39:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>video-of-my-talk-on-fakery-artificial-intelligence-collision-detection-and-falling-in-love-in-pistol-slut-a-2d-platform-shooter</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Setup</title>
		<link>http://maryrosecook.com/blog/post/the-setup</link>
		<pubDate>Sat, 12 Nov 2011 10:25:56 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/post/the-setup</guid>
		<description></description>
		<content:encoded><![CDATA[I got <a href="http://mary.rose.cook.usesthis.com">interviewed on The Setup</a> and, in doing so, wrote a love letter to emacs.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>349</wp:post_id>
		<wp:post_date>2011-11-12 11:25:56</wp:post_date>
		<wp:post_date_gmt>2011-11-12 10:25:56</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-setup</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Scruffy Slut</title>
		<link>http://maryrosecook.com/blog/post/scruffy-slut</link>
		<pubDate>Tue, 13 Dec 2011 17:33:24 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=350</guid>
		<description></description>
		<content:encoded><![CDATA[About a week ago, Kanen Flowers interviewed me on his show, <a href='http://scruffythinking.com/'>Scruffy Thinking</a>.  I am very honoured.  We talked about <a href='http://maryrosecookmusic.com'>my latest record</a>, using <a href='http://www.gnu.org/s/emacs/'>emacs</a>, <a href='http://pistolslut.com'>Pistol Slut</a>, Kanen's alien snuff movie, <a href='http://www.barebones.com/products/bbedit/'>BBEdit</a>, dressing like a teenaged boy and landing in Bangkok for a two day layover and only finally leaving a year and a half later.  To listen, <a href='http://itunes.apple.com/us/podcast/scruffy-thinking/id451077510'>go to the Scruffy Thinking podcast on iTunes</a>. Here is a <a href='http://scruffythinking.com/scruffy/2011/12/4/the-scruffy-slut.html'>post about the show on the Scruffy Thinking site</a>.  ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>350</wp:post_id>
		<wp:post_date>2011-12-13 18:33:24</wp:post_date>
		<wp:post_date_gmt>2011-12-13 17:33:24</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scruffy-slut</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The rules of Ninja, as I learnt them last night</title>
		<link>http://maryrosecook.com/blog/post/the-rules-of-ninja-as-i-learnt-them-last-night-at-the-bocoup-offices</link>
		<pubDate>Sat, 17 Dec 2011 17:42:32 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=352</guid>
		<description></description>
		<content:encoded><![CDATA[1. Players stand in a circle, each an arm's length apart from their neighbours.

2. Someone shouts, "One! Two! Three! Ninja!"

3. On, "Ninja!", the players adopt a ninja-like pose and remain still.

4. The person who counted everyone in now makes their first move.  Their aim is to use their hand to touch the hand of another player, thus killing them.  The player's move must be made in one smooth motion.  They may only take one a maximum of one step.  The player being attacked may move their upper body in defence.

5. The next player then makes their move, and so on around the circle.

A video of one of the games we played at the Bocoup offices:

<iframe src="http://player.vimeo.com/video/33829009?title=0&amp;byline=0&amp;portrait=0" width="601" height="338" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>352</wp:post_id>
		<wp:post_date>2011-12-17 18:42:32</wp:post_date>
		<wp:post_date_gmt>2011-12-17 17:42:32</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-rules-of-ninja-as-i-learnt-them-last-night-at-the-bocoup-offices</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Andro.js</title>
		<link>http://maryrosecook.com/blog/post/andro-js</link>
		<pubDate>Fri, 17 Feb 2012 21:08:35 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=353</guid>
		<description></description>
		<content:encoded><![CDATA[Today, I am releasing <a href='http://androjs.maryrosecook.com/'>Andro.js</a>, a JavaScript library that helps you compose objects from fragments of behaviour.

<h3>The problem</h3>

Over the last few months, I have been writing a new JavaScript game.  It is a 2D platformer that involves leaping about, stabbing, shooting and blowing stuff up - that much is certain.  But it also has a puzzle element that is almost totally undefined.

When I began working on this puzzle element, I experimented with objects with different capabilities: objects that would light up, or play a sound, or leap into the air.  Soon, it became clear that I needed a way to give a single object multiple capabilities.  Then, I needed a way for these capabilities to interact, like: make this cube light up and leap into the air when it is touched by the player.

A common approach to defining the behaviour of game objects is to use components.  These are chunks of code that are installed in the object, each to handle a separate task: artificial intelligence, collision detection and so forth.  When the game loop ticks, each game object gets an update call and, in turn, calls an update function on each of its components, so that they can do their work.  This is nice because you separate concerns, which means your code is easier to read, easier to reuse, and easier to reason about.  Further, the components have total control over their game objects, so you can still do powerful stuff.

I thought about using a component-based approach, but it seemed like it didn't really fit the way the game objects actually worked.  If I were to program a leap into the air capability, what type of component would it be? Logic? And if I wanted my object to only leap when it was touched by the player, how would I organise the code then? Could I shove the leaping and touch detection into some sort of vague Collision Detection component? Or would components somehow talk to one another?   I wanted to organise the code by its function, rather than its approach.

<h3>A solution</h3>

I needed to be able to write very malleable, tightly focused fragments of code that could be reused and recombined as I changed my mind, and I was willing to sacrifice some code clarity to get this.

It seemed that mixins were a promising approach.  A mixin is a bundle of attributes and functions that are written onto an object, thus conferring a set of capabilities.  A traditional mixin puts these attributes and functions into the namespace of the object. Any clashes: boom.  That seemed too dangerous to me.  I decided to put each mixin in its own namespace.

Another potential danger was how these mixins would interact.  Their reusability would be limited if they had to call each other's functions by name.  Further, direct interaction would make things into a wild free-for-all that was impossible to reason about, with behaviours walking into rooms and issuing orders and walking out to cause chaos elsewhere.  I quelled the potential chaos (somewhat) by deciding that the behaviours should only interact via events.

Finally, I had a plan: mixins in their own namespaces communicating via an event emitter.  I wrote Andro.js to enact this plan.

<h3>An example of Andro.js in use</h3>

I require the <code>andro.js</code> file.  I instantiate <code>Andro</code>.  I define the game object as a constructor called <code>Cube</code>.  It has a <code>touch</code> function that, when called, emits a <code>touch</code> event to all behaviours (mixins) attached to the cube.

<pre class="prettyprint">
var Andro = require('andro').Andro;
var andro = new Andro();

function Cube {
  this.touch = function(contact) {
    andro.eventer(this).emit("touch", contact);
  };
};
</pre>

I define the <code>firstTouchBehaviour</code> mixin.  This binds to the <code>touch</code> events emitted by its owner and keeps track of the number of things currently in contact.  When the owner goes from being untouched to being touched, <code>firstTouchBehaviour</code> emits a <code>FirstTouch:newlyBeingTouched</code> event.

<pre class="prettyprint">
var firstTouchBehaviour = {
  touchCount: 0,

  setup: function(owner) {
    andro.eventer(owner).bind(this, "touch", function(contact) {
      if(contact === "added") {
        if(this.touchCount === 0) {
          andro.eventer(owner).emit("FirstTouch:newlyBeingTouched");
        }
        this.touchCount++;
      } else if(contact === "removed") {
        this.touchCount--;
      }
    });
  }
};
</pre>

I define <code>soundBehaviour</code>.  This binds to the <code>FirstTouch:newlyBeingTouched</code> event.  Each time this event occurs, <code>soundBehaviour</code> makes a noise: "Rarrrrrwwwwwwwwwwwwwwww".

<pre class="prettyprint">
var soundBehaviour = {
  setup: function(owner) {
    andro.eventer(owner).bind(this, "FirstTouch:newlyBeingTouched", function() {
      console.log("Rarrrrrwwwwwwwwwwwwwwww");
    });
  }
};
</pre>

I now put everything together.  I instantiate <code>cube</code>, set it up for use with Andro.js and augment it with <code>firstTouchBehaviour</code> and <code>soundBehaviour</code>.  Finally, I simulate two touches upon the cube.  On the first, it roars.  On the second, it does not.

<pre class="prettyprint">
var cube = new Cube();
andro.setup(cube);
andro.augment(cube, firstTouchBehaviour);
andro.augment(cube, soundBehaviour);

cube.touch("added"); // rarrrww
cube.touch("added"); // silence
</pre>

<h3>Limiting mentalness</h3>

The approach Andro.js takes exchanges a measure of one's ability to reason about the code for a measure of malleability.  Though the modes of expression are constrained to events and mixins, you can still express yourself into one hell of a mess.

As I've worked on my new game, I've discovered some guidelines that avoid most of the mess.  First, all my behaviours have only one responsibility.  Second, most either emit information about state, or act upon information received.  Third, behaviours do not meddle with the state of their owner objects.

<h3>Was this all a mistake, my beloved?</h3>

It's hard to express something at the same time as you're figuring out what you're trying to say.  Andro.js has enabled me to design some complex game objects.  For example, one type of object can simultaneously flash, be a note in a step sequencer, and play a sound when struck that is conferred to it by a nearby object.  The code for the behaviours is clean and readable.  But, I have rewritten it four times.  So, I wonder if there are superior approaches.

I keep on thinking about <a href='http://arclanguage.org/'>Arc</a>.  Paul Graham has said it is a language designed for exploratory programming.  And I keep on thinking about <a href='http://all-things-andy-gavin.com/2011/03/12/making-crash-bandicoot-gool-part-9/'>GOOL</a>, the dialect of LISP that Andy Gavin invented to script the game objects in Crash Bandicoot.

These are both languages designed to solve the problem I have been grappling with.  Is the logic of game objects in fact a microcosm of all of programming, as complex a problem as any that might be solved by a programming language? Or is it usually a limited problem that is easier to solve when you limit the tools at your disposal? And if that is so, is mixins+events a good approach, or is there a better one?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>353</wp:post_id>
		<wp:post_date>2012-02-17 22:08:35</wp:post_date>
		<wp:post_date_gmt>2012-02-17 21:08:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>andro-js</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What I&#039;ve been working on</title>
		<link>http://maryrosecook.com/blog/post/what-ive-been-working-on</link>
		<pubDate>Sat, 17 Mar 2012 11:32:19 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=357</guid>
		<description></description>
		<content:encoded><![CDATA[<img src='/images/game1.png' width="600" height="400" />

<img src='/images/game2.png' width="600" height="400" />

<img src='/images/game3.png' width="600" height="400" />

<img src='/images/game4.png' width="600" height="400" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>357</wp:post_id>
		<wp:post_date>2012-03-17 12:32:19</wp:post_date>
		<wp:post_date_gmt>2012-03-17 11:32:19</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>what-ive-been-working-on</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hacker School</title>
		<link>http://maryrosecook.com/blog/post/hacker-school</link>
		<pubDate>Mon, 25 Jun 2012 16:14:04 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=366</guid>
		<description></description>
		<content:encoded><![CDATA[I am spending the summer in New York City. I am attending <a href='http://hackerschool.com'>Hacker School</a>, a three month programme where the aim is to make yourself a better programmer. As a student, I spend most of my time sitting in a room with other clever people, either collaborating or working alone on open source projects. I am creating <a href='http://isla.heroku.com'>Isla</a>, a programming language for children, and an accompanying environment for using Isla to write old school text adventure games.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>366</wp:post_id>
		<wp:post_date>2012-06-25 17:14:04</wp:post_date>
		<wp:post_date_gmt>2012-06-25 16:14:04</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hacker-school</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hacker School testimonial</title>
		<link>http://maryrosecook.com/blog/post/hacker-school-testimonial</link>
		<pubDate>Sun, 05 Aug 2012 17:17:08 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=369</guid>
		<description></description>
		<content:encoded><![CDATA[<a href='http://hackerschool.com'>Hacker School</a> is a three month long programmers' retreat that I have been attending in New York City.  The following is a testimonial about my experience.

There are eight elements of Hacker School.

First, it is unusually supportive and safe.  You can ask a question to clarify something you feel you ought to know, because you will get a gentle, illuminating answer.  You can write a piece of code that you worry is shitty, then shape it into something beautiful with a fellow Hacker Schooler.  You are isolated from all the people whose opinion might matter to you: your friends, your family, potential employers, the internet.  In short, there are no negative consequences to showing your weaknesses.

Second, it is structured.  If you feel awkward in social situations, you find that you always have a place.  When you program on Hacker School days, there is always a desk to sit at.  At the social gatherings, you discover that everyone at Hacker School is kind and inclusive.  No one is ever left standing on their own.

Third, Hacker School is an uncontrollable situation.  You are guided towards the things that it is important for you to work on.  This invisible hand is the aggregate of the projects that other people are working on, the fellow students who walk up and offer to work with you on your project, the subjects covered in the Hacker School library, the languages your fellow students discuss at lunch, the juicy problem your deskmates are wrestling with, and the gentle guidance of the faculty.  This invisible hand plainly shows you what you have been avoiding learning, what you thought was too hard, what you didn't know you needed to know, what you didn't know interested you.

Fourth, it is a place where programming is the most important thing in the world.  Imagine Florence in the fifteenth century, except, instead of painting, everyone is inventing how to program, and instead of being surrounded by Donatello and Ghiberti and Botticelli and Raphael, you are working with the startlingly sharp programmers who no one has heard of, yet.  The fact that it is socially acceptable to think about programming and talk about programming and work on programming means that programming is uppermost in your mind.  Which means that you get better at it very fast.  (This element was copped from Paul Graham's essay on aesthetic taste: paulgraham.com/taste.html)

Fifth, there are almost no constraints on what you work on.  Your project doesn't have to make money, doesn't have to build your portfolio of open source code, doesn't have to be useful, doesn't have to appeal to some particular community, doesn't have to be cool, doesn't have result in something commensurate with the effort you put in.  There is one constraint: work at the edge of your programming capabilities.  Which is to say: work on something that makes you a better programmer.

Sixth, there are people who are better than you and people who are worse than you.  Even if you are the most inexperienced programmer in the whole of Hacker School, you certainly know more than others about a particular operating system.  Even if you are the most experienced programmer, you certainly know less than others about a particular language.

Seventh, you get to talk to and work with people who have truly brilliant minds.  Some are fellow students at Hacker School.  Some are drafted in as speakers or co-hackers.  All are your peers.

Eighth, and most importantly, Hacker School is an expression of the faculty: Sonali, Nick, Dave, Alan and Tom.  They are the people you'd want teaching you because they explain things clearly and they know a lot.  They are the people you'd want to be friends with because they are nurturing and fun and funny.  They are the people you'd want to have with you if you got into trouble because they would impose themselves on the situation and start fixing it.  In short, they examine their environment and make it better.

And:

Having David Nolen explain the ClojureScript compiler was one of the intellectual highlights of my life.

The hours at Hacker School feel precious.

This is the fastest period of learning in my life.

I'm coming back.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>369</wp:post_id>
		<wp:post_date>2012-08-05 18:17:08</wp:post_date>
		<wp:post_date_gmt>2012-08-05 17:17:08</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hacker-school-testimonial</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Fibonacci heap ruins my life</title>
		<link>http://maryrosecook.com/blog/post/the-fibonacci-heap-ruins-my-life</link>
		<pubDate>Sat, 29 Sep 2012 09:44:38 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=372</guid>
		<description></description>
		<content:encoded><![CDATA[A couple of Sundays ago, I <a href='http://github.com/maryrosecook/dijkstra'>wrote</a> an implementation of Dijkstra's algorithm in <a href='http://clojure.org'>Clojure</a>.  The core algorithm came to twenty-five lines.  I banged out the code as I sat in a coffee shop with some other people from <a href='http://hackerschool.com'>Hacker School</a>.  I ran my program on <a href='https://class.coursera.org/algo/lecture/preview'>a data set</a> that has two-hundred nodes in a densely interconnected graph.  The program produced best paths from a start node to all other nodes in the graph in about 200 milliseconds.

I closed my laptop, finished my peanut butter, banana and honey sandwich, said goodbye to my friends and spent the rest of the afternoon wandering around the Lower East Side in the dusty sunlight.

By Monday evening, my life had begun falling apart.

Dijkstra's algorithm is a way to find the shortest route from one node to another in a graph.  If the cities in Britain were the nodes and the roads were the connections between the nodes, Dijkstra could be used to plan the shortest route from London to Edinburgh.  And plan is the key word.  The algorithm does reconnaissance.  It does not go on a road trip.

Imagine you are the algorithm.  You examine all the cities directly connected to London.  That is, all the cities connected to London by a single stretch of road.  You record the distance between London and each city.  You note that you have now explored London.  You focus on the city that is the closest to London by road.  Let us say Brighton.  You examine each of the cities directly connected to Brighton.  You ignore London because you have already explored it.  For each city, you record the distance from London to Brighton to the city.  You note that you have explored Brighton.  You now focus on the next unexplored city nearest to London.  You continue like this until your destination comes up as the next city to focus on.  When this happens, you have found the shortest distance to Edinburgh.

On Monday, at the Hacker School morning check-in meeting, I blithely reported that I was going to spend the next couple of days implementing a <a href='http://en.wikipedia.org/wiki/Fibonacci_heap'>Fibonacci heap</a> in Clojure.

I had read on the <a href='http://en.wikipedia.org/wiki/Dijkstra's_algorithm'>Dijkstra Wikipedia article</a> that two men had reduced the running time of Dijkstra by inventing the Fibonacci heap and using it for node selection.  Dijkstra's algorithm still did the route planning.  The Fibonacci heap just helped out by quickly finding the city to explore next.

This search is a time-consuming procedure.  You must go through the list of all the unexplored cities in Britain and find the one for which you have noted the shortest distance from London.  When I had implemented Dijkstra in the coffee shop, my code had just gone through the whole list and returned the one with the shortest distance.  This was slow.

The Fibonacci heap solves this problem in a different way.  It orders the cities by their distance from London.  Therefore, when you want to get the next city to explore, you just take the first one.

To explain, I must set aside the cities and roads metaphor.  To my great regret, I cannot take up a new metaphor as a replacement. Heaps are not quite like family trees, nor quite like green trees that grow.  So, instead, a figure:

<img src='/images/heap.png' width='600' />

This is an ordinary heap.  The Fibonacci heap is a little more complicated, but the idea is the same.  Each circle - each node - has zero or more child nodes.  Further, each node includes a numerical annotation.  This is its sorting value, or key.  The nodes are connected into a tree where the one with the lowest key is at the root.

I started by producing diagrams showing examples of the core Fibonacci heap operations being applied to imaginary Fibonacci heaps.  With the help of multiple reads through the Wikipedia article, I drew out each operation.

By the end of Monday, I had a forest of trees drawn out.  I had mastered the algorithm and I could confidently explain it to Vera and Pepijn.

That night, as I was lying in bed, waiting to fall asleep, I realised that I was thinking about Fibonacci heaps.  My downfall had begun.

I came into Hacker School on Tuesday and spent another day just writing in my notebook.  This time, I produced rough blocks of pseudocode for the core algorithms.

In the morning, I had taken the G train to the C train to school.  I'd been reading How to Solve It, a classic mathematical text that lays out an informal method for solving any problem.  I had also been half thinking about Introduction to Algorithms, an exploration of algorithms for manipulating lists, trees, heaps and graphs.

<img src='/images/howtosolveit.png' width='600' />

<img src='/images/introductiontoalgorithms.jpeg' width='600' />

It is one of the most glorious feelings to look back on a period and realise that it is suffused with what you were working on at the time.  To realise that your work seeped into your journeys, your conversations, your relationships.  I don't mean that you looked up at the trees rattling in the wind and saw upended Fibonacci heaps.  It's much simpler than that.  You were thinking about your work as you stood on the pinchingly hot pavement outside <a href='https://twitter.com/Thesunburntcow'>The Sunburnt Cow</a>, as you discussed with your dad how the brush strokes for the sandstone in Roadway with Underpass somehow suggest the sparklyness of the sun.  Your work was just gently present with you, providing a back story, or an invisible friend.

<img src='/images/roadwaywithunderpass.jpeg' width='600' />

Thus, the next two weeks were steeped in maths and heaps.  I thought about them in the shower.  I thought about them on the G train.  I thought about them in this bar that I and some other Hacker Schoolers ended up in following an attempt to go to a bossa nova night after I had been disabused of the notion that bossa nova is drum-heavy salsa-ish music by a few minutes plugged into James's iPod as we waited for the train and had discovered that it is actually much lighter and more deft and sounds like a skittering barbershop quartet.

I spoke about this interleaving of code and life in my talk on <a href='http://pistolslut.com'>Pistol Slut</a> at <a href='http://blip.tv/jsconf/jsconf2011-mary-rose-cook-artificial-intelligence-collision-detection-and-falling-in-love-in-pistol-slut-a-2d-platform-shooter-5635276'>JSConf US in 2011</a>.  But, this time, I worried about the code.  I started sleeping badly and fretting about how long things were taking to get finished.  Instead of the nasty problems being spaced out over months, they were compressed into a couple of weeks.  Instead of the code being a side project, I was working on it full time.  Instead of writing in JavaScript, a relatively simple language, I was writing in Clojure, tearing dense, richly meaningful lines of code out of my brain.

I began writing code.  Immediately, I discovered that tree structures are more complicated in languages like Clojure that have immutable state.  This is because changing a node requires rebuilding large parts of the tree.  Imagine you want to give a new child to a node that is somewhere far down the tree.  You must duplicate all the nodes and branches that comprise the ancestory of the parent node.  This is time consuming and takes up a lot of memory.

Pepijn pointed me towards a solution: a concept called the <a href='http://en.wikipedia.org/wiki/Zipper_(data_structure)'>zipper</a>.  This structure expresses a tree as the node you are currently focused on, and the rest of the tree as viewed from the current node.  For example, for this tree:

<img src='/images/treeforzipper.png' width='600' />

a zipper focused on node J would look like this:

<img src='/images/zipper.png' width='600' />

Recall that expectant mother node.  Now that the tree is modelled as a zipper, giving birth is much easier.  I am going to create a new zipper that is an amalgamation of the reusable parts of the pre-child zipper and the new pieces I must create to represent the modification.  The time and memory required depend on how much of the original I can use.  In this case, I can reuse the path and the left and right contexts.  So, the only new thing I must create is a new focus that consists of the new child, L, attached to its parent, J:

<img src='/images/zipperwithchild.png' width='600' />

If you want to learn more about zippers, I recommend reading <a href='http://scienceblogs.com/goodmath/2010/01/13/zippers-making-functional-upda/'>this excellent article</a>, from which I adapted the previous example.

On with the story.

Vera and I spent the next two days buried in code.  By the time the Hacker School demo day came, we had nothing finished that we could show.  We could only talk about the way the Fibonacci heap algorithm works.

Vera explained that a Fibonacci heap is not one heap (tree), but a list of self-contained sub-heaps (trees).  She said there is a minimum pointer which indicates the sub-heap root node with the smallest sorting value.  I can't remember if she used a metaphor of cities on a map, and if she explained that, in this metaphor, the keys on the nodes are the distances of the nodes from the starting city.

<img src='/images/fibonacciheap.png' width='600' />

She explained the core Fibonacci heap operations.

She said that merge is the way that a new node is added to the Fibonacci heap.  The node is inserted as the root of a new sub-heap in the list of sub-heaps.  If the new node's sorting value is smaller than the node currently indicated by the minimum pointer, the pointer is updated.

<img src='/images/merge.png' width='600' />

She said that find min takes the pointer to the smallest root node, follows it and returns the node itself.

She said that extract min takes the pointer to the smallest root node, follows it and removes the node from the sub-heap to which it belongs.

<img src='/images/extractmin1.png' width='600' />

She showed how extract min tidies up by going through the former children of the node and making each one into a new stand-alone heap in the list of sub-heaps.

<img src='/images/extractmin2.png' width='600' />

She showed how extract min tidies up further by consolidating the list of sub-heaps, combining pairs of sub-heaps that have the same number of direct descendents.

<img src='/images/extractmin3.png' width='600' />

<img src='/images/extractmin4.png' width='600' />

She explained how the decrease key operation works.  She said that the first step is simply reducing the sorting value of a node.  She said that, if this reduction makes the key smaller than the key of the node's parent, the node must be removed from the sub-heap and made into the root of a new sub-heap.  She also said that the minimum pointer might need to be updated to point at a new minimum root node.

<img src='/images/decreasekey1.png' width='600' />

<img src='/images/decreasekey2.png' width='600' />

She explained that, if any node loses more than one child to a decrease key operation, it, too, must be made into a new sub-heap.

<img src='/images/decreasekey3.png' width='600' />

<img src='/images/decreasekey4.png' width='600' />

The day following, a Sunday, I spent the afternoon sat in a coffee shop in a beam of sunlight, finding some respite from the turmoil.  I wrote code that was isolated from the main problem.  It produces the Fibonacci heap corresponding to a terse definition of a tree structure.  This made writing tests much easier, because it made it easier to produce Fibonacci heaps that reflect a scenario to be tested.

On Monday and Tuesday of week two, Vera and I dived back into the chaos and implemented decrease key, thus completing the Fibonacci heap.  We worked on Saturday - demo day - to wire it into my implementation of Dijkstra's algorithm.  Slowly, a horrible realisation dawned upon us.  A Fibonacci heap written in a language with immutable state is, as far as we could tell then, and as far as I can tell now, incompatible with Dijkstra's algorithm.  In fact, it is incompatible with any algorithm that relies on a data structure that is distinct from the Fibonacci heap, but that also shares the same information.  Pepijn has <a href='http://pepijndevos.nl/2012/08/12/the-multiple-index-problem.html'>written on his blog</a> about a generalised version of this difficulty, naming it the double index problem.

In Dijkstra with Fibonacci heap, there are two data structures.  First, the Fibonacci heap.  Second, the graph of nodes that tells you which node is connected to which (fuck it we're going back to the map metaphor) city.  Examining the neighbour of the city you are currently focusing on may neccessitate decreasing the best route distance you have stored for the neighbour.  But, this is not so easy.  When you get the list of neighbouring cities, you are looking at the graph data structure, which means you have graph nodes in your hands.  Though these graph nodes represent the same cities as the nodes in the Fibonacci heap, they are distinct entities inside the computer.  Thus, to call decrease key (distance) on a city (heap node), you must get hold of the node that represents the city in the heap.  This is a time-consuming operation that involves searching through the heap.

I'm going to stage a little mock Q&A between an imaginary version of you and the actual version of me.  

You: Why is this not a problem in languages with mutable values?

Me: Because the nodes in the graph can just contain a pointer to their counterpart in the Fibonacci heap.

You: What is a pointer?

Me: It's like an arrow that gives you a direct, quick route to a computer's representation of something.

You: Why could you not use use such pointers?

Me: We could, but they would not have the desired effect.

You: Why?

Me: Because, in an immutable language, when you change a piece of data, you get a whole new copy back.

You: Gosh, it's annoying how you won't go into any detail unless I ask.  Why is the whole new copy thing a problem? 

Me: Sorry.  It's a problem because when you update a node with a new distance, you copy that node as part of the change.  Other pieces of data may have pointers to the node, but they now only have pointers to the old version.  In a mutable language, you would have just updated a shared piece of data and not copied anything.  Thus, all pointers to that data would have remained valid.

You: I see.

We implemented the find operation in the Fibonacci heap.  This operation is given a node and finds it in the Fibonacci heap.  This operation is antithetical to the point of the Fibonacci heap.  When we used it, this operation was so time consuming that the original version of Dikstra's algorithm ran twice as fast as the version with the Fibonacci heap.

Showing these results at the Hacker School demo day was kind of disappointing and kind of funny.  However, both these feelings were tempered - no, obliterated - by the warm, relieved afterglow of finishing the Fibonacci heap.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>372</wp:post_id>
		<wp:post_date>2012-09-29 10:44:38</wp:post_date>
		<wp:post_date_gmt>2012-09-29 09:44:38</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-fibonacci-heap-ruins-my-life</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[the-fibonacci-heap]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[the-fibonacci-heap-ruins-my-lif]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JSConf EU 2012</title>
		<link>http://maryrosecook.com/blog/post/jsconf-eu-2012</link>
		<pubDate>Sat, 29 Sep 2012 13:03:24 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=375</guid>
		<description></description>
		<content:encoded><![CDATA[I am honoured to be <a href='http://2012.jsconf.eu/speaker/2012/08/30/a-programming-language-for-children.html'>speaking at JSConf</a> in Berlin next month.  I will talk about <a href='http://islalanguage.org'>Isla</a>, my programming language for young children.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>375</wp:post_id>
		<wp:post_date>2012-09-29 14:03:24</wp:post_date>
		<wp:post_date_gmt>2012-09-29 13:03:24</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jsconf-eu-2012</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>EmpireJS 2012</title>
		<link>http://maryrosecook.com/blog/post/empirejs-2012</link>
		<pubDate>Sat, 29 Sep 2012 13:03:29 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=376</guid>
		<description></description>
		<content:encoded><![CDATA[I am honoured to be <a href='http://empirejs.org'>speaking at EmpireJS</a> in New York City next month.  I will talk about <a href='http://islalanguage.org'>Isla</a>, my programming language for young children.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>376</wp:post_id>
		<wp:post_date>2012-09-29 14:03:29</wp:post_date>
		<wp:post_date_gmt>2012-09-29 13:03:29</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>empirejs-2012</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Springs, weights and the morning light</title>
		<link>http://maryrosecook.com/blog/post/springs-weights-and-the-morning-light</link>
		<pubDate>Mon, 12 Mar 2012 20:03:28 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=394</guid>
		<description></description>
		<content:encoded><![CDATA[Tom Klein Peter wrote a <a href="http://www.tomkleinpeter.com/the-audiogalaxy-chronicles/">wonderful series of essays</a> about being the lead dev at Audiogalaxy.  The excerpt below is one of my favourite pieces of writing about programming.  It combines an analogy of springs and weights that illustrates the way programming can change the way you think about systems, and a description of the loveliness of the light in the morning after a night spent hacking that illustrates how the demands of your art can show you the world in a new way.

In short, it demonstrates how a part life of productivity and a part life of fun can enrich each other to produce something that makes your head explode with associative pyrotechnics.

<blockquote>As we worked through the bugs, the uptime turned into minutes, then hours, and eventually the service virtually never crashed. With hundreds of instances deployed, we got so much traffic that we were able to remove all the bugs we were likely to run into. We had one or two machines that would crash every month or two with inscrutable core files. Because it was always the same machine, I eventually attributed this to faulty memory. The idea that you could write software that was more reliable than hardware was fascinating to me.<br /><br />

In fact, almost everything about the scale of the software fascinated me. I found that a system with hundreds of thousands of clients and thousands of events per seconds behaved like a physical machine built out of springs and weights. If one server process stalled for a moment, effects could ripple throughout the cluster. Sometimes, it seemed like there were physical oscillations – huge bursts of traffic would cause everything to slow down and back off, and then things would recover enough to trigger another burst of load. I had never even imagined that these sorts of problems existed in the software world and I found myself wishing I had taken control theory more seriously in college.<br /><br />

Keeping up with the traffic at this time was difficult, but in retrospect, it was really a lot of fun. I had graduated from UT in December of 2000 and moved downtown within walking distance of both 6th Street and the office. I spent the summer on a completely nocturnal cycle, partially because of the Texas heat, but mainly because restarting services was easier at 3 in the morning. I was tired of staying up late to deploy new code, so I just changed my schedule. Audiogalaxy users had led me to a set of live trance mixes from clubs in Europe which turned me into a diehard electronica fan, and driving around Texas to catch DJs on the weekend was much easier if staying up until 8am was normal. I bought some turntables and a lot of vinyl. And a couch. The light in my apartment when I got home in the morning was very lovely.</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>394</wp:post_id>
		<wp:post_date>2012-03-12 21:03:28</wp:post_date>
		<wp:post_date_gmt>2012-03-12 20:03:28</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>springs-weights-and-the-morning-light</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tool</title>
		<link>http://maryrosecook.com/blog/post/tool</link>
		<pubDate>Wed, 04 Apr 2012 20:05:19 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=396</guid>
		<description></description>
		<content:encoded><![CDATA[Tool and Mogwai made me realise that musicians are allowed to do anything they want.

But Tool had a stronger effect because they were my first real exposure to metal, which meant they were able to crystalise the most consistently important concept in my musical taste: beauty is harsh.

I first heard Mogwai in 1997, when I was about sixteen.  I was lying in bed in the dark listening to The Breezeblock, Mary Ann Hobbs's late night music programme on Radio One.  She played Like Herod, a twelve-minute track from Mogwai's first album, Young Team.  I hadn't heard music like that before: instrumental by default, symphonically structured, spoken word, moods rather than songs, occasional vocals that were accents, rather than scaffolding, and incongruous shifts in instrumentation and tone from section to section.  I thought that Mogwai had, somehow, invented all this stuff.  It wasn't until 2002 that I realised that Slint had already got most of the way there by 1991.

I first heard Tool in 1998, when I was seventeen.  My friend, Harry, lent me their 1996 album, Aenima, and I took it home and played it through the speakers built into the monitor of my Mac.  I played it a lot over the next five or six years on my CD Walkman.  

Aenima took me much further than Young Team.  It was the first piece of modern music in which I heard the non-standard time signatures.  It was the first record I heard that combined anger and sadness and melody into beauty.  It was the first record I heard that had an overarching theme.  The first record I heard that had continuity between songs.  It made me consciously seek out weird, extreme music, music that would broaden my horizons and maybe give my brain more versions of that moment in Third Eye when Maynard James Keenan sings, "So good to see you, I missed you so much": the joyous/agonising high of a sound that is simultaneously sad and beautiful, melodic and abrasive.

Most importantly, it was the record that made me fully aware of the fact that music doesn't just come from some obscured, instinctual, idiot savant place in the brain.  It is intentional art, just like novels and films and paintings.  It is - can be - a series of conscious decisions, some of which the musician is unsure of.  This is excellently illustrated in Third Eye by the two moments when Maynard James Keenan sings, "Prying open my third eye."  The first time, it stops the song with the long, arrhythmic pauses between repetitions.  The second time, it is in parallel with a polyrhythmic drum beat, and repeated many more times, and totally cathartic.

Fourteen years later, poor Harry still hasn't had his CD back.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>396</wp:post_id>
		<wp:post_date>2012-04-04 21:05:19</wp:post_date>
		<wp:post_date_gmt>2012-04-04 20:05:19</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tool</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Taxi Driver</title>
		<link>http://maryrosecook.com/blog/post/taxi-driver</link>
		<pubDate>Fri, 04 May 2012 20:08:40 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=397</guid>
		<description></description>
		<content:encoded><![CDATA[I love this shot.  Even though Travis Bickle is supposedly God's lonely man, we know him as the subject of a Hollywood film.  But, earlier in the film, in this shot, he is just another unremarkable guy, alone in the early morning, in the distance, swigging from a bottle of whiskey.

<img src='/images/tumblr_m3ta5bXlv81qz6zz3.png' width=600 />

And I love how, in the "Are you talking to me?" scene, you can hear the everyday noise of people outside as Travis Bickle goes mad inside:

<iframe width="500" height="284" src="http://www.youtube.com/embed/XzPBUGUM7KQ" frameborder="0"></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>397</wp:post_id>
		<wp:post_date>2012-05-04 21:08:40</wp:post_date>
		<wp:post_date_gmt>2012-05-04 20:08:40</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>taxi-driver</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Empty Black</title>
		<link>http://maryrosecook.com/blog/post/empty-black</link>
		<pubDate>Sat, 29 Sep 2012 13:53:47 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=377</guid>
		<description></description>
		<content:encoded><![CDATA[In March, I posted <a href='http://maryrosecook.com/post/what-ive-been-working-on'>What I've been working on</a>.  In it, I showed four images of <a href='http://emptyblack.com'>Empty Black</a>, the game I was making.  At that point, I was still planning for it to be driven by musical puzzles where you played tunes to open doors.  Since then, it has turned into a game of three parts: deft jumping, tactile combat and block-throwing puzzles.

<a href='http://emptyblack.com/play.html'>Play the game</a>.

Watch the trailer:

<iframe src="http://player.vimeo.com/video/49352362?title=0&amp;byline=0&amp;portrait=0&amp;color=000000" width="600" height="338" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>377</wp:post_id>
		<wp:post_date>2012-09-29 14:53:47</wp:post_date>
		<wp:post_date_gmt>2012-09-29 13:53:47</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>empty-black</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A programming language for children, my talk at JSConf EU 2012</title>
		<link>http://maryrosecook.com/blog/post/the-video-of-my-talk-at-jsconf-eu-2012</link>
		<pubDate>Sun, 04 Nov 2012 13:52:18 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=381</guid>
		<description></description>
		<content:encoded><![CDATA[<iframe width="600" height="338" src="http://www.youtube.com/embed/qDZ5Ku6whi0?rel=0" frameborder="0" allowfullscreen></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>381</wp:post_id>
		<wp:post_date>2012-11-04 14:52:18</wp:post_date>
		<wp:post_date_gmt>2012-11-04 13:52:18</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-video-of-my-talk-at-jsconf-eu-2012</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Glazz</title>
		<link>http://maryrosecook.com/blog/post/glazz</link>
		<pubDate>Sun, 11 Nov 2012 23:00:00 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=384</guid>
		<description></description>
		<content:encoded><![CDATA[n. eye

I have just released <a href='http://glazz.maryrosecook.com'>Glazz</a>, my new JavaScript library.  It models vision in a 2D world.  It has a built in raytracer that will tell you if one object in the world can see another object in the world.  I used it in <a href='http://emptyblack.com'>Empty Black</a> and a game I will never release called Death Squad.  It worked pretty well.

The code is open source under the MIT license.  You can get it from <a href='http://github.com/maryrosecook/glazz'>Github</a> or <a href='http://npmjs.org/glazz'>npm</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>384</wp:post_id>
		<wp:post_date>2012-11-12 00:00:00</wp:post_date>
		<wp:post_date_gmt>2012-11-11 23:00:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>glazz</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Why children should learn to code</title>
		<link>http://maryrosecook.com/blog/post/why-children-should-learn-to-code</link>
		<pubDate>Tue, 20 Nov 2012 12:55:25 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=385</guid>
		<description></description>
		<content:encoded><![CDATA[I was interviewed for <a href='http://www.huffingtonpost.co.uk/tamara-roukaerts/educating-beta-why-kids-n_b_2157533.html'>this Huffington Post piece</a> about why programming should be taught in schools.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>385</wp:post_id>
		<wp:post_date>2012-11-20 13:55:25</wp:post_date>
		<wp:post_date_gmt>2012-11-20 12:55:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>why-children-should-learn-to-code</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Empty Black coverage</title>
		<link>http://maryrosecook.com/blog/post/a-collection-of-empty-black-coverage</link>
		<pubDate>Sat, 24 Nov 2012 10:27:05 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=386</guid>
		<description></description>
		<content:encoded><![CDATA[Press coverage of my latest game:

<a href='http://killscreendaily.com/articles/interviews/conversation-mary-rose-cook-indie-developer-no-patience-indie-games/'>Kill Screen</a>, <a href='http://www.pcgamer.com/2012/09/21/the-free-webgame-round-up-3/'>PC Gamer</a>, <a href='http://www.chromeexperiments.com/detail/empty-black/'>Chrome Experiments</a>, <a href='http://www.reddit.com/r/IndieGaming/comments/102sad/empty_black_my_html5_platformer_jump_deftly_throw/'>Reddit</a>, <a href='http://indiegames.com/2012/09/browser_game_pick_empty_black_.html'>Indie Games</a>, <a href='http://thenextweb.com/apps/2012/09/28/html-5-games-may-yet-ready-prime-time-retro-2d-shooter-hard-put/'>The Next Web</a>, <a href='http://www.creativeapplications.net/uncategorized/empty-black-by-mary-rose-cook-fun-html5-2d-platform-shooter/'>Creative Applications</a>, <a href='http://www.aqnb.com/2012/09/18/empty-black-mary-rose-cook/'>AQNB</a>, <a href='http://www.kongregate.com/games/maryrosecook/empty-black'>Kongregate</a>, <a href='http://js.gd/'>JS.gd</a>, <a href='http://www.bontegames.com/2012/09/empty-black.html'>Bonte Games</a>, <a href='http://html5games.com/2012/10/empty-black/'>HTML5Games.com</a>, <a href='http://www.html5games.net/platform/empty-black/'>HTML5Games.net</a>, <a href='http://cheezburger.com/6582781440'>I Can Has Cheezeburger</a>, <a href='http://www.ecrans.fr/Empty-Black,15845.html'>Ecrans</a>, <a href='http://www.bontegames.com/2012/12/2012-top-10-web-games.html'>Bart Bonte's best browser games of 2012</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>386</wp:post_id>
		<wp:post_date>2012-11-24 11:27:05</wp:post_date>
		<wp:post_date_gmt>2012-11-24 10:27:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-collection-of-empty-black-coverage</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Margaret</title>
		<link>http://maryrosecook.com/blog/post/margaret</link>
		<pubDate>Tue, 04 Dec 2012 20:16:40 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=398</guid>
		<description></description>
		<content:encoded><![CDATA[I tried to find a still to illustrate this post.  A still to illustrate <a href='http://en.wikipedia.org/wiki/Margaret_(2011_film)'>the film</a>.  This is impossible.  It can't be the shot of Lisa shouting at her mum.  It can't be the shot of the bus driver bluffing his way through his interview with Lisa.  It can't be the shot of Darren crying.  It can't be the shot of the class debate blowing up.  Margaret is just people talking.  The shots are designed to show these conversations.  As stills, they convey no information.  There is little artistic observation in the locations, the colours, the montage, the framing.  All there is are the words and the characters' tones and expressions as they say them.

The most appropriate frame would come from the opening credits.  These show New York crowds crossing streets in slow motion.  They show the people lit up who are on stage and the people in darkness who are not.  They make the ordinary lives of ordinary people as fascinating as those of fictional characters.

Margaret is a mess.  It has too many side plots.  It overdoes its crescendos.  It has a strange mix of oblique emotional observation that is almost as good as Anna Karenina and characters that foghorn the director's thoughts for him.  Some characters feel like real people, others made up.

But it's a very good film.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>398</wp:post_id>
		<wp:post_date>2012-12-04 21:16:40</wp:post_date>
		<wp:post_date_gmt>2012-12-04 20:16:40</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>margaret</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Spelunky, stories and trying to relate to other people</title>
		<link>http://maryrosecook.com/blog/post/spelunky-stories-and-trying-to-relate-to-other-people-2</link>
		<pubDate>Fri, 04 Jan 2013 20:19:07 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=399</guid>
		<description></description>
		<content:encoded><![CDATA[In <a href='http://spelunkyworld.com/'>Spelunky</a>, you go through a learning experience that is like the learning experience you go through in the real world.  First, you become familiar with the behaviour of the elements of the game.  The arc described by a projectile. The beat walked by a cave man.  The activation perimeter of the spikes in a totem pole.  Second, you learn strategies for overcoming these elements.  Land your jump on top of that totem pole.  Strike a cave man three times with your boomerang to kill him.  Third, you learn back-up strategies for the moments when your primary strategies won't work.  Activate the totem pole spikes by passing near them.  Just as they are withdrawing, jump, hang onto the edge of the pole and haul yourself up.  Jump on the cave man's head to stun him.  Throw him somewhere else.  Fourth, you learn to combine the behaviours of elements.  Whip a cave man until he sees stars.  Throw him at the foot of a totem pole.  Watch him get spiked to death.

But Spelunky is better than the real world, because it is simpler.  There are fewer active elements, and no redundant elements. This makes the rules of the world easier to understand.  It makes it easier to concoct a plan.  It makes it easier to understand why the plan went wrong.

In Spelunky, you are always having fun.  What type of fun? You are always on the edge of your seat because you lose everything when you die.  You are never frustrated because the levels are randomly generated, so you need never replay any part of the game.  You are always in an intellectually stimulating situation.  Each level gives you a new combination of obstacles.  And you can make the game as hard as you like.  You can go for the riskily placed bars of gold, or the valuable artifacts that set off traps when you pick them up, or the items that you are too poor to buy and that must be stolen.

In Spelunky, you must balance risk and reward.  Do you jump into that pit to try and grab those bars of gold, knowing that you might get unlucky, miss the jump out and get eaten by that man trap? This decision has multiple dimensions.  The amount of gold you have determines your score, which might be important to you.  But it also determines what you can buy.  What you can buy affects your options for dealing with situations.  You can buy more ropes and bombs.  You can buy items with specific uses like ice guns, springs for your shoes, parachutes, and sticky gloves.  Having extra things makes you more adaptable.

And what you can buy affects concerns outside your current life.  Each death resets everything, besides the experience and skills you (not your avatar) have acquired on this go-round.  But, very occasionally, there will be an artifact of your life that survives you.  There are four worlds.  Surviving the first leads you to the second.  Surviving the second leads you to the third.  Usually, death means starting right back at the beginning of the first world.  But, if you make it through a world bearing particular gifts - a sizeable amount of gold, a bomb, a rope, it depends - someone called the Tunnel Man will dig you a permanent short cut to the beginning of that world.  And purchase is one of the ways you can get hold of these gifts.

I have spent most of my game time this Christmas trying to make it to the end of world two with a shotgun for the Tunnel Man.  To do this, I must battle through the jungle, at some point lay my hands on a shotgun, then make it to the end of the world alive.

Purchasing a shotgun is one of the options at my disposal.  But shotguns are expensive and rarely in stock.  In practice, I find myself making my way through the jungle, hoping to stumble across one of the two beings who carry shotguns: the shop keeper and the man guarding treasure.  As I go, I try and accrue gold, bombs, extra health and some sort of projectile weapon.

If I see a mark, I do one of a range of colossally stupid things that will, almost certainly, end in my death.  The least terrible plan is to use bombs to blast my way down into the shop or treasure trove, then keep throwing bombs in, hoping to kill the target.  If I don't have enough bombs, and I have a boomerang, I might try and stun the keeper/hoarder and then kill him with his own shotgun.  If I have no boomerang, I will resort to doing the stunning with a lobbed rock, skull or damsel in distress.

The day before yesterday, I managed to get a shotgun.  Afterwards, I proceeded very carefully.  I made a beeline for each level exit.  I collected no gold.  I stayed back and shotgunned enemies.

I reached a row of vines hanging above spikes (instant death).  These vines separated me from the world exit and the Tunnel Man.  I drew a preparatory breath (in my actual lungs, not my explorer avatar's lungs - breathing is not modelled in Spelunky) and thought, "Now, Mary, be careful.  You're not very good at these vines.  You sometimes forget you have to hold up on the controller to cling on." I leapt out over the pit, forgot to hold up and died.

I've just told you a gaming story, a monologue that tries to connect a series of disparate events into a causal, meaningful narrative.  People attempt to turn the events in their own lives into narratives in the same way.  We try and find causality in a world far too complex for our tiny brains to understand.  I say, "I keep on moving from city to city, from country to country, because I can't stand easiness."  We try to find meaning in causality.  I say, "I can't stand easiness because I'm searching for something that I feel is missing."

Connecting events together into a narrative to find causality takes us a step from alarming randomness into delicious patterns.  Using narrative devices - revelation, symmetry, ellipsis - to create meaning takes us another reassuring step into even more delicious, higher level patterns.

The Pitchfork <a href="http://pitchfork.com/reviews/albums/15674-organ-music-not-vibraphone-like-id-hoped/">review</a> of Moonface's record, Organ Music Not Vibraphone Like I'd Hoped, said Sunset Rubdown's record, Dragonslayer, is "A personal record about the toll that the worlds inside someone's head take on his relationships."

Spencer Krug, the songwriter for Moonface and Sunset Rubdown, expresses patterns in his art that he cannot adequately communicate to the people in his life.  This type of communication failure can also occur when reacting to art by another.  I've tried so many times to explain to people what I like about Sunset Rubdown, how the corridors of the basement of the House of Leaves make me feel, what I see in Al Pacino's eyes when Frank Serpico realises that his girlfriend is about to leave.  But I can't make myself understood.

With games, it's even worse. I have some hope that I could make the people I care for understand why I like Hoop Dreams, because they know how documentaries work.  But the structure and tropes of games are a mystery to my beloveds.  We do not even have a common ground from which to start.  So the things I learn from games, the feelings I get, the experiences I have, are locked up inside me, inexpressible.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>399</wp:post_id>
		<wp:post_date>2013-01-04 21:19:07</wp:post_date>
		<wp:post_date_gmt>2013-01-04 20:19:07</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>spelunky-stories-and-trying-to-relate-to-other-people-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Mars Volta</title>
		<link>http://maryrosecook.com/blog/post/the-mars-volta</link>
		<pubDate>Wed, 23 Jan 2013 20:21:42 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=400</guid>
		<description></description>
		<content:encoded><![CDATA[Here, <a href="http://www.last.fm/user/maryrosecook/library">according to Last.fm</a>, are the bands I have listened to the most over the last seven years.  I have put in bold the bands that feel like a part of my identity.  When I think about these bands, I get a warm glow.  When I talk about them, I say "I fucking love".

<a href="http://en.wikipedia.org/wiki/Dear_and_the_Headlights"><strong>Dear and the Headlights</strong></a>  
<a href="http://en.wikipedia.org/wiki/Sunset_Rubdown"><strong>Sunset Rubdown</strong></a>  
<a href="http://en.wikipedia.org/wiki/Bob_Dylan"><strong>Bob Dylan</strong></a>  
<a href="http://desark.org/"><strong>Des Ark</strong></a>  
<a href="http://en.wikipedia.org/wiki/Women_(band)"><strong>Women</strong></a>  
<a href="http://en.wikipedia.org/wiki/The_Paper_Chase_(band)"><strong>The Paper Chase</strong></a>  
<a href="http://en.wikipedia.org/wiki/The_Mars_Volta">The Mars Volta</a>  
<a href="http://en.wikipedia.org/wiki/Animal_Collective">Animal Collective</a>  
<a href="http://en.wikipedia.org/wiki/Meshuggah">Meshuggah</a>  
<a href="http://en.wikipedia.org/wiki/The_Blood_Brothers_(band)">The Blood Brothers</a>  
<a href="http://en.wikipedia.org/wiki/Converge_(band)">Converge</a>  
<a href="http://en.wikipedia.org/wiki/The_Acorn">The Acorn</a>  
<a href="http://en.wikipedia.org/wiki/Xiu_Xiu">Xiu Xiu</a>  
<a href="http://en.wikipedia.org/wiki/Joanna_Newsom">Joanna Newsom</a>  
<a href="http://en.wikipedia.org/wiki/Beach_House">Beach House</a>  
<a href="http://en.wikipedia.org/wiki/Arcade_Fire">Arcade Fire</a>  
<a href="http://en.wikipedia.org/wiki/Hurray_for_the_Riff_Raff">Hurray for the Riff Raff</a>  
<a href="http://en.wikipedia.org/wiki/Thee_Silver_Mt._Zion"><strong>A Silver Mt. Zion</strong></a>

These identity bands have some common traits.

One.  I love at least two of their records.  Dear and the Headlights: both of their albums.  Sunset Rubdown: all of their albums.  Women: both of their albums.  Des Ark: all of their live acoustic records.  The Paper Chase: <a href="http://en.wikipedia.org/wiki/Now_You_Are_One_of_Us">Now You Are One of Us</a> and <a href="http://en.wikipedia.org/wiki/God_Bless_Your_Black_Heart">God Bless Your Black Heart</a>.  A Silver Mt. Zion is the exception, here.  <a href="http://en.wikipedia.org/wiki/Horses_in_the_Sky">Horses in the Sky</a> is one of my top ten records, ever.  The rest of their albums probably aren't even in my top fifty.

Two.  I admire the aesthetic they achieve.  Dear and the Headlights.  The most beautiful melodies by anyone, ever.  Bob Dylan.  The deeper you go into his lyrics, the more you find.  Women.  The Beach Boys as a noise rock band.  The Paper Chase.  Find the most beautiful melody, then destroy it with how hard you feel it.  Des Ark.  Equate the art with the artist.  Aimée Argote puts no distance between her manifestation in real life and her manifestation in her art.  She makes music that, when heard, might be detrimental to her actual life.

Three.  I find pieces of their music very meaningful.  It is hard for me to cite examples, because music is so far from words.  Not only is it impossible for me to explain why I love Bob Dylan's line, "Let me dance beneath the diamond sky with one hand waving free", but it's precisely because of its wordless meaning that I like it, and it was Dylan who taught me that alogical emotion is worthy of trust.

Four.  I admire (my conception of) the song-writer as a person.  Sunset Rubdown's Spencer Krug has a solo project, <a href="http://moonface.ca/">Moonface</a>.  The Pitchfork <a href="http://pitchfork.com/reviews/albums/15674-organ-music-not-vibraphone-like-id-hoped/">review</a> of the Moonface record, <a href="http://en.wikipedia.org/wiki/Organ_Music_Not_Vibraphone_Like_I">Organ Music Not Vibraphone Like I’d Hoped</a>, said Sunset Rubdown’s <a href="http://en.wikipedia.org/wiki/Dragonslayer_(Sunset_Rubdown_album)">Dragonslayer</a> is “A personal record about the toll that the worlds inside someone’s head takes on his relationships.” Des Ark.  Aimée Argote sings about being a broken, high-functioning person.  She sings about immovable, incidental, unpolitical queerness.  Bob Dylan.  He constantly moves on from his previous successes.  As seen in the documentaries, <a href="http://en.wikipedia.org/wiki/Dont_Look_Back">Dont Look Back</a>, and <a href="http://en.wikipedia.org/wiki/No_Direction_Home">No Direction Home</a>: he lives this life on the road half in love with Joan Baez, half in love with his own head.

But, most of the entries in that list are unbolded.  These others are the bands that I simply listen to a lot.  And I have listened to <a href="http://en.wikipedia.org/wiki/De-Loused_in_the_Comatorium">De-Loused in the Comatorium</a> and <a href="http://en.wikipedia.org/wiki/Frances_the_Mute">Frances the Mute</a> an awful lot.

I can't identify with The Mars Volta's music.  Cedric Bixler-Zavala's lyrics mean nothing.  He chooses words that are one, impressionist remove from their actual meaning, rather than assembling a rich, internally consistent network from a few versatile base operators.  Omar Rodríguez-López's approach to arrangement is to chuck everything in.  By saying everything, you say nothing.

I really like the <a href="http://en.wikipedia.org/wiki/Tony_Scott">Tony Scott</a> film, <a href="http://en.wikipedia.org/wiki/Enemy_of_the_State_(film)">Enemy of the State</a>.  It is a thriller that is brilliantly thrilling.  In the same way, The Mars Volta's music cuts in on a primal level and makes me want to sing and dance, which is kind of what music is supposed to be all about.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>400</wp:post_id>
		<wp:post_date>2013-01-23 21:21:42</wp:post_date>
		<wp:post_date_gmt>2013-01-23 20:21:42</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-mars-volta</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Abendland</title>
		<link>http://maryrosecook.com/blog/post/abendland</link>
		<pubDate>Mon, 28 Jan 2013 20:24:57 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=402</guid>
		<description></description>
		<content:encoded><![CDATA[<a href='http://en.wikipedia.org/wiki/Abendland'>A documentary</a> by Nikolaus Geyrhalter.  Notionally, it shows a series of things that happen at night: monitoring of borders, conventions of EU sub-committees, care for the elderly and prematurely born, parties, news broadcasting, pornographic broadcasting, food production, policing, counseling for the suicidal.  Reviewers have noted different themes.  Surveillance.  Protection.  The service industry.  But these notes tell you more about the commentator than the theme of the film.

My own conclusions on the theme changed as I watched: being on or off stage, activities that happen at night, people who are working surrounded by people who are not, the services people provide to others.   

By the end, I had arrived at: jobs that must be done at night.  But distilling it down to that is a trivialisation.  It is more worthwhile to think, "There are jobs that can't wait until morning", and take that as a jumping off point.  Some general questions arise.  What do these jobs entail? Why can't they wait? Who does them? How? Then, more specific questions arise.  Why does the night nurse clean the hand rails in the care home as well as attending to the patients? How does one talk to a stranger who is suicidal? Why are parcels sorted separately from letters?

In the film, there are many moments of distance and alienation.  But, there are moments of human connection, too - a nurse tenderly feeding an old woman from a beaker, two people taking turns to shower after having sex, the film's poster showing a network of street lights strung through the darkness of Europe.

Unsleeping people connected in the night.

<img src='/images/tumblr_inline_mhb45nXz8Z1qz4rgp.png' width=600 />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>402</wp:post_id>
		<wp:post_date>2013-01-28 21:24:57</wp:post_date>
		<wp:post_date_gmt>2013-01-28 20:24:57</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>abendland</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The stabbing in Shadow of the Colossus</title>
		<link>http://maryrosecook.com/blog/post/the-stabbing-in-shadow-of-the-colossus</link>
		<pubDate>Thu, 21 Feb 2013 20:27:08 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=403</guid>
		<description></description>
		<content:encoded><![CDATA[You finally realise how to get off the ground and onto the legs of the colossus.  Maybe you need to shoot arrows into the soles of its feet so it kneels in pain.  Maybe you need to hide under an archway, wait for it to stoop down low and make a leap for its beard.

You enact your plan, haul yourself up and begin climbing the body of the colossus.  As you go, you might occasionally find part-time horizontal surfaces - armour, shackles - upon which you can rest and regain your strength.  Or, you might plan your route so you can shimmy up as fast as possible, avoiding the limbs that sometimes flail and force you to stop climbing and just cling on.

You reach the top.  The shoulders of a biped.  The back of a quadruped.  This moment is magic.  You stagger across this great roiling mass that feels like moving rock.  You cling on as it rears up.  You creep over it, whispering, "stay calm", praying it will not buck.

Being at the top is relatively safe.  Though you must cling on when the colossus bridles, there is always a reprieve when you can stand and regain your strength.  Your aim is now to reach one of the glowing tattoos on the colossus's body.  To get to a tattoo, you must leave your perch and climb to the crown of a swaying head, or a flank that can only be reached from above.  These forays are a commitment.  Once you set out, you have a ration of strength that cannot be replenished until you return.  If your strength runs out during your expedition, you will lose your grip, fall to the ground and possibly die.

You reach a tattoo.  To kill the colossus, you must repeatedly stab it here.  You raise your sword.  The longer you hold it aloft, the more powerful the stab will be.  The more powerful the stab is, the fewer stabs you will need.

This piece of the game is particularly beautifully designed.  If the colossus bucks while your sword is raised, you must lower your sword and cling on.  This means you have wasted grip strength.  Having your sword raised is a tense balancing act where you want to wait as long as possible, but no longer, before you strike.  There is an elegant mapping between the  sword and your controller.  You press and release X to raise your sword.  You press X again to stab.  A more intuitive system would have you press and hold X to keep the sword raised.  But the way the controls actually work is better.  Stabbing the tattoo is such a cathartic, primal screaming moment, to attach it to the release of a button would diminish its power.  The way it is, you jam your finger back down on X like you really are astride the colossus's neck, like it is about to throw you, like it is the only thing stopping you from winning back your girlfriend.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>403</wp:post_id>
		<wp:post_date>2013-02-21 21:27:08</wp:post_date>
		<wp:post_date_gmt>2013-02-21 20:27:08</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-stabbing-in-shadow-of-the-colossus</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dream job</title>
		<link>http://maryrosecook.com/blog/post/dream-job</link>
		<pubDate>Fri, 29 Mar 2013 14:26:46 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=405</guid>
		<description></description>
		<content:encoded><![CDATA[<a href='https://www.hackerschool.com/blog/15-mary-rose-cook-is-a-hacker-schooler'>Mary Rose Cook is a Hacker Schooler</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>405</wp:post_id>
		<wp:post_date>2013-03-29 15:26:46</wp:post_date>
		<wp:post_date_gmt>2013-03-29 14:26:46</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dream-job</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A pop quiz purporting to be about scope in JavaScript that is actually a polemic about why modules are a good idea</title>
		<link>http://maryrosecook.com/blog/post/a-pop-quiz-purporting-to-be-about-scope-in-javascript-that-is-actually-a-polemic-about-why-modules-are-a-good-idea</link>
		<pubDate>Wed, 03 Apr 2013 19:32:24 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=406</guid>
		<description></description>
		<content:encoded><![CDATA[This is the blog post version of a lightning talk I gave at <a href='http://hackerschool.com'>Hacker School</a> last week.

I will ask you some questions.  For each question, there will be some JavaScript files loaded into an HTML page.  In these JavaScript files, there will be some <code>console.log()</code> invocations.  Your job is to predict what happens after each invocation.

For this first question, there is one JavaScript file, <code>a.js</code>, loaded into this HTML page:

<pre class="prettyprint">
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;script src="a.js"&gt;&lt;/script&gt;
  &lt;/head&gt;
&lt;/html&gt;
</pre>

<h3>One</h3>

<pre class="prettyprint">
// a.js
var blah = "blah";
console.log(blah); // Option 1: ReferenceError: blah is not defined
                   // Option 2: print 'blah' to the console
</pre>

<code>blah</code> will be printed.  The variable, <code>blah</code>, is in the same scope as the <code>console.log()</code> invocation.

For this rest of the questions, there will be two JavaScript files, <code>a.js</code> and <code>b.js</code>, loaded into this HTML page:

<pre class="prettyprint">
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;script src="a.js"&gt;&lt;/script&gt;
    &lt;script src="b.js"&gt;&lt;/script&gt;
  &lt;/head&gt;
&lt;/html&gt;
</pre>

<h3>Two</h3>

<pre class="prettyprint">
// a.js
blah = "blah";

// b.js
console.log(blah); // Option 1: ReferenceError: blah is not defined
                   // Option 2: print 'blah' to the console
</pre>

<code>blah</code> will be printed.  It doesn't matter that <code>blah</code> was declared in a different file.  All files in JavaScript are loaded into a shared scope.

<h3>Three</h3>

<pre class="prettyprint">
// a.js
var blah = "blah";

// b.js
console.log(blah); // Option 1: ReferenceError: blah is not defined
                   // Option 2: print 'blah' to the console
</pre>

<code>blah</code> will be printed.  It doesn't matter that the <code>var</code> keyword was used to declare <code>blah</code>.  The declaration was in a shared scope, and that scope is global, so <code>blah</code> becomes a global variable.

<h3>Four</h3>

<pre class="prettyprint">
// a.js
var blahFn = function() {
  return "blah";
};

// b.js
console.log(blahFn()); // Option 1: ReferenceError: blah is not defined
                       // Option 2: print 'blah' to the console
</pre>

<code>blah</code> will be printed.  All the logic shown so far applies to functions.

<h3>Five</h3>

<pre class="prettyprint">
// a.js
function blahFn() {
  var blah = "blah";
};

// b.js
blahFn();
console.log(blah); // Option 1: ReferenceError: blah is not defined
                   // Option 2: print 'blah' to the console
</pre>

There will be a reference error.  The <code>blah</code> variable is created inside a function, in the function's own, private scope.  It is not available in the global scope.

<h3>Six</h3>

<pre class="prettyprint">
// a.js
function blahFn() {
  blah = "blah";
};

// b.js
blahFn();
console.log(blah); // Option 1: ReferenceError: blah is not defined
                   // Option 2: print 'blah' to the console
</pre>

<code>blah</code> will be printed.  With the var keyword omitted, the <code>blah</code> variable goes into the global scope.

<h3>Seven</h3>

<pre class="prettyprint">
// a.js
;(function() {
  function blahFn() {
    return "blah";
  };

  console.log(blahFn()); // Option 1: ReferenceError: blahFn is not defined
                         // Option 2: print 'blah' to the console
})();
</pre>

<code>a.js</code> is loaded.  The anonymous function at the top is invoked, creating our first JavaScript module.  The module instantiates <code>blahFn</code>.  The <code>console.log()</code> invocation prints <code>blah</code> because the code inside a module has a shared scope.

<pre class="prettyprint">
// b.js
console.log(blahFn()); // Option 1: ReferenceError: blahFn is not defined
                       // Option 2: print 'blah' to the console
</pre>

When <code>console.log()</code> is invoked in <code>b.js</code>, a ReferenceError is thrown.  The variables inside the module in <code>a.js</code> are locked away.  The global scope is not polluted.

<h3>Eight</h3>

<pre class="prettyprint">
 // a.js
;(function(exports) {
  var Blah = {};

  Blah.blahFn = function() {
    return "blah";
  };

  exports.Blah = Blah;
})(this);

// b.js
console.log(Blah.blahFn()); // Option 1: ReferenceError: Blah is not defined
                            // Option 2: print 'blah' to the console
</pre>

When the <code>console.log()</code> is invoked, <code>blah</code> is printed.  The module has made itself available as an object in the global scope.  It has also made available one of its variables on this object.

To do this, it made an empty object, <code>Blah</code>, and attached <code>blahFn</code> to it as an attribute.  The anonymous function enclosing the module was passed <code>this</code>.  Because the anonymous function was invoked in the global context, <code>this</code> is the global object, also referenced with <code>window</code>.  The module attached <code>Blah</code> to the <code>exports/global/window</code> object, making it available to the <code>console.log()</code> invocation.

<h3>Nine</h3>

<pre class="prettyprint">
// a.js
(function woo() {
  return function() {
    console.log("woo")
  };
})

// b.js
(function() {
  console.log("boo")
})();
</pre>

What is printed? <code>woo</code> or <code>boo</code>?

It's <code>boo</code>. The code in <code>a.js</code> makes a function called <code>woo</code> and does nothing with it.

In questions seven and eight, both modules were preceded by a semicolon.  Why is this?

Often, a module is put in its own JavaScript file.  Often, JavaScript files that are part of a website are joined together.  This is part of a process to reduce download time.  If you join the <code>a.js</code> and <code>b.js</code> together and then execute that, <code>woo</code> will be printed.  The operation of the boo module was changed by the random code preceding it in the <code>a.js</code> file.  Because the random code in <code>a.js</code> had no semicolon at the end, the parentheses around the boo module invoked the <code>woo</code> function.  This returned the anonymous function inside the <code>woo</code> function which was then invoked by the parentheses sitting at the end of <code>b.js</code>.

Modules protect themselves from these sorts of nightmares with a leading semicolon.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>406</wp:post_id>
		<wp:post_date>2013-04-03 20:32:24</wp:post_date>
		<wp:post_date_gmt>2013-04-03 19:32:24</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-pop-quiz-purporting-to-be-about-scope-in-javascript-that-is-actually-a-polemic-about-why-modules-are-a-good-idea</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Coquette</title>
		<link>http://maryrosecook.com/blog/post/coquette</link>
		<pubDate>Tue, 04 Jun 2013 20:51:02 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=411</guid>
		<description></description>
		<content:encoded><![CDATA[I've just released <a href='http://coquette.maryrosecook.com/'>Coquette</a>, a micro framework for JavaScript games.  It handles collision detection, the game update loop, keyboard input and canvas rendering.  I wrote it in a panic when, two hours before the deadline of April's <a href='http://ludumdare.com'>Ludum Dare</a>, I discovered that entries cannot use closed source library code.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>411</wp:post_id>
		<wp:post_date>2013-06-04 21:51:02</wp:post_date>
		<wp:post_date_gmt>2013-06-04 20:51:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>coquette</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hacker School on Mashable</title>
		<link>http://maryrosecook.com/blog/post/417</link>
		<pubDate>Wed, 26 Jun 2013 14:48:53 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=417</guid>
		<description></description>
		<content:encoded><![CDATA[Mashable interviewed me for <a href='http://mashable.com/2013/06/25/hacker-school/'>this piece about Hacker School</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>417</wp:post_id>
		<wp:post_date>2013-06-26 15:48:53</wp:post_date>
		<wp:post_date_gmt>2013-06-26 14:48:53</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>417</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Little Lisp interpreter</title>
		<link>http://maryrosecook.com/blog/post/little-lisp-interpreter</link>
		<pubDate>Tue, 16 Jul 2013 02:38:59 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=422</guid>
		<description></description>
		<content:encoded><![CDATA[<a href='https://github.com/maryrosecook/littlelisp'>Little Lisp</a> is an interpreter that supports function invocation, lambdas, lets, ifs, numbers, strings, a few library functions, and lists.  I wrote it for a lightning talk at <a href='https://www.hackerschool.com'>Hacker School</a> to show how easy it is to write an interpreter.  The <a href='https://github.com/maryrosecook/littlelisp'>code</a> is 116 lines of JavaScript.  I will explain how it works.

First, let's learn some Lisp.

An atom, the simplest Lisp form:

<pre class="prettyprint">
1
</pre>

Another atom.  This time, a string:

<pre class="prettyprint">
"a"
</pre>

An empty list:

<pre class="prettyprint">
()
</pre>

A list containing an atom:

<pre class="prettyprint">
(1)
</pre>

A list containing two atoms:

<pre class="prettyprint">
(1 2)
</pre>

A list containing an atom and another list:

<pre class="prettyprint">
(1 (2))
</pre>

A function invocation.  This comprises a list where the first element is the function and the rest of the elements are the arguments.  <code>first</code> takes one argument, <code>(1 2)</code>, and returns <code>1</code>.

<pre class="prettyprint">
(first (1 2))

 => 1
</pre>

A lambda.  That is: a function definition.  The lambda takes a parameter, <code>x</code>, and just returns it.

<pre class="prettyprint">
(lambda (x)
 x)
</pre>

A lambda invocation.  This comprises a list where the first element is a lambda and the rest of the elements are the arguments.  The lambda takes one argument, <code>"Lisp"</code>, and returns it.

<pre class="prettyprint">
((lambda (x)
  x)
 "Lisp")

 => "Lisp"
</pre>

Writing a Lisp interpreter is really easy.

The code for Little Lisp has two parts: the parser and the interpreter.

The parser.

Parsing has two phases: tokenizing and parenthesizing.

<code>tokenize()</code> takes a string of Lisp code, puts spaces around every parenthesis and splits on whitespace.  For example, it takes something like <code>((lambda (x) x) "Lisp")</code>, transforms it into <code> ( ( lambda  ( x )  x )  "Lisp" ) </code> and transforms that into <code>['(', '(', 'lambda', '(', 'x', ')', 'x', ')', '"Lisp"', ')']</code>.

<pre class="prettyprint linenums">
 var tokenize = function(input) {
   return input.replace(/\(/g, ' ( ')
               .replace(/\)/g, ' ) ')
               .trim()
               .split(/\s+/);
 };
</pre>

<code>parenthesize()</code> takes the tokens produced by <code>tokenize()</code> and produces a nested array that mimics the structure of the Lisp code.  Each atom in the nested array is labelled as an identifier or a literal.  For example, <code>['(', '(', 'lambda', '(', 'x', ')', 'x', ')', '"Lisp"', ')']</code> is transformed into:

<pre class="prettyprint">
[[{ type: 'identifier', value: 'lambda' }, [{ type: 'identifier', value: 'x' }],
  { type: 'identifier', value: 'x' }],
 { type: 'literal', value: 'Lisp' }]
</pre>

<code>parenthesize()</code> goes through the tokens, one by one.  If the current token is an opening parenthesis, it starts building a new array.  If the current token is an atom, it labels it with its type and appends it to the current array.  If the current token is a closing parenthesis, it stops building the current array and continues building the enclosing array.

<pre class="prettyprint linenums">
 var parenthesize = function(input, list) {
   if (list === undefined) {
     return parenthesize(input, []);
   } else {
     var token = input.shift();
     if (token === undefined) {
       return list.pop();
     } else if (token === "(") {
       list.push(parenthesize(input, []));
      return parenthesize(input, list);
    } else if (token === ")") {
      return list;
    } else {
      return parenthesize(input, list.concat(categorize(token)));
    }
  }
};
</pre>

When <code>parenthesize()</code> is first called, the <code>input</code> parameter contains the array of tokens returned by <code>tokenize()</code>.  For example:

<pre class="prettyprint">
['(', '(', 'lambda', '(', 'x', ')', 'x', ')', '"Lisp"', ')']
</pre>

When <code>parenthesize()</code> is first called, the <code>list</code> parameter is undefined.  Lines 2-3 run and <code>parenthesize()</code> recurses with <code>list</code> set to an empty array.

In the recursion, line 5 runs and removes the first opening parenthesis from <code>input</code>.  Line 9 starts a new, empty list by recursing with a new, empty array.

In the recursion, line 5 runs and removes another opening parenthesis from <code>input</code>.  Line 9 starts another new, empty list by recursing with another new, empty array.

In the recursion, <code>input</code> is <code>['lambda', '(', 'x', ')', 'x', ')', '"Lisp"', ')']</code>.  Line 14 runs with <code>token</code> set to <code>lambda</code>.  It calls <code>categorize()</code> and passes <code>lambda</code> as the <code>input</code> argument.  Line 7 of <code>categorize()</code> runs and  returns an object with <code>type</code> set to <code>identifier</code> and <code>value</code> set to <code>lambda</code>.

<pre class="prettyprint linenums">
 var categorize = function(input) {
   if (!isNaN(parseFloat(input))) {
     return { type:'literal', value: parseFloat(input) };
   } else if (input[0] === '"' && input.slice(-1) === '"') {
     return { type:'literal', value: input.slice(1, -1) };
   } else {
     return { type:'identifier', value: input };
   }
 };
</pre>

Line 14 of <code>parenthesize()</code> appends to <code>list</code> the object returned by <code>categorize()</code> and recurses with the rest of the input and <code>list</code>.

<pre class="prettyprint linenums">
 var parenthesize = function(input, list) {
   if (list === undefined) {
     return parenthesize(input, []);
   } else {
     var token = input.shift();
     if (token === undefined) {
       return list.pop();
     } else if (token === "(") {
       list.push(parenthesize(input, []));
      return parenthesize(input, list);
    } else if (token === ")") {
      return list;
    } else {
      return parenthesize(input, list.concat(categorize(token)));
    }
  }
};
</pre>

In the recursion, the next token is a parenthesis.  Line 9 of <code>parenthesize()</code> starts a new, empty list by recursing with an empty array.  In the recursion, <code>input</code> is <code>['x', ')', 'x', ')', '"Lisp"', ')']</code>.  Line 14 runs with <code>token</code> set to <code>x</code>.  It makes a new object with a value of <code>x</code> and a type of <code>identifier</code>.  It appends this object to <code>list</code> and recurses.

In the recursion, the next token is a closing parenthesis.  Line 12 runs and returns the completed <code>list</code>: <code>[{ type: 'identifier', value: 'x' }]</code>.

<code>parenthesize()</code> continues recursing until it has processed all of the input tokens.  It returns the nested array of typed atoms.

<code>parse()</code> is the successive application of <code>tokenize()</code> and <code>parenthesize()</code>:

<pre class="prettyprint linenums">
 var parse = function(input) {
   return parenthesize(tokenize(input));
 };
</pre>

Given a starting input of <code>((lambda (x) x) "Lisp")</code>, the final output of the parser is:

<pre class="prettyprint">
[[{ type: 'identifier', value: 'lambda' }, [{ type: 'identifier', value: 'x' }],
  { type: 'identifier', value: 'x' }],
 { type: 'literal', value: 'Lisp' }]
</pre>

The interpreter.

After parsing is complete, interpreting begins.

<code>interpret()</code> receives the output of <code>parse()</code> and executes it.  Given the output from the parsing example above, <code>interpret()</code> would construct a lambda and invoke it with the argument <code>"Lisp"</code>.  The lambda invocation would return <code>"Lisp"</code>, which would be the output of the whole program.

As well as the input to execute, <code>interpret()</code> receives an execution context.  This is the place where variables and their values are stored.  When a piece of Lisp code is executed by <code>interpret()</code>, the execution context contains the variables that are accessible to that code.

These variables are stored in a hierarchy.  Variables in the current scope are at the bottom of the hierarchy.  Variables in the enclosing scope are in the level above.  Variables in the scope enclosing the enclosing scope are in the level above that.  And so on.  For example, in the following code:

<pre class="prettyprint linenums">
 ((lambda (a)
   ((lambda (b)
     (b a))
    "b"))
  "a")
</pre>

On line 3, the execution context has two active scopes.  The inner lambda forms the current scope.  The outer lambda forms an enclosing scope.   The current scope has <code>b</code> bound to <code>"b"</code>.  The enclosing scope has <code>a</code> bound to <code>"a"</code>.  When line 3 runs, the interpreter tries to look up <code>b</code> in the context.  It checks the current scope, finds <code>b</code> and returns its value.  Still on line 3, the interpreter tries to look up <code>a</code>.  It checks the current scope and does not find <code>a</code>, so it tries the enclosing scope.  There, it finds <code>a</code> and returns its value.

In Little Lisp, the execution context is modeled with an object made by calling the <code>Context</code> constructor.  This takes <code>scope</code>, an object that contains variables and their values in the current scope.  And it takes <code>parent</code>.  If <code>parent</code> is <code>undefined</code>, the scope is the top, or global, or outermost one.

<pre class="prettyprint linenums">
 var Context = function(scope, parent) {
   this.scope = scope;
   this.parent = parent;

   this.get = function(identifier) {
     if (identifier in this.scope) {
       return this.scope[identifier];
     } else if (this.parent !== undefined) {
       return this.parent.get(identifier);
    }
  };
};
</pre>

We have seen how <code>((lambda (x) x) "Lisp")</code> gets parsed.  Let us see how the parsed code gets executed.

<pre class="prettyprint linenums">
 var interpret = function(input, context) {
   if (context === undefined) {
     return interpret(input, new Context(library));
   } else if (input instanceof Array) {
     return interpretList(input, context);
   } else if (input.type === "identifier") {
     return context.get(input.value);
   } else {
     return input.value;
  }
};
</pre>

The first time <code>interpret()</code> is called, <code>context</code> is <code>undefined</code>.  Lines 2-3 are run to make an execution context.

When the initial context is instantiated, the constructor function takes the <code>library</code> object.  This contains the functions built in to the language: <code>first</code>, <code>rest</code> and <code>print</code>.  These functions are written in JavaScript.

<code>interpret()</code> recurses with the original <code>input</code> and the new <code>context</code>.

<code>input</code> contains the full example output from the parsing section:

<pre class="prettyprint">
[[{ type: 'identifier', value: 'lambda' }, [{ type: 'identifier', value: 'x' }],
  { type: 'identifier', value: 'x' }],
 { type: 'literal', value: 'Lisp' }]
</pre>

Because <code>input</code> is an array and <code>context</code> is defined, lines 4-5 are run and <code>interpretList()</code> is called.

<pre class="prettyprint linenums">
 var interpretList = function(input, context) {
   if (input.length > 0 && input[0].value in special) {
     return special[input[0].value](input, context);
   } else {
     var list = input.map(function(x) { return interpret(x, context); });
     if (list[0] instanceof Function) {
       return list[0].apply(undefined, list.slice(1));
     } else {
       return list;
    }
  }
};
</pre>

In <code>interpretList()</code>, line 5 maps over the input array and calls <code>interpret()</code> on each element.  When <code>interpret()</code> is called on the lambda definition, <code>interpretList()</code> gets called again.  This time, the <code>input</code> argument to <code>interpretList()</code> is:

<pre class="prettyprint">
[{ type: 'identifier', value: 'lambda' }, [{ type: 'identifier', value: 'x' }],
  { type: 'identifier', value: 'x' }]
</pre>

Line 3 of <code>interpretList()</code> gets called, because <code>lambda</code>, the first element in the array, is a special form.  <code>special.lambda()</code> is called to create the lambda function.

<pre class="prettyprint linenums">
 var special = {
   lambda: function(input, context) {
     return function() {
       var lambdaArguments = arguments;
       var lambdaScope = input[1].reduce(function(acc, x, i) {
         acc[x.value] = lambdaArguments[i];
         return acc;
       }, {});
 
      return interpret(input[2], new Context(lambdaScope, context));
    };
  }
};
</pre>

<code>special.lambda()</code> takes the part of the input that defines the lambda.  It returns a function that, when invoked, invokes the lambda on some arguments.

Line 3 begins the definition of the lambda invocation function.  Line 4 stores the arguments passed to the lambda invocation.  Line 5 starts creating a new scope for the lambda's invocation.  It reduces over the part of the input that defines the parameters of the lambda: <code>[{ type: 'identifier', value: 'x' }]</code>.  It adds a key/value pair to the lambda scope for each lambda parameter in <code>input</code> and argument passed to the lambda.  Line 10 invokes the lambda by calling <code>interpret()</code> on the lambda body: <code>{ type: 'identifier', value: 'x' }</code>.  It passes in the lambda context that contains the lambda's scope and the parent context.

The lambda is now represented by the function returned by <code>special.lambda()</code>.

<code>interpretList()</code> continues mapping over the <code>input</code> array by calling <code>interpret()</code> on the second element of the list: the <code>"Lisp"</code> string.

<pre class="prettyprint linenums">
 var interpret = function(input, context) {
   if (context === undefined) {
     return interpret(input, new Context(library));
   } else if (input instanceof Array) {
     return interpretList(input, context);
   } else if (input.type === "identifier") {
     return context.get(input.value);
   } else {
     return input.value;
  }
};
</pre>

This runs line 9 of <code>interpret()</code> which just returns the <code>value</code> attribute of the literal object: <code>'Lisp'</code>.  The map operation on line 5 of <code>interpretList()</code> is complete.  <code>list</code> is:

<pre class="prettyprint">
[function(args) { /* code to invoke lambda */ },
 'Lisp']
</pre>

Line 6 of <code>interpretList()</code> runs and finds that the first element of <code>list</code> is a JavaScript function.  This means that the list is an invocation.  Line 7 runs and invokes the lambda, passing the rest of <code>list</code> as arguments.

<pre class="prettyprint linenums">
 var interpretList = function(input, context) {
   if (input.length > 0 && input[0].value in special) {
     return special[input[0].value](input, context);
   } else {
     var list = input.map(function(x) { return interpret(x, context); });
     if (list[0] instanceof Function) {
       return list[0].apply(undefined, list.slice(1));
     } else {
       return list;
    }
  }
};
</pre>

In the lambda invocation function, line 8 calls <code>interpret()</code> on the lambda body, <code>{ type: 'identifier', value: 'x' }</code>.

<pre class="prettyprint linenums">
 function() {
   var lambdaArguments = arguments;
   var lambdaScope = input[1].reduce(function(acc, x, i) {
     acc[x.value] = lambdaArguments[i];
     return acc;
   }, {});

   return interpret(input[2], new Context(lambdaScope, context));
 };
</pre>

Line 6 of <code>interpret()</code> finds that <code>input</code> is an identifier atom.  Line 7 looks up the identifier, <code>x</code>, in <code>context</code> and returns <code>'Lisp'</code>.

<pre class="prettyprint linenums">
 var interpret = function(input, context) {
   if (context === undefined) {
     return interpret(input, new Context(library));
   } else if (input instanceof Array) {
     return interpretList(input, context);
   } else if (input.type === "identifier") {
     return context.get(input.value);
   } else {
     return input.value;
  }
};
</pre>

<code>'Lisp'</code> is returned by the lambda invocation function, which is returned by <code>interpretList()</code>, which is returned by <code>interpret()</code>, and that's it.

Go to the <a href='https://github.com/maryrosecook/littlelisp'>GitHub repository</a> to see all the code.  And look at <a href='http://norvig.com/lispy.html'>lis.py</a>, the dazzlingly simple Scheme interpreter that Peter Norvig wrote in Python.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>422</wp:post_id>
		<wp:post_date>2013-07-16 03:38:59</wp:post_date>
		<wp:post_date_gmt>2013-07-16 02:38:59</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>little-lisp-interpreter</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Moonface, live in Brooklyn</title>
		<link>http://maryrosecook.com/blog/post/moonface-live-in-brooklyn</link>
		<pubDate>Sat, 09 Nov 2013 06:30:45 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=425</guid>
		<description></description>
		<content:encoded><![CDATA[In May, I went to the barren warehouse district in Carroll Gardens in Brooklyn to see <a href='http://www.moonface.ca/'>Moonface</a>, Spencer Krug's latest music project.  I walked there from my friend Dave's house, along wide pavements that contained nothing - no people, no benches, no parked cars, no bins, no street lights - along streets that were bordered by buildings with walls painted solid, chalky red, over a little bridge where, half way across, I could see down the canal in one of those weird long views that I used to see when I walked over the bridges in Berlin as the sun came up, one of those views you only get when you are half way across one of the numbered avenues in Manhattan, view clear for streets and streets, the sky not blocked but framed by buildings.

I arrived at the venue.  Spencer Krug came on.  It was just him and a piano.  He sat down on the stool with a glass of what, based on the colour and volume, looked like apple juice, but was more likely to be a really very huge drink of whiskey.

He said, "I'm going to play some new songs tonight."  Most of what he played appears on his new album, "Julia With Blue Jeans On".

The first song was about a drive he and a friend took across the US.  It was about how they missed their exit because they were so engrossed in their conversation about their ex-girlfriends.

The second song had three sections.  They corresponded to "Barbarian", "Everyone is Noah, Everyone is the Ark" and "Barbarian II" on his new record.  The first section was based around a persistent seesaw interval on the beautiful low notes of the piano.  Spencer Krug sang, "I asked you where you want to be buried, and you asked me the name of the town where I was born."  He sang, "I am a barbarian, sometimes", and tears came to my eyes.

The second section was, notionally, about Noah and the Ark.  This section, and its relationship to the rest of the song, was an excellent summary of Spencer Krug's entire musical catalogue.  A stream of new melodies that beget more new melodies that beget more new melodies.  Extended metaphors that, like Bob Dylan ("Yes, to dance beneath the diamond sky with one hand waving free,  silhouetted by the sea, circled by the circus sands, with all memory and fate driven deep beneath the waves, let me forget about today until tomorrow") combine the fantastical and the corporeal, and use the everyday details as a way to let the listener into the abstract flights of fancy: "If I am an animal I am one of the few that is self destructive.  I have chewed through my beautiful muscle, I have chewed through my beautiful narrative to get out of Canada and into your door."

But there are new elements, too.  The third section of the song was a reprise.  The seesaw interval and the barbarian and the tender burial wishes all came back.

The third song followed the same structure as the second: the first section introducing the themes, the second section going off into the wild, before leading into the third section's reprise.  Krug really let go at this point, bellowing, "Someone's been writing your name all over the walls", and singing "Love me for the way I used to be.  Or, love me for the way that the skin tore open."  This song, "Love the House You're In", is on the album, but, strangely, this third part of the song is not.

He said, "Last night I played at, uh, Hamilton University about four and a half hours north of here in upstate New York.  And there was literally a toga party going on in the same room.  At one point, a woman went by in a shopping cart pushed by her friends.  So, this is nicer."

He began the fourth song by saying, "So, a lot of these are cheesy love songs and this is another one."  He ended it with a sheepish shrug of his shoulders.

He said, "It's getting hot, better strip down", and began taking off his shirt.  Some people whooped and he said, "There's a t-shirt under here, Ladies."  He paused.  "This isn't Hamilton University."

The fifth song showed another new element of Spencer Krug's music.  He seems to have become a really excellent pianist.  There are syncopations, trills, off-rhythm rolls that build to far more complex constructions than the medieval marching music of his keyboard playing for Sunset Rubdown and Wolf Parade.  The instrumentals have elongated and become as important and complex as the parts with singing.

The seventh song was really very charming.  "I'd say the only word worth singing is a name.  I'd say the only name worth singing is not God, it's you.  Julia.  As beautiful and simple as the sun.  Julia with blue jeans on.  I see you there, at the bottom of the stairs."

The eighth and ninth songs, the last two he played, are, most regrettably, not on his album.

Before beginning the eighth song, Krug said, "This is about moving to Helsinki. It's about a few other things too."  It includes the lines, "I didn't know that my old life would become a swarm of swallows thinning out against the Aurora Borealis.  That's right, I said, 'A swarm of swallows thinning out against the Aurora Borealis'." Nine months ago, I moved to New York from England.  The swarm of swallows thinning out describes perfectly the feeling of the past slipping away to leave only a future.

The ninth song was a rolling mass.  For ten minutes, it got faster and more reckless and more glorious.  It went, "There is a an ageing arm across a naked waist.  There is a fallen tree against a perfect January snow.  And that's as spiritual as I need to be." And, "Breakwater to the sea, just strong enough to hold back the waves as they roll in.  And I should have told you sooner that I'll be relying on you, baby.  And I should have told you sooner I think you're just like me.  And I guess I should have told you I am sometimes just an arm hanging out a window on the highway in the sun.  Or a fallen tree against a January snowbank.  Or a break water to the sea."

What this doesn't convey, what lyrics never convey, is the way all this felt as the music got faster and faster and faster and faster, taking the thematic repetitions and rolling them up into something so rich it was almost unbearable.

I recorded the set on the shitty speaker on my phone.  I have listened to the tinny mp3s countless times over the last six months.  I have not been able to get the gig out of my head.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>425</wp:post_id>
		<wp:post_date>2013-11-09 07:30:45</wp:post_date>
		<wp:post_date_gmt>2013-11-09 06:30:45</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>moonface-live-in-brooklyn</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[moonface-at-cargo-in-brooklyn]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A practical introduction to functional programming</title>
		<link>http://maryrosecook.com/blog/post/a-practical-introduction-to-functional-programming</link>
		<pubDate>Fri, 08 Nov 2013 21:08:20 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=426</guid>
		<description></description>
		<content:encoded><![CDATA[Many functional programming articles teach abstract functional techniques.  That is, composition, pipelining, higher order functions.  This one is different.  It shows examples of imperative, unfunctional code that people write every day and translates these examples to a functional style.

The first section of the article takes short, data transforming loops and translates them into functional maps and reduces.  The second section takes longer loops, breaks them up into units and makes each unit functional.  The third section takes a loop that is a long series of successive data transformations and decomposes it into a functional pipeline.

The examples are in Python, because many people find Python easy to read.  A number of the examples eschew pythonicity in order to demonstrate functional techniques common to many languages: map, reduce, pipeline.

<h3>A guide rope</h3>

When people talk about functional programming, they mention a dizzying number of "functional" characteristics.  They mention immutable data<sup>1</sup>, first class functions<sup>2</sup> and tail call optimisation<sup>3</sup>.  These are language features that aid functional programming.  They mention mapping, reducing, pipelining, recursing, currying<sup>4</sup> and the use of higher order functions.  These are programming techniques used to write functional code.  They mention parallelization<sup>5</sup>, lazy evaluation<sup>6</sup> and determinism<sup>7</sup>.  These are advantageous properties of functional programs.

Ignore all that.  Functional code is characterised by one thing: the absence of side effects.  It doesn't rely on data outside the current function, and it doesn't change data that exists outside the current function.  Every other "functional" thing can be derived from this property.  Use it as a guide rope as you learn.

This is an unfunctional function:

<pre class="prettyprint">
a = 0
def increment1():
    global a
    a += 1
</pre>

This is a functional function:

<pre class="prettyprint">
def increment2(a):
    return a + 1
</pre>

<h3>Don't iterate over lists.  Use map and reduce.</h3>

<h4>Map</h4>

Map takes a function and a collection of items.  It makes a new, empty collection, runs the function on each item in the original collection and inserts each return value into the new collection.  It returns the new collection.

This is a simple map that takes a list of names and returns a list of the lengths of those names:

<pre class="prettyprint">
name_lengths = map(len, ["Mary", "Isla", "Sam"])

print name_lengths
# => [4, 4, 3]
</pre>

This is a map that squares every number in the passed collection:

<pre class="prettyprint">
squares = map(lambda x: x * x, [0, 1, 2, 3, 4])

print squares
# => [0, 1, 4, 9, 16]
</pre>

This map doesn't take a named function.  It takes an anonymous, inlined function defined with <code>lambda</code>.  The parameters of the lambda are defined to the left of the colon.  The function body is defined to the right of the colon.  The result of running the function body is (implicitly) returned.

The unfunctional code below takes a list of real names and replaces them with randomly assigned code names.

<pre class="prettyprint">
import random

names = ['Mary', 'Isla', 'Sam']
code_names = ['Mr. Pink', 'Mr. Orange', 'Mr. Blonde']

for i in range(len(names)):
    names[i] = random.choice(code_names)

print names
# => ['Mr. Blonde', 'Mr. Blonde', 'Mr. Blonde']
</pre>

(As you can see, this algorithm can potentially assign the same secret code name to multiple secret agents.  Hopefully, this won't be a source of confusion during the secret mission.)

This can be rewritten as a map:

<pre class="prettyprint">
import random

names = ['Mary', 'Isla', 'Sam']

secret_names = map(lambda x: random.choice(['Mr. Pink',
                                            'Mr. Orange',
                                            'Mr. Blonde']),
                   names)
</pre>


<strong>Exercise 1</strong>. Try rewriting the code below as a map.  It takes a list of real names and replaces them with code names produced using a more robust strategy.

<pre class="prettyprint">
names = ['Mary', 'Isla', 'Sam']

for i in range(len(names)):
    names[i] = hash(names[i])

print names
# => [6306819796133686941, 8135353348168144921, -1228887169324443034]
</pre>

(Hopefully, the secret agents will have good memories and won't forget each other's secret code names during the secret mission.)

My solution:

<pre class="prettyprint">
names = ['Mary', 'Isla', 'Sam']

secret_names = map(hash, names)
</pre>

<h4>Reduce</h4>

Reduce takes a function and a collection of items.  It returns a value that is created by combining the items.

This is a simple reduce.  It returns the sum of all the items in the collection.

<pre class="prettyprint">
sum = reduce(lambda a, x: a + x, [0, 1, 2, 3, 4])

print sum
# => 10
</pre>

<code>x</code> is the current item being iterated over.  <code>a</code> is the accumulator.  It is the value returned by the execution of the lambda on the previous item.  <code>reduce()</code> walks through the items.  For each one, it runs the lambda on the current <code>a</code> and <code>x</code> and returns the result as the <code>a</code> of the next iteration.

What is <code>a</code> in the first iteration? There is no previous iteration result for it to pass along.  <code>reduce()</code> uses the first item in the collection for <code>a</code> in the first iteration and starts iterating at the second item.  That is, the first <code>x</code> is the second item.

This code counts how often the word <code>'Sam'</code> appears in a list of strings:

<pre class="prettyprint">
sentences = ['Mary read a story to Sam and Isla.',
             'Isla cuddled Sam.',
             'Sam chortled.']

sam_count = 0
for sentence in sentences:
    sam_count += sentence.count('Sam')

print sam_count
# => 3
</pre>

This is the same code written as a reduce:

<pre class="prettyprint">
sentences = ['Mary read a story to Sam and Isla.',
             'Isla cuddled Sam.',
             'Sam chortled.']

sam_count = reduce(lambda a, x: a + x.count('Sam'),
                   sentences,
                   0)
</pre>

How does this code come up with its initial <code>a</code>? The starting point for the number of incidences of <code>'Sam'</code> cannot be <code>'Mary read a story to Sam and Isla.'</code>  The initial accumulator is specified with the third argument to <code>reduce()</code>.  This allows the use of a value of a different type from the items in the collection.

Why are map and reduce better?

First, they are often one-liners.

Second, the important parts of the iteration - the collection, the operation and the return value - are always in the same places in every map and reduce.

Third, the code in a loop may affect variables defined before it or code that runs after it.  By convention, maps and reduces are functional.

Fourth, map and reduce are elemental operations.  Every time a person reads a <code>for</code> loop, they have to work through the logic line by line.  There are few structural regularities they can use to create a scaffolding on which to hang their understanding of the code.  In contrast, map and reduce are at once building blocks that can be combined into complex algorithms, and elements that the code reader can instantly understand and abstract in their mind.  "Ah, this code is transforming each item in this collection.  It's throwing some of the transformations away.  It's combining the remainder into a single output."

Fifth, map and reduce have many friends that provide useful, tweaked versions of their basic behaviour.  For example: <code>filter</code>, <code>all</code>, <code>any</code> and <code>find</code>.

<strong>Exercise 2</strong>.  Try rewriting the code below using map, reduce and filter.  Filter takes a function and a collection.  It returns a collection of every item for which the function returned <code>True</code>.

<pre class="prettyprint">
people = [{'name': 'Mary', 'height': 160},
          {'name': 'Isla', 'height': 80},
          {'name': 'Sam'}]

height_total = 0
height_count = 0
for person in people:
    if 'height' in person:
        height_total += person['height']
        height_count += 1

if height_count > 0:
    average_height = height_total / height_count

    print average_height
    # => 120
</pre>

If this seems tricky, try not thinking about the operations on the data.  Think of the states the data will go through, from the list of people dictionaries to the average height.  Don't try and bundle multiple transformations together.  Put each on a separate line and assign the result to a descriptively-named variable.  Once the code works, condense it.

My solution:

<pre class="prettyprint">
people = [{'name': 'Mary', 'height': 160},
          {'name': 'Isla', 'height': 80},
          {'name': 'Sam'}]

heights = map(lambda x: x['height'],
              filter(lambda x: 'height' in x, people))

if len(heights) > 0:
    from operator import add
    average_height = reduce(add, heights) / len(heights)
</pre>

<h3>Write declaratively, not imperatively</h3>

The program below runs a race between three cars.  At each time step, each car may move forwards or it may stall.  At each time step, the program prints out the paths of the cars so far.  After five time steps, the race is over.

This is some sample output:

<pre class="prettyprint">
-
--
--

--
--
---

---
--
---

----
---
----

----
----
-----
</pre>

This is the program:

<pre class="prettyprint">
from random import random

time = 5
car_positions = [1, 1, 1]

while time:
    # decrease time
    time -= 1

    print ''
    for i in range(len(car_positions)):
        # move car
        if random() > 0.3:
            car_positions[i] += 1

        # draw car
        print '-' * car_positions[i]
</pre>

The code is written imperatively.  A functional version would be declarative.  It would describe what to do, rather than how to do it.

<h4>Use functions</h4>

A program can be made more declarative by bundling pieces of the code into functions.

<pre class="prettyprint">
from random import random

def move_cars():
    for i, _ in enumerate(car_positions):
        if random() > 0.3:
            car_positions[i] += 1

def draw_car(car_position):
    print '-' * car_position

def run_step_of_race():
    global time
    time -= 1
    move_cars()

def draw():
    print ''
    for car_position in car_positions:
        draw_car(car_position)

time = 5
car_positions = [1, 1, 1]

while time:
    run_step_of_race()
    draw()
</pre>

To understand this program, the reader just reads the main loop.  "If there is time left, run a step of the race and draw.  Check the time again."  If the reader wants to understand more about what it means to run a step of the race, or draw, they can read the code in those functions.

There are no comments any more.  The code describes itself.

Splitting code into functions is a great, low brain power way to make code more readable.

This technique uses functions, but it uses them as sub-routines. They parcel up code.  The code is not functional in the sense of the guide rope.  The functions in the code use state that was not passed as arguments.  They affect the code around them by changing external variables, rather than by returning values.  To check what a function really does, the reader must read each line carefully.  If they find an external variable, they must find its origin.  They must see what other functions change that variable.

<h4>Remove state</h4>

This is a functional version of the car race code:

<pre class="prettyprint">
from random import random

def move_cars(car_positions):
    return map(lambda x: x + 1 if random() > 0.3 else x,
               car_positions)

def output_car(car_position):
    return '-' * car_position

def run_step_of_race(state):
    return {'time': state['time'] - 1,
            'car_positions': move_cars(state['car_positions'])}

def draw(state):
    print ''
    print '\n'.join(map(output_car, state['car_positions']))

def race(state):
    draw(state)
    if state['time']:
        race(run_step_of_race(state))

race({'time': 5,
      'car_positions': [1, 1, 1]})
</pre>

The code is still split into functions, but the functions are functional.  There are three signs of this.  First, there are no longer any shared variables.  <code>time</code> and <code>car_positions</code> get passed straight into <code>race()</code>.  Second, functions take parameters.  Third, no variables are instantiated inside functions.  All data changes are done with return values.  <code>race()</code> recurses<sup>3</sup> with the result of <code>run_step_of_race()</code>.  Each time a step generates a new state, it is passed immediately into the next step.

Now, here are two functions, <code>zero()</code> and <code>one()</code>:

<pre class="prettyprint">
def zero(s):
    if s[0] == "0":
        return s[1:]

def one(s):
    if s[0] == "1":
        return s[1:]
</pre>

<code>zero()</code> takes a string, <code>s</code>.  If the first character is <code>'0'</code>, it returns the rest of the string.  If it is not, it returns <code>None</code>, the default return value of Python functions.  <code>one()</code> does the same, but for a first character of <code>'1'</code>.

Imagine a function called <code>rule_sequence()</code>.  It takes a string and a list of rule functions of the form of <code>zero()</code> and <code>one()</code>.  It calls the first rule on the string.  Unless <code>None</code> is returned, it takes the return value and calls the second rule on it.  Unless <code>None</code> is returned, it takes the return value and calls the third rule on it.  And so forth.  If any rule returns <code>None</code>, <code>rule_sequence()</code> stops and returns <code>None</code>.  Otherwise, it returns the return value of the final rule.

This is some sample input and output:

<pre class="prettyprint">
print rule_sequence('0101', [zero, one, zero])
# => 1

print rule_sequence('0101', [zero, zero])
# => None
</pre>

This is the imperative version of <code>rule_sequence()</code>:

<pre class="prettyprint">
def rule_sequence(s, rules):
    for rule in rules:
        s = rule(s)
        if s == None:
            break

    return s
</pre>

<strong>Exercise 3</strong>.  The code above uses a loop to do its work.   Make it more declarative by rewriting it as a recursion.

My solution:

<pre class="prettyprint">
def rule_sequence(s, rules):
    if s == None or not rules:
        return s
    else:
        return rule_sequence(rules[0](s), rules[1:])
</pre>

<h3>Use pipelines</h3>

In the previous section, some imperative loops were rewritten as recursions that called out to auxiliary functions.  In this section, a different type of imperative loop will be rewritten using a technique called a pipeline.

The loop below performs transformations on dictionaries that hold the name, incorrect country of origin and active status of some bands.

<pre class="prettyprint">
bands = [{'name': 'sunset rubdown', 'country': 'UK', 'active': False},
         {'name': 'women', 'country': 'Germany', 'active': False},
         {'name': 'a silver mt. zion', 'country': 'Spain', 'active': True}]

def format_bands(bands):
    for band in bands:
        band['country'] = 'Canada'
        band['name'] = band['name'].replace('.', '')
        band['name'] = band['name'].title()

format_bands(bands)

print bands
# => [{'name': 'Sunset Rubdown', 'active': False, 'country': 'Canada'},
#     {'name': 'Women', 'active': False, 'country': 'Canada' },
#     {'name': 'A Silver Mt Zion', 'active': True, 'country': 'Canada'}]
</pre>

Worries are stirred by the name of the function.  "format" is very vague.  Upon closer inspection of the code, these worries begin to claw.  Three things happen in the same loop.  The <code>'country'</code> key gets set to <code>'Canada'</code>.  Punctuation is removed from the band name.  The band name gets capitalized.  It is hard to tell what the code is intended to do and hard to tell if it does what it appears to do.  The code is hard to reuse, hard to test and hard to parallelize.

Compare it with this:

<pre class="prettyprint">
print pipeline_each(bands, [set_canada_as_country,
                            strip_punctuation_from_name,
                            capitalize_names])
</pre>

This code is easy to understand.  It gives the impression that the auxiliary functions are functional because they seem to be chained together.  The output from the previous one comprises the input to the next.  If they are functional, they are easy to verify.  They are also easy to reuse, easy to test and easy to parallelize.

The job of <code>pipeline_each()</code> is to pass the bands, one at a time, to a transformation function, like <code>set_canada_as_country()</code>.  After the function has been applied to all the bands, <code>pipeline_each()</code> bundles up the transformed bands.  Then, it passes each one to the next function.

Let's look at the transformation functions.

<pre class="prettyprint">
def assoc(_d, key, value):
    from copy import deepcopy
    d = deepcopy(_d)
    d[key] = value
    return d

def set_canada_as_country(band):
    return assoc(band, 'country', "Canada")

def strip_punctuation_from_name(band):
    return assoc(band, 'name', band['name'].replace('.', ''))

def capitalize_names(band):
    return assoc(band, 'name', band['name'].title())
</pre>

Each one associates a key on a band with a new value.  There is no easy way to do this without mutating the original band.  <code>assoc()</code> solves this problem by using <code>deepcopy()</code> to produce a copy of the passed dictionary.  Each transformation function makes its modification to the copy and returns that copy.

Everything seems fine.  Band dictionary originals are protected from mutation when a key is associated with a new value.  But there are two other potential mutations in the code above.  In <code>strip_punctuation_from_name()</code>, the unpunctuated name is generated by calling <code>replace()</code> on the original name.  In <code>capitalize_names()</code>, the capitalized name is generated by calling <code>title()</code> on the original name.  If <code>replace()</code> and <code>title()</code> are not functional,  <code>strip_punctuation_from_name()</code> and <code>capitalize_names()</code> are not functional.

Fortunately, <code>replace()</code> and <code>title()</code> do not mutate the strings they operate on.  This is because strings are immutable in Python.  When, for example, <code>replace()</code> operates on a band name string, the original band name is copied and <code>replace()</code> is called on the copy.  Phew.

This contrast between the mutability of strings and dictionaries in Python illustrates the appeal of languages like Clojure.  The programmer need never think about whether they are mutating data.  They aren't.

<strong>Exercise 4</strong>.  Try and write the <code>pipeline_each</code> function.  Think about the order of operations.  The bands in the array are passed, one band at a time, to the first transformation function.  The bands in the resulting array are passed, one band at a time, to the second transformation function.  And so forth.

My solution:

<pre class="prettyprint">
def pipeline_each(data, fns):
    return reduce(lambda a, x: map(x, a),
                  fns,
                  data)
</pre>

All three transformation functions boil down to making a change to a particular field on the passed band.  <code>call()</code> can be used to abstract that.  It takes a function to apply and the key of the value to apply it to.

<pre class="prettyprint">
set_canada_as_country = call(lambda x: 'Canada', 'country')
strip_punctuation_from_name = call(lambda x: x.replace('.', ''), 'name')
capitalize_names = call(str.title, 'name')

print pipeline_each(bands, [set_canada_as_country,
                            strip_punctuation_from_name,
                            capitalize_names])
</pre>

Or, if we are willing to sacrifice readability for conciseness, just:

<pre class="prettyprint">
print pipeline_each(bands, [call(lambda x: 'Canada', 'country'),
                            call(lambda x: x.replace('.', ''), 'name'),
                            call(str.title, 'name')])
</pre>

The code for <code>call()</code>:

<pre class="prettyprint">
def assoc(_d, key, value):
    from copy import deepcopy
    d = deepcopy(_d)
    d[key] = value
    return d

def call(fn, key):
    def apply_fn(record):
        return assoc(record, key, fn(record.get(key)))
    return apply_fn
</pre>

There is a lot going on here.  Let's take it piece by piece.

One.  <code>call()</code> is a higher order function.  A higher order function takes a function as an argument, or returns a function.  Or, like <code>call()</code>, it does both.

Two.  <code>apply_fn()</code> looks very similar to the three transformation functions.  It takes a record (a band).  It looks up the value at <code>record[key]</code>.  It calls <code>fn</code> on that value.  It assigns the result back to a copy of the record.  It returns the copy.

Three.  <code>call()</code> does not do any actual work.  <code>apply_fn()</code>, when called, will do the work.  In the example of using <code>pipeline_each()</code> above, one instance of <code>apply_fn()</code> will set <code>'country'</code> to <code>'Canada'</code> on a passed band.  Another instance will capitalize the name of a passed band.

Four.  When an <code>apply_fn()</code> instance is run, <code>fn</code> and <code>key</code> will not be in scope.  They are neither arguments to <code>apply_fn()</code>, nor locals inside it.  But they will still be accessible.  When a function is defined, it saves references to the variables it closes over: those that were defined in a scope outside the function and that are used inside the function.  When the function is run and its code references a variable, Python looks up the variable in the locals and in the arguments.  If it doesn't find it there, it looks in the saved references to closed over variables.  This is where it will find <code>fn</code> and <code>key</code>.

Five.  There is no mention of bands in the <code>call()</code> code.  That is because <code>call()</code> could be used to generate pipeline functions for any program, regardless of topic.  Functional programming is partly about building up a library of generic, reusable, composable functions.

Good job.  Closures, higher order functions and variable scope all covered in the space of a few paragraphs.  Have a nice glass of lemonade.

There is one more piece of band processing to do.  That is to remove everything but the name and country.  <code>extract_name_and_country()</code> can pull that information out:

<pre class="prettyprint">
def extract_name_and_country(band):
    plucked_band = {}
    plucked_band['name'] = band['name']
    plucked_band['country'] = band['country']
    return plucked_band

print pipeline_each(bands, [call(lambda x: 'Canada', 'country'),
                            call(lambda x: x.replace('.', ''), 'name'),
                            call(str.title, 'name'),
                            extract_name_and_country])

# => [{'name': 'Sunset Rubdown', 'country': 'Canada'},
#     {'name': 'Women', 'country': 'Canada'},
#     {'name': 'A Silver Mt Zion', 'country': 'Canada'}]
</pre>

<code>extract_name_and_country()</code> could have been written as a generic function called <code>pluck()</code>.  <code>pluck()</code> would be used like this:

<pre class="prettyprint">
print pipeline_each(bands, [call(lambda x: 'Canada', 'country'),
                            call(lambda x: x.replace('.', ''), 'name'),
                            call(str.title, 'name'),
                            pluck(['name', 'country'])])
</pre>

<strong>Exercise 5</strong>. <code>pluck()</code> takes a list of keys to extract from each record.  Try and write it.  It will need to be a higher order function.

My solution:

<pre class="prettyprint">
def pluck(keys):
    def pluck_fn(record):
        return reduce(lambda a, x: assoc(a, x, record[x]),
                      keys,
                      {})
    return pluck_fn
</pre>

<h3>What now?</h3>

Functional code co-exists very well with code written in other styles.  The transformations in this article can be applied to any code base in any language.  Try applying them to your own code.

Think of Mary, Isla and Sam.  Turn iterations of lists into maps and reduces.

Think of the race.  Break code into functions.  Make those functions functional.  Turn a loop that repeats a process into a recursion.

Think of the bands.  Turn a sequence of operations into a pipeline.

<br/>

<sup>1</sup> An immutable piece of data is one that cannot be changed.  Some languages, like Clojure, make all values immutable by default.  Any "mutating" operations copy the value, change it and pass back the changed copy.  This eliminates bugs that arise from a programmer's incomplete model of the possible states their program may enter.

<sup>2</sup> Languages that support first class functions allow functions to be treated like any other value.  This means they can be created, passed to functions, returned from functions and stored inside data structures.

<sup>3</sup> Tail call optimisation is a programming language feature.  Each time a function recurses, a new stack frame is created.  A stack frame is used to store the arguments and local values for the current function invocation.  If a function recurses a large number of times, it is possible for the interpreter or compiler to run out of memory.  Languages with tail call optimisation reuse the same stack frame for their entire sequence of recursive calls.  Languages like Python that do not have tail call optimisation generally limit the number of times a function may recurse to some number in the thousands.  In the case of the <code>race()</code> function, there are only five time steps, so it is safe.

<sup>4</sup> Currying means decomposing a function that takes multiple arguments into a function that takes the first argument and returns a function that takes the next argument, and so forth for all the arguments.

<sup>5</sup> Parallelization means running the same code concurrently without synchronization.  These concurrent processes are often run on multiple processors.

<sup>6</sup> Lazy evaluation is a compiler technique that avoids running code until the result is needed.

<sup>7</sup> A process is deterministic if repetitions yield the same result every time.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>426</wp:post_id>
		<wp:post_date>2013-11-08 22:08:20</wp:post_date>
		<wp:post_date_gmt>2013-11-08 21:08:20</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-practical-introduction-to-functional-programming</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>106</wp:comment_id>
			<wp:comment_author><![CDATA[Does FP allow mutability of local names? | 我爱源码网]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.52sourcecode.com/post-23158.html</wp:comment_author_url>
			<wp:comment_author_IP>106.185.38.94</wp:comment_author_IP>
			<wp:comment_date>2015-02-05 16:56:10</wp:comment_date>
			<wp:comment_date_gmt>2015-02-05 15:56:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] reading the below para of this article, I see that, above code looks fine wrt changing state of name count, for example: [count += [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>107</wp:comment_id>
			<wp:comment_author><![CDATA[OpenQuality.ru | Качество программного обеспечения]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.openquality.ru/software-quality-news-0215/</wp:comment_author_url>
			<wp:comment_author_IP>185.84.108.3</wp:comment_author_IP>
			<wp:comment_date>2015-03-01 21:05:06</wp:comment_date>
			<wp:comment_date_gmt>2015-03-01 20:05:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] &#8226;&nbsp;Введение в функциональное программирование: практическое руководство. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>105</wp:comment_id>
			<wp:comment_author><![CDATA[Does FP allow mutability of local names? | DL-UAT]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://dluat.com/does-fp-allow-mutability-of-local-names/</wp:comment_author_url>
			<wp:comment_author_IP>125.212.220.231</wp:comment_author_IP>
			<wp:comment_date>2015-02-05 16:12:28</wp:comment_date>
			<wp:comment_date_gmt>2015-02-05 15:12:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] reading the below para of this article, I see that, above code looks fine wrt changing state of name count, for example: [count += [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>99</wp:comment_id>
			<wp:comment_author><![CDATA[Visto nel Web &#8211; 168 | Ok, panico]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>https://okpanico.wordpress.com/2015/02/01/visto-nel-web-168/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.255.73</wp:comment_author_IP>
			<wp:comment_date>2015-02-01 09:05:24</wp:comment_date>
			<wp:comment_date_gmt>2015-02-01 08:05:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] A practical introduction to functional programming ::: Mary Rose Cook [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>95</wp:comment_id>
			<wp:comment_author><![CDATA[Mary Rose Cook on FP in Python]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://metaperl.org/python/mary-rose-cook-on-fp-in-python</wp:comment_author_url>
			<wp:comment_author_IP>69.56.173.168</wp:comment_author_IP>
			<wp:comment_date>2015-01-28 09:44:43</wp:comment_date>
			<wp:comment_date_gmt>2015-01-28 08:44:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] http://maryrosecook.com/blog/post/a-practical-introduction-to-functional-programming [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>92</wp:comment_id>
			<wp:comment_author><![CDATA[Python learning resources | Wei Shen&#039;s Note]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.shenwei.me/python-learning-resources/</wp:comment_author_url>
			<wp:comment_author_IP>198.199.109.35</wp:comment_author_IP>
			<wp:comment_date>2015-01-26 08:31:37</wp:comment_date>
			<wp:comment_date_gmt>2015-01-26 07:31:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] A practical introduction to functional programming [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>93</wp:comment_id>
			<wp:comment_author><![CDATA[Bookmarks for January 25th through January 26th | Chris&#039;s Digital Detritus]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://chris.cothrun.com/2015/01/26/bookmarks-for-january-25th-through-january-26th/</wp:comment_author_url>
			<wp:comment_author_IP>108.165.22.158</wp:comment_author_IP>
			<wp:comment_date>2015-01-26 21:04:12</wp:comment_date>
			<wp:comment_date_gmt>2015-01-26 20:04:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] A practical introduction to functional programming at Mary Rose Cook &#8211; [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>91</wp:comment_id>
			<wp:comment_author><![CDATA[A practical introduction to functional programming &laquo; Another Word For It]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://tm.durusau.net/?p=59804</wp:comment_author_url>
			<wp:comment_author_IP>66.96.183.77</wp:comment_author_IP>
			<wp:comment_date>2015-01-25 23:12:13</wp:comment_date>
			<wp:comment_date_gmt>2015-01-25 22:12:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] A practical introduction to functional programming by Mary Rose Cook. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>108</wp:comment_id>
			<wp:comment_author><![CDATA[Февральская лента: лучшее за месяц | Блоги экспертов]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.timglu.com/%d1%84%d0%b5%d0%b2%d1%80%d0%b0%d0%bb%d1%8c%d1%81%d0%ba%d0%b0%d1%8f-%d0%bb%d0%b5%d0%bd%d1%82%d0%b0-%d0%bb%d1%83%d1%87%d1%88%d0%b5%d0%b5-%d0%b7%d0%b0-%d0%bc%d0%b5%d1%81%d1%8f%d1%86</wp:comment_author_url>
			<wp:comment_author_IP>80.78.248.198</wp:comment_author_IP>
			<wp:comment_date>2015-03-02 00:11:00</wp:comment_date>
			<wp:comment_date_gmt>2015-03-01 23:11:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] &#8226;&nbsp;Введение в функциональное программирование: практическое руководство. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Screencast about writing a Lisp interpreter in JavaScript</title>
		<link>http://maryrosecook.com/blog/post/a-screencast-of-the-talk-i-gave-at-brooklynjs-about-writing-a-lisp-interpreter-in-javascript</link>
		<pubDate>Sun, 23 Feb 2014 21:17:02 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/?p=432</guid>
		<description></description>
		<content:encoded><![CDATA[This is a recapitulation of the talk I gave at BrooklynJS in February 2014.  I covered the same material at a more measured pace in <a href="/post/little-lisp-interpreter">this article</a>.  You can read the <a href="https://github.com/maryrosecook/littlelisp/blob/master/littlelisp.js">code</a> on GitHub.

<div class="video-container"><iframe width="600" height="450" src="//www.youtube.com/embed/hqnTvuvXPCc" frameborder="0" allowfullscreen></iframe></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>432</wp:post_id>
		<wp:post_date>2014-02-23 22:17:02</wp:post_date>
		<wp:post_date_gmt>2014-02-23 21:17:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-screencast-of-the-talk-i-gave-at-brooklynjs-about-writing-a-lisp-interpreter-in-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>New York, 2014</title>
		<link>http://maryrosecook.com/blog/post/new-york-2014</link>
		<pubDate>Fri, 14 Mar 2014 21:47:07 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/blog/?p=434</guid>
		<description></description>
		<content:encoded><![CDATA[A video I made about Hacker School.

<div class="video-container"><iframe width="600" height="338" src="//www.youtube-nocookie.com/embed/KuJJXwOb9sA?rel=0" frameborder="0" allowfullscreen></iframe></div>

<hr/>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>434</wp:post_id>
		<wp:post_date>2014-03-14 22:47:07</wp:post_date>
		<wp:post_date_gmt>2014-03-14 21:47:07</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-york-2014</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Testing from the ground up</title>
		<link>http://maryrosecook.com/blog/post/testing-from-the-ground-up</link>
		<pubDate>Thu, 26 Jun 2014 21:39:52 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/blog/?p=442</guid>
		<description></description>
		<content:encoded><![CDATA[Tests are pieces of code that check if your main code works.  I write tests to catch bugs when I refactor.  I write tests to force myself to think through and handle edge cases.  I write tests to show the users of my project that my code does what I say it does.

For this essay, I will describe the code and tests for a tiny web app that draws a blue sky if it's day time.

<img src="/images/bluesky.png" width="600" height="100" />

And a black sky if it's night time.

<img src="/images/blacksky.png" width="600" height="100" />

I will describe all the code I wrote.  The web app.  The microscopic testing framework.  The tests for the client side code.  The mocks that fake layers of the web app and technologies that are not pertinent.  The tests that use these mocks.  The refactored code that simplifies the mocks by dividing the web app code into different pieces that have single responsibilites.

Along the way, I will talk about many fun things.  Temporarily patching libraries written by other people.  Writing code that pretends to be the internet.  Making Ajax requests by hand.  Writing a little web server.  Examining a function to find out how many arguments it expects.  Making asynchronous blocks of code run serially so they don't tread on each other's toes.

<h3>The code</h3>

To see the code from this essay in runnable form, go to the <a href="https://github.com/maryrosecook/testing-from-the-ground-up">Testing From The Ground Up GitHub repository</a>.  At each evolution of the code, I will include a link to the corresponding commit.

<h3>The web app</h3>

This is the HTML that defines the only page in the web app.  It has a canvas element that displays the sky.  It loads the client side JavaScript, <code>client.js</code>.  When the DOM is ready, it calls <code>loadTime()</code>, the one and only function.

<pre class="prettyprint">
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;script src="client.js"&gt;&lt;/script&gt;
  &lt;/head&gt;

  &lt;body onload="loadTime();"&gt;
    &lt;canvas id="canvas" width="600" height="100"&gt;&lt;/canvas&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre>

Below is the client side JavaScript.

<code>loadTime()</code> starts by making an Ajax request to the server to get the current time.  This is done in several steps.  First, it creates an <code>XMLHttpRequest</code> object.  Second, near the bottom of the function, it configures the object to make a <code>GET</code> request to <code>"/time.json"</code>.  Third, it sends the request.  Fourth, when the requested time data arrives at the client, the function bound to <code>request.onload</code> fires.

The bound function grabs the drawing context for the canvas element.  It parses <code>"day"</code> or <code>"night"</code> from the JSON returned by the server.  If the value is <code>"day"</code>, it sets the draw color to blue and draws a rectangle that takes up the whole canvas.  If the value is <code>"night"</code>, the color is black.

<pre class="prettyprint">
;(function(exports) {
  exports.loadTime = function() {
    var request = new XMLHttpRequest();
    request.onload = function(data) {
      var ctx = document.getElementById("canvas").getContext("2d");
      var time = JSON.parse(data.target.responseText).time;
      var skyColor = time === "day" ? "blue" : "black";

      ctx.fillStyle = skyColor;
      ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    };

    request.open("GET", "/time.json", true);
    request.send();
  };
})(this);
</pre>

Below is the server-side JavaScript.  It is run in <a href="http://nodejs.org/">Node.js</a>.  Near the bottom, the code uses the Node HTTP module to create a web server.  It specfies that every web request should be handled by <code>requestHandler()</code>.  Each time this function is called, Node passes it a <code>request</code> object that has the URL that was requested, and a <code>response</code> object that can be used to send data back to the client.

If the client requested <code>"/"</code>, the root, the <code>index.html</code> file is read from disk and its contents are sent back to be displayed in the user's browser.  If <code>"/time.json"</code> was requested, the server looks up the time, creates a piece of JSON that looks something like <code>{ "time": "day" }</code> and sends it back to the user's web browser.

<pre class="prettyprint">
var http = require("http");
var fs = require("fs");

var requestHandler = function (request, response) {
  if (request.url === "/") {
    fs.readFile(__dirname + "/index.html", function (err, data) {
      response.writeHead(200, { "Content-Type": "text/html" });
      response.end(data);
    });
  } else if (request.url === "/client.js") {
    fs.readFile(__dirname + "/client.js", function (err, data) {
      response.writeHead(200, { "Content-Type": "application/javascript" });
      response.end(data);
    });
  } else if (request.url === "/time.json") {
    response.writeHead(200, { "Content-Type": "application/json" });

    var hour = new Date().getHours();
    var time = hour > 6 && hour < 20 ? "day" : "night";

    response.end('{ "time": "' + time + '" }');
  }
};

http.createServer(requestHandler).listen(4000);

exports.requestHandler = requestHandler;
</pre>

Here is the <a href="https://github.com/maryrosecook/testing-from-the-ground-up/tree/f5665151b0ba1ded8cbf9615d676ca7ab343a535">code</a> for the basic web app.

<h3>A miniscule testing framework</h3>

It is possible to write tests that each include the generic code for reporting their outcome, for reporting errors, for calling the next test.  But, that means a lot of repetition.  It's easier to use a testing framework.  This is the one I wrote.

<pre class="prettyprint">
var test = function() {
  gatherTests(arguments).forEach(function(userTest) {
    userTest();
    process.stdout.write(".");
  });

  console.log();
};

test.isEqual = function(a, b) {
  if (a !== b) {
    throw a + " and " + b + " are not equal";
  }
};

var gatherTests = function(testArgs) {
  return Array.prototype.slice.call(testArgs).filter(function(x, i) {
    return i % 2 === 1;
  });
};

module.exports = test;
</pre>

<code>test()</code> could be used to write a test like this:

<pre class="prettyprint">
var test = require("./test");
test(
  "should test 1 equals 1", function() {
    test.isEqual(1, 1);
  });
</pre>

Which, when run, would look like this:

<pre class="prettyprint">
$ node test.js
  .
</pre>

How does the testing framework run the tests it is given?

<code>test()</code> takes a series of arguments that alternate between string descriptions and test functions.  It throws away the ones that are strings, which are merely human-readable window-dressing.  It puts the functions into an array.  It walks through that array, calling each function and printing a period to indicate that the test passed.

The test functions use <code>test.isEqual()</code> to assert that certain variables have certain values.  (A real testing framework would have a more permissive and pragmatic version of <code>isEqual()</code> that returned true in a case like <code>test.isEqual({ love: "you" }, { love: "you" })</code>.) If an assertion turns out to be unfounded, an exception is thrown, an error is printed and the tests stop running.

<h4>Mocking the server and the internet</h4>

I don't want to have to run the server when I run the tests.  That would be an extra step.  It would add statefulness that would need to be reset before each test.  It would necessitate network communications between the test and the server.

This is the code I wrote that pretends to be the server deciding what time it is and the internet relaying that information back to the client.  It does this by faking an Ajax request.  It replaces the <code>XMLHttpRequest</code> constructor function with a function that returns a home-made Ajax request object.  This object swallows the web app's call to <code>open()</code>.  When the web app calls <code>send()</code>, it calls the function that the web app has bound to <code>onload</code>.  It passes some fake JSON that makes it seem like it is always day time.

<pre class="prettyprint">
global.XMLHttpRequest = function() {
  this.open = function() {};

  this.send = function() {
    this.onload({
      target: { responseText: '{ "time": "day" }' }
    });
  };
};
</pre>

<h4>Mocking the canvas and the DOM</h4>

When the real code runs in a real web browser, it renders the sky to the real canvas in real blue.  This is problematic.  First, I don't want to require a browser to test my code.  Second, even if I capitulated to that requirement, it would be hard to check if the right thing happened.  I would probably need to look at the individual pixels of the canvas drawing context to see if they were bluey.

Instead of walking down that horrid road, I wrote some code that pretends to be the browser DOM and the canvas element.  It redefines <code>getElementById()</code> to return a fake canvas.  This has a fake <code>getContext()</code> that returns a fake drawing context that has a fake <code>fillRect()</code> and a fake reference to a fake canvas that has a <code>width</code> and <code>height</code>.  Instead of drawing, this function checks that the arguments passed to it have the expected values.

<pre class="prettyprint">
global.document = {
  getElementById: function() {
    return {
      getContext: function() {
        return {
          canvas: { width: 300, height: 150 },
          fillRect: function(x, y, w, h) {
            test.isEqual(x, 0);
            test.isEqual(y, 0);
            test.isEqual(w, 300);
            test.isEqual(h, 150);
            test.isEqual(this.fillStyle, "blue");
          }
        };
      }
    };
  }
};
</pre>

This is the full test.

<pre class="prettyprint">
var test = require("./test");
var client = require("../client");

test(
  "should draw blue sky when it is daytime", function() {
    global.XMLHttpRequest = function() {
      this.open = function() {};

      this.send = function() {
        this.onload({
          target: { responseText: '{ "time": "day" }' }
        });
      };
    };

    global.document = {
      getElementById: function() {
        return {
          getContext: function() {
            return {
              canvas: { width: 300, height: 150 },
              fillRect: function(x, y, w, h) {
                test.isEqual(x, 0);
                test.isEqual(y, 0);
                test.isEqual(w, 300);
                test.isEqual(h, 150);
                test.isEqual(this.fillStyle, "blue");
              }
            };
          }
        };
      }
    };

    client.loadTime();
  });
</pre>

Don't worry.  That code is as bad as this essay gets.

Here is the <a href="https://github.com/maryrosecook/testing-from-the-ground-up/tree/849ee4eb19f9d4558d4ee91b97d567b31c0d4849">code</a> that includes the testing framework and the first client side test.

<h4>The drawing code refactored into its own module</h4>

Those mocks are pretty horrid.  They make the test very long, which discourages me from writing tests to check for other ways the code might go wrong.  The mocks are horrid because the client side code is one big function that communicates with the server, asks what time it is, parses the response and draws in the canvas.

To solve this problem, I refactored the code by pulling the drawing code out into its own module, <code>renderer</code>.  This module includes <code>fillBackground()</code>, a function that fills the canvas with the passed color.  As a side benefit, the main web app code is now easier to understand and change.

<pre class="prettyprint">
;(function(exports) {
  exports.loadTime = function() {
    var request = new XMLHttpRequest();
    request.onload = function(data) {
      var time = JSON.parse(data.target.responseText).time;
      var color = time === "day" ? "blue" : "black";
      renderer.fillBackground(color);
    };

    request.open("GET", "/time.json", true);
    request.send();
  };

  var renderer = exports.renderer = {
    ctx: function() {
      return document.getElementById("canvas").getContext("2d");
    },

    fillBackground: function(color) {
      var ctx = this.ctx();
      ctx.fillStyle = color;
      ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    }
  };
})(this);
</pre>

This lets me replace the complex <code>document</code> mock with a short <code>renderer.ctx()</code> mock.   The test becomes shorter, simpler and less brittle.

<pre class="prettyprint">
var test = require("./test");
var client = require("../client");

test(
  "should draw sun and blue sky in canvas when it is daytime", function() {
    global.XMLHttpRequest = function() {
      this.open = function() {};

      this.send = function() {
        this.onload({
          target: { responseText: '{ "time": "day" }' }
        });
      };
    };

    client.renderer.ctx = function() {
      return {
        canvas: { width: 300, height: 150 },
        fillRect: function(x, y, w, h) {
          test.isEqual(x, 0);
          test.isEqual(y, 0);
          test.isEqual(w, 300);
          test.isEqual(h, 150);
          test.isEqual(this.fillStyle, "blue");
        }
      }
    };

    client.loadTime();
  });
</pre>

Here is the <a href="https://github.com/maryrosecook/testing-from-the-ground-up/tree/03b3da9180a7f9f6ba380c881cee2dcabea7e828">code</a> for the modularised renderer and resulting simplified client side test.

I modularised the client side code further by splitting out three more functions.

This is <code>get()</code>.  It makes an Ajax request to the passed URL.  The Ajax request object calls the passed callback with the response.

<pre class="prettyprint">
var get = exports.get = function(url, callback) {
  var request = new XMLHttpRequest();
  request.onload = callback;
  request.open("GET", url, true);
  request.send();
};
</pre>

This is <code>getTime()</code>.  It uses <code>get()</code> to make an Ajax request to <code>"/time.json"</code> and parses <code>"day"</code> or <code>"night"</code> from the response.

<pre class="prettyprint">
exports.getTime = function(callback) {
  exports.get("/time.json", function(data) {
    callback(JSON.parse(data.target.responseText).time);
  });
};
</pre>

This is <code>displayTime()</code>.  It takes a string with the value <code>"day"</code> or <code>"night"</code> and draws either a blue sky or a black sky.

<pre class="prettyprint">
exports.displayTime = function(time) {
  var color = time === "day" ? "blue" : "black";
  renderer.fillBackground(color);
};
</pre>

I changed the <code>body</code> tag in the HTML page.  It now calls <code>getTime()</code>, passing <code>displayTime()</code> as the callback.

<pre class="prettyprint">
&lt;body onload="getTime(displayTime);"&gt;
  &lt;canvas id="canvas" width="600" height="100"&gt;&lt;/canvas&gt;
&lt;/body&gt;
</pre>

Having more modular code means that I can mock parts of the web app API, rather than mocking code written by third parties.  This makes it easier to write tests that test a specific piece of functionality.

Using this refactor, I could write tests that are more extensive.  The first test checks that <code>getTime()</code> correctly parses JSON sent by the server.  The second test checks that a call to <code>fillBackground()</code> draws a rectangle at the correct position and size.  The third test checks that <code>displayTime()</code> draws a rectangle of the correct color for the time of day.

<pre class="prettyprint">
var test = require("./test");
var client = require("../client");

test(
  "should parse time from server", function() {
    client.get = function(_, callback) {
      callback({ target: { responseText: '{ "time": "day" }' }});
    };

    client.getTime(function(time) { test.isEqual(time, "day"); });
  },

  "should draw rect of passed size and color when fillBackground() called", function() {
    client.renderer.ctx = function() {
      return {
        canvas: { width: 300, height: 150 },
        fillRect: function(x, y, w, h) {
          test.isEqual(x, 0);
          test.isEqual(y, 0);
          test.isEqual(w, 300);
          test.isEqual(h, 150);
        }
      }
    };

    client.renderer.fillBackground("blue");
  },

  "should draw blue sky when it is daytime", function() {
    client.renderer.fillBackground = function(color) {
      test.isEqual(color, "blue");
    };

    client.displayTime("day");
  });
</pre>

Here is the <a href="https://github.com/maryrosecook/testing-from-the-ground-up/tree/596e3d7af644e8153427f463c221e0efa3e2dcb8">code</a> for the more modular client code and more extensive tests.

<h3>Testing the server side code</h3>

<h4>Asynchronous tests</h4>

Some of the responsibilities of a web server require asynchronous operations.  If a browser sends a request to the web app for the URL <code>"/"</code>, it gets back the contents of the <code>index.html</code> file.  To make this happen, the file needs to be read from disk asynchronously and the contents sent to the client once they have been read.  Similarly, if the browser requests the URL <code>"/client.js"</code>, it gets back the contents of the <code>client.js</code> file.

These are the tests I wrote to check that both cases are handled correctly.

<pre class="prettyprint">
var test = require("./test");
var requestHandler = require("../server").requestHandler;
var http = require("http");

test(
  "should send index.html when / requested", function() {
    http.ServerResponse.prototype.end = function(data) {
      test.isEqual(data.toString().substr(0, 9), "&lt;!doctype");
    };

    requestHandler({ url: "/" }, new http.ServerResponse({}));
  },

  "should send client.js when /client.js requested", function() {
    http.ServerResponse.prototype.end = function(data) {
      test.isEqual(data.toString().substr(0, 10), ";(function");
    };

    requestHandler({ url: "/client.js" }, new http.ServerResponse({}));
  });
</pre>

The output when I run these tests:

<pre class="prettyprint">
$ node server_tests.js
  ..

  test.js:12
    throw a + " and " + b + " are not equal";
                          ^
  &lt;!doctype  and ;(function are not equal
</pre>

An exception is thrown, yet there are two periods indicating two passed tests.  Something is wrong.

In the first test, <code>response.end()</code> is mocked with a function that checks that <br/> <code>"&lt;!doctype"</code> is sent to the user. Next, <code>requestHandler()</code> is called, requesting the URL <code>"/"</code>.  <code>requestHandler()</code> starts reading <code>index.html</code> from disk.  While the file is being read, the test framework presses on with its work.  Uh oh.  That is, the framework prints a period and starts the second test, though the <code>response.end()</code> mock has not asserted the value of the response.  <code>response.end()</code> is re-mocked with a function that checks that <code>";(function"</code> is sent to the user.  Double uh oh.  <code>requestHandler()</code> is called by the second test.  It requests the URL <code>"/client.js"</code>.  <code>requestHandler()</code> starts reading <code>client.js</code> from disk.  The framework prints another premature period.

At some point later, <code>index.html</code> is read from disk.  This means that the callback in <code>requestHandler()</code> is called and it calls <code>response.end()</code> with the contents of <code>index.html</code>.  Unfortunately, by this time, <code>response.end()</code> has been mocked with a function expecting <code>";(function"</code>. The assertion fails.

This problem can be solved by running tests serially.  A test is run.  It signals it has finished.  The next test is run.

This may seem pedantic.  Shouldn't tests that are testing asynchronous behaviour be able to cope with with the dangers of asynchrony? Well, yes and no.  They should certainly test the asynchronous behaviours of <code>requestHandler()</code>.  But they should not have to cope with other tests messing about with their execution environment part way through their execution.

(It would be possible to go further and make the tests completely functionally pure.  This could be done in a fundamentalist way: the test framework resets the execution context before each test.  Or it could be done in a pragmatic way: each test undoes the changes it made to the execution environment.  Both ways are outside the scope of this essay.)

I rewrote the testing framework to run asynchronous tests serially.  Each asynchronous test binds a <code>done()</code> callback parameter.  It calls this when it has made all its assertions.  The testing framework uses the execution of this callback as a signal to run the next test.  Here are the rewritten tests.

<pre class="prettyprint">
var test = require("./test");
var requestHandler = require("../server").requestHandler;
var http = require("http");

test(
  "should send index.html when / requested", function(done) {
    http.ServerResponse.prototype.end = function(data) {
      test.isEqual(data.toString().substr(0, 9), "&lt;!doctype");
      done();
    };

    requestHandler({ url: "/" }, new http.ServerResponse({}));
  },

  "should send client.js when /client.js requested", function(done) {
    http.ServerResponse.prototype.end = function(data) {
      test.isEqual(data.toString().substr(0, 10), ";(function");
      done();
    };

    requestHandler({ url: "/client.js" }, new http.ServerResponse({}));
  });
</pre>

<h4>A miniscule asynchronous testing framework</h4>

Below is the code for the asynchronous testing framework.

Look at <code>runTests()</code>.  It takes <code>userTests</code>, an array that contains the test functions to be run.  If that array is empty, the tests are complete and the program exits.  If it is not empty, it looks at the <code>length</code> attribute of the next test function.  If the attribute has the value <code>1</code>, the test expects one argument: a <code>done()</code> callback.  It runs <code>testAsync()</code>, passing the test function and a callback that prints a period and recurses on <code>runTests()</code> with the remaining test functions.

<code>testAsync()</code> creates a timeout that will fire in one second.  It runs the test function, passing a <code>done()</code> callback for the test to run when it is complete.  If the callback gets run, the timeout is cleared and <code>testDone()</code> is called to indicate that the next test can run.  If the <code>done()</code> callback is never run by the test function, something went wrong.  The timeout will fire and throw an exception, and the program will exit.

If the <code>length</code> attribute of the test function has the value <code>0</code>, the function is run with <code>testSync()</code>.  This is the same as <code>testAsync()</code>, except there is no timeout and the <code>testDone()</code> callback is called as soon as the test function has completed.

<pre class="prettyprint">
var test = function() {
  runTests(gatherTests(arguments));
};

var runTests = function(userTests) {
  if (userTests.length === 0) {
    console.log();
    process.exit();
  } else {
    var testDone = function() {
      process.stdout.write(".");
      runTests(userTests.slice(1));
    };

    if (userTests[0].length === 1) {
      testAsync(userTests[0], testDone);
    } else {
      testSync(userTests[0], testDone);
    }
  }
};

var testSync = function(userTest, testDone) {
  userTest();
  testDone();
};

var testAsync = function(userTest, testDone) {
  var timeout = setTimeout(function() {
    throw "Failed: done() never called in async test.";
  }, 1000);

  userTest(function() {
    clearTimeout(timeout);
    testDone();
  });
};

test.isEqual = function(a, b) {
  if (a !== b) {
    throw a + " and " + b + " are not equal";
  }
};

var gatherTests = function(testArgs) {
  return Array.prototype.slice.call(testArgs).filter(function(x, i) {
    return i % 2 === 1;
  });
};

module.exports = test;
</pre>

Here is the <a href="https://github.com/maryrosecook/testing-from-the-ground-up/tree/1e166453f98b22f73a7736f62a951022b4d1e06f">code</a> for the asynchronous testing framework and the new server tests.

<h4>An exercise</h4>

Now that it is possible to write asynchronous tests, I can write the tests for the server.  Or, rather: you can.

If you are not sure where to start, try refactoring the server so the code is more modular.  Write a function that sends the passed string with the passed <code>Content-Type</code> to the client.  Write a function that reads a static file from disk and responds with the contents.  Write a function that converts the current date into <code>"day"</code> or <code>"night"</code>.  Write a function that takes a request for a certain URL and sends the right response.

Once your refactor is complete, or maybe while it is in progress, you can write your tests.

<h3>Summary</h3>

I wrote a simple web app.  I wrote tests for it and discovered that I could mock the pieces I didn't want to run when I ran the tests.  I discovered that scary things like Ajax and the canvas API really aren't so scary when I wrote skeletal versions of them.  I realised that the mocks I had written were quite verbose.  I refactored the web app code to make it more modular.  This made the code better and easier to change in the future.  It meant I could mock the interfaces I had written, rather than those invented by other people.  This meant the mocks became simpler or unnecessary.  This made it easier to write tests, so I could write more of them and test the web app more extensively.

I wrote two tests for the server.  I discovered that the test framework ran them in parallel, which meant they interfered with each other.  I rewrote the test framework to run tests serially.  I modified the tests to signal when they were finished.  I handed over the rest of the job to you.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>442</wp:post_id>
		<wp:post_date>2014-06-26 22:39:52</wp:post_date>
		<wp:post_date_gmt>2014-06-26 21:39:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>testing-from-the-ground-up</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Scarface, Prince of the City and Pieter de Hooch</title>
		<link>http://maryrosecook.com/blog/post/scarface-prince-of-the-city-and-pieter-de-hooch</link>
		<pubDate>Wed, 06 Aug 2014 15:48:35 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/blog/?p=445</guid>
		<description></description>
		<content:encoded><![CDATA[Brian De Palma is very good at making his scenes feel like they are part of a living world.  Look at the first drug deal in <a href="http://en.wikipedia.org/wiki/Scarface_(1983_film)">Scarface</a>.  There are two shots that connect the car on the street to the rooms in the apartment where the deal is being done.  

In the first shot, the camera follows Tony and Chico across the road and up the stairs to the door of the apartment.

<div class="video-container"><iframe width="600" height="285" src="//www.youtube.com/embed/kX5yW_ZS01I?rel=0" frameborder="0" allowfullscreen></iframe></div>

In the second shot, the camera goes from the window of the sitting room, down into the street to the car, then back up into the apartment through the bathroom window.

<div class="video-container"><iframe width="600" height="285" src="//www.youtube.com/embed/chSEVoXMn_s?rel=0" frameborder="0" allowfullscreen></iframe></div>

But, the effect of a living world is diluted by a feeling of voyeurism.  The second shot relies on the movement of the camera, rather than the movement of the objects in the scene.  The camera is independent of the world.

Sidney Lumet achieves the same effect of a living world.  But, his camera is mostly an observer.  It is static, or it makes only unintrusive movements.  It never peers.  In this shot from <a href="http://en.wikipedia.org/wiki/Prince_of_the_City">Prince of the City</a>, a whole block is brought alive when two running men disappear behind a building and reappear on the other side.  The pan and track show us the action, but at a remove.  Like the first Scarface shot, it is the movement of the characters from one place to another that brings everything to life.  But, Lumet creates an even subtler effect by making the men disappear and reappear.  This goes beyond connecting one visible place to another.  It suggests places that are out of sight, which is more evocative of a living world.

<div class="video-container"><iframe width="600" height="338" src="//www.youtube.com/embed/kHy_qeT0Mvg?rel=0" frameborder="0" allowfullscreen></iframe></div>

Pieter de Hooch achieves the same effect in his painting, Paying the Hostess.  Look at how light in the sky on the far left shines in through a hidden window, through a mostly obscured back room and finally falls on the wall on the far right.  The light makes real the things we can't see.  It, too, is better than de Palma because it achieves its effect by making something disappear and then reappear.  But, remarkably, de Hooch does it with a still image.  No moving objects.  No moving frame.  Just moving light.

<img src="http://maryrosecook.com/images/payingthehostess.jpg" width="600" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>445</wp:post_id>
		<wp:post_date>2014-08-06 16:48:35</wp:post_date>
		<wp:post_date_gmt>2014-08-06 15:48:35</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scarface-prince-of-the-city-and-pieter-de-hooch</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[prince-of-the-city-and-pieter-de-hooch]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My speech to new Hacker Schoolers</title>
		<link>http://maryrosecook.com/blog/post/my-speech-to-new-hacker-schoolers</link>
		<pubDate>Mon, 17 Nov 2014 21:15:48 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/blog/?p=450</guid>
		<description></description>
		<content:encoded><![CDATA[Hi.  I'm Mary.  I'm a facilitator at Hacker School.

First, I'm going to talk about what facilitators do.  Second, I'm going to give you advice about making the most of your time at Hacker School.

What do facilitators do?

We're here to help you help yourselves learn.  We can do that in a number of ways.

We can review your code.  That is: we can look at your code and talk about ways it might be improved.  If you want code review, it's best if you come prepared.  Identify areas of your code that you're worried about.  Or pick a part of your program and a goal, like making the code faster, more idiomatic, shorter, easier to read, more functional or more object-oriented.

We can pair program with you.  That is: we can collaborate with you on your code.  When you pair with someone, try and be your most conscientious programmer self.  Practice higher level programming skills like diving deep and debugging systematically.

We can help you choose a project that fits your learning goals for Hacker School.  This might mean pointing you for inspiration to the well-thumbed list of Fun and Educational Hacker School Projects.  This might mean talking through what your learning goals actually are.

We run workshops on subjects that interest us.  Recently, I've run workshops on getting started with functional programming, writing a game and exploring prototypal inheritance in JavaScript.

We can give you advice on how to get started with a new project or technology.  That might mean talking about a reasonable architecture for your project.  Or it might mean talking through the basics of a technology.

We can recommend other Hacker Schoolers, facilitators or alumni who share your interests and who you might enjoy working with.

We can help you get unstuck when you've been struggling with a problem.  Some of us use a guideline about when to ask for help.  If you're stuck, you must struggle for fifteen minutes.  If you've struggled for fifteen minutes, you must ask for help.  One useful way to spend that fifteen minutes is to rubber duck your problem.  That is, explain your problem out loud or in your head to a literal or notional yellow rubber duck.  Sometimes, this yields the answer.  Sometimes, it identifies a promising avenue of investigation.  And it always clarifies your understanding of the problem.

Finally, we can talk to you if you're having problems in your personal life.  Hacker School can be hard.  It's a new environment that is isolated from family and old friends.  We can talk with you about problems you're having.

All the things facilitators do for you can be done by you for each other: code review, pairing, running workshops, giving counsel and so on.  There's only one difference between facilitators and Hacker Schoolers.  Your priority is your learning.  But we're paid to be here, so our priority is your learning, too.

Advice for getting the most out of Hacker School

You've probably made big sacrifices to come here.  Maybe you've saved up all your money for months or years.  Maybe you've quit your job.  Maybe you've moved to a new city.  Maybe you've decided to neglect your hobbies, or your children, or your friends.

If you make Hacker School the most productive three months of your life, that's fine.  That's pretty OK.  But, given the sacrifices you've made, it would be even better to use Hacker School to learn skills that will compound your improvement as a programmer forever.  Hacker School is a great place to put into muscle memory these higher level skills that get neglected under pressure from grades or bosses or worrying about what the internet will think.

There are four skills that have paid great dividends for me.

Dive deep.  You're using a framework, library or language and you realise you don't understand something about it.  Take the time to understand by reading the source, playing around in a REPL or reading the documentation.  This cements your mental model and helps make you a sure-footed programmer.

Debug systematically.  When you're stuck on a bug, don't just type in things you think might fix the problem.  Form a hypothesis about what the problem is.  Run experiments.  If the results support the hypothesis, the problem is now clear and that is most of the battle.  Otherwise, use the observations from your experiments to form a new hypothesis.

Learn your tools.  Fix those nagging problems in your config.  Learn more keyboard shortcuts.  Automate processes you do regularly.  Don't lose days on this.  Fix one thing, then get back to work.

Learn one programming language really well.  This takes months or years.  But it has two big advantages.  First, you now have a language you can think in.  You can express an algorithm or a thought fluently without looking up syntax or APIs. Second, you will learn about the deep ideas in programming.  You could learn these deep ideas by learning new languages.  Programming in Erlang teaches you about concurrency.  Programming in C teaches you about memory management.  But sticking with one language keeps you in familiar surroundings.  This lets you appreciate the subtleties of these fundamental ideas.  You, know: space, time, shit like that.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>450</wp:post_id>
		<wp:post_date>2014-11-17 22:15:48</wp:post_date>
		<wp:post_date_gmt>2014-11-17 21:15:48</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-speech-to-new-hacker-schoolers</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Racecar</title>
		<link>http://maryrosecook.com/blog/post/racecar</link>
		<pubDate>Sat, 27 Dec 2014 12:22:46 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/blog/?p=454</guid>
		<description></description>
		<content:encoded><![CDATA[In December 2014, I did the <a href="http://ludumdare.com">Ludum Dare</a> game jam.  I made <a href="http://coquette.maryrosecook.com/demos/racecar">Racecar</a>, a top-down 2D racing game, in forty-eight hours.  I used <a href="http://coquette.maryrosecook.com/">Coquette</a>, my micro framework for JavaScript games.  A few days later, I cleaned up the Racecar code and added the game to the <a href="http://coquette.maryrosecook.com/">Coquette</a> demos.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>454</wp:post_id>
		<wp:post_date>2014-12-27 13:22:46</wp:post_date>
		<wp:post_date_gmt>2014-12-27 12:22:46</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>racecar</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Git in six hundred words</title>
		<link>http://maryrosecook.com/blog/post/git-in-six-hundred-words</link>
		<pubDate>Wed, 21 Jan 2015 17:02:28 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/blog/?p=457</guid>
		<description></description>
		<content:encoded><![CDATA[(This essay is a companion piece to <a href="http://gitlet.maryrosecook.com">Gitlet</a>, my implementation of Git in JavaScript.)

Imagine you have a directory called <code>alpha</code>. It contains a file called <code>number.txt</code> that contains the text <code>first</code>.

You run <code>git init</code> to set up <code>alpha</code> as a Git repository.

You run <code>git add number.txt</code> to add <code>number.txt</code> to the index. The index is a list of all the files that Git is keeping track of. It maps filenames to the content of the files. It now has the mapping <code>number.txt -> first</code>. Running the add command has also added a blob object containing <code>first</code> to the Git object database.

You run <code>git commit -m first</code>. This does three things. First, it creates a tree object in the objects database. This object represents the list of items in the top level of the alpha directory. This object has a pointer to the <code>first</code> blob object that was created when you ran <code>git add</code>. Second, it creates a commit object that represents the version of the repository that you have just committed. This includes a pointer to the tree object. Third, it points the master branch at the new commit object.

You run <code>git clone . ../beta</code>. This creates a new directory called <code>beta</code>. It initializes it as a Git repository. It copies the objects in the alpha objects database to the beta objects database. It points the master branch on beta at the commit object that the master branch points at on the alpha repository. It sets the index on beta to mirror the content of the first commit. It updates your files - <code>number.txt</code> - to mirror the index.

You move to the beta repository. You change the content of <code>number.txt</code> to <code>second</code>. You run <code>git add number.txt</code> and <code>git commit -m second</code>. The commit object that is created has a pointer to its parent, the first commit.  The commit command points the master branch at the second commit.

You move back to the alpha repository. You run <code>git remote add beta ../beta</code>. This sets the beta repository as a remote repository.

You run <code>git pull beta master</code>.

Under the covers, this runs <code>git fetch beta master</code>. This finds the objects for the second commit and copies them from the beta repository to the alpha repository. It points alpha's record of beta's master at the second commit object. It updates <code>FETCH_HEAD</code> to show that the master branch was fetched from the beta repository.

Under the covers, the pull command runs <code>git merge FETCH_HEAD</code>. This reads <code>FETCH_HEAD</code>, which shows that the master branch on the beta repository was the most recently fetched branch. It gets the commit object that alpha's record of beta's master is pointing at. This is the second commit. The master branch on alpha is pointing at the first commit, which is the ancestor of the second commit. This means that, to complete the merge, the merge command can just point the master branch at the second commit. The merge command updates the index to mirror the contents of the second commit. It updates the working copy to mirror the index.

You run <code>git branch red</code>. This creates a branch called <code>red</code> that points at the second commit object.

You run <code>git checkout red</code>. Before the checkout, <code>HEAD</code> pointed at the master branch. It now points at the red branch. This makes the red branch the current branch.

You set the content of <code>number.txt</code> to <code>third</code>, run <code>git add numbers.txt</code> and run <code>git commit -m third</code>.

You run <code>git push beta red</code>. This finds the objects for the third commit and copies them from the alpha repository to the beta repository. It points the red branch on the beta repository at the third commit object, and that's it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>457</wp:post_id>
		<wp:post_date>2015-01-21 18:02:28</wp:post_date>
		<wp:post_date_gmt>2015-01-21 17:02:28</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>git-in-six-hundred-words</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>104</wp:comment_id>
			<wp:comment_author><![CDATA[六百字读懂 Git &#8211; 大米说]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://damishuo.com/archives/7</wp:comment_author_url>
			<wp:comment_author_IP>114.215.118.62</wp:comment_author_IP>
			<wp:comment_date>2015-02-04 06:11:16</wp:comment_date>
			<wp:comment_date_gmt>2015-02-04 05:11:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Git 核心功能代码也不过 300 行。这就是这篇精巧的小文：Git in 600 words，相应的代码在 Github [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>102</wp:comment_id>
			<wp:comment_author><![CDATA[Professional Development &#8211; 2015 &#8211; Week 5]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.geoffmazeroff.com/2015/02/02/professional-development-2015-week-5/</wp:comment_author_url>
			<wp:comment_author_IP>74.220.219.127</wp:comment_author_IP>
			<wp:comment_date>2015-02-02 06:13:42</wp:comment_date>
			<wp:comment_date_gmt>2015-02-02 05:13:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Git In Six Hundred Words (via Brian Friesen) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>103</wp:comment_id>
			<wp:comment_author><![CDATA[六百字读懂 Git &#8211; 大米说]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.damishuo.com/?p=7</wp:comment_author_url>
			<wp:comment_author_IP>114.215.118.62</wp:comment_author_IP>
			<wp:comment_date>2015-02-04 06:07:29</wp:comment_date>
			<wp:comment_date_gmt>2015-02-04 05:07:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Mary Rose Cook   译文出处：Amio &#8211; [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>101</wp:comment_id>
			<wp:comment_author><![CDATA[六百字读懂 Git - memleak.in | memleak.in]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://memleak.in/2015/02/02/%e5%85%ad%e7%99%be%e5%ad%97%e8%af%bb%e6%87%82-git/</wp:comment_author_url>
			<wp:comment_author_IP>54.92.9.101</wp:comment_author_IP>
			<wp:comment_date>2015-02-02 03:48:01</wp:comment_date>
			<wp:comment_date_gmt>2015-02-02 02:48:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Git 核心功能代码也不过 300 行。这就是这篇精巧的小文：Git in 600 words，相应的代码在 Github [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>97</wp:comment_id>
			<wp:comment_author><![CDATA[git in six hundred words | Chenglong&#039;s Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://romition.com/archives/128</wp:comment_author_url>
			<wp:comment_author_IP>124.248.216.102</wp:comment_author_IP>
			<wp:comment_date>2015-01-29 13:05:57</wp:comment_date>
			<wp:comment_date_gmt>2015-01-29 12:05:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Author:http://maryrosecook.com/ [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>98</wp:comment_id>
			<wp:comment_author><![CDATA[六百字读懂Git &#8211; 波波博客]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.easymbol.com/?p=1347</wp:comment_author_url>
			<wp:comment_author_IP>103.224.80.24</wp:comment_author_IP>
			<wp:comment_date>2015-02-01 04:00:00</wp:comment_date>
			<wp:comment_date_gmt>2015-02-01 03:00:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 英文原文：Git in 600 words [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>100</wp:comment_id>
			<wp:comment_author><![CDATA[六百字读懂 Git | 月松博客月松博客]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://liuyuesong.cn/2015/02/liubaizidudonggit.html</wp:comment_author_url>
			<wp:comment_author_IP>121.199.20.147</wp:comment_author_IP>
			<wp:comment_date>2015-02-02 00:43:43</wp:comment_date>
			<wp:comment_date_gmt>2015-02-01 23:43:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Git 核心功能代码也不过 300 行。这就是这篇精巧的小文：Git in 600 words，相应的代码在 Github [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>96</wp:comment_id>
			<wp:comment_author><![CDATA[六百字读懂Git - memleak.in | memleak.in]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://memleak.in/2015/01/28/%e5%85%ad%e7%99%be%e5%ad%97%e8%af%bb%e6%87%82git/</wp:comment_author_url>
			<wp:comment_author_IP>54.92.9.101</wp:comment_author_IP>
			<wp:comment_date>2015-01-29 05:21:24</wp:comment_date>
			<wp:comment_date_gmt>2015-01-29 04:21:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 英文原文：Git in 600 words [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>94</wp:comment_id>
			<wp:comment_author><![CDATA[六百字读懂Git &#124; 我爱互联网]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.person168.com/?p=80522</wp:comment_author_url>
			<wp:comment_author_IP>173.255.243.155</wp:comment_author_IP>
			<wp:comment_date>2015-01-27 04:59:03</wp:comment_date>
			<wp:comment_date_gmt>2015-01-27 03:59:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 　　英文原文：Git in 600 words [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>90</wp:comment_id>
			<wp:comment_author><![CDATA[Hacker School: Day 13 | Axiomatic]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.chrisdrane.com/?p=163</wp:comment_author_url>
			<wp:comment_author_IP>208.113.233.247</wp:comment_author_IP>
			<wp:comment_date>2015-01-23 03:30:26</wp:comment_date>
			<wp:comment_date_gmt>2015-01-23 02:30:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] the public debut of her JavaScript port of Git, dubbed Gitlet, and a companion essay titled Git in Six Hundred Words. Kudos to Mary for completing a project that was many months in the making, and a sincere thanks [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>89</wp:comment_id>
			<wp:comment_author><![CDATA[Bookmarks for January 22nd | Chris&#039;s Digital Detritus]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://chris.cothrun.com/2015/01/22/bookmarks-for-january-22nd-7/</wp:comment_author_url>
			<wp:comment_author_IP>108.165.22.158</wp:comment_author_IP>
			<wp:comment_date>2015-01-23 03:00:39</wp:comment_date>
			<wp:comment_date_gmt>2015-01-23 02:00:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Git in six hundred words at Mary Rose Cook &#8211; [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>87</wp:comment_id>
			<wp:comment_author><![CDATA[Introducing Gitlet at Mary Rose Cook]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://maryrosecook.com/blog/post/introducing-gitlet</wp:comment_author_url>
			<wp:comment_author_IP>69.163.152.118</wp:comment_author_IP>
			<wp:comment_date>2015-01-22 21:41:29</wp:comment_date>
			<wp:comment_date_gmt>2015-01-22 20:41:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] don&#8217;t know much about the inner logic of Git, it is probably worth it to first read my essay, Git in six hundred words. But, if you already know what blobs and trees and fast forwards are, the code should be [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>109</wp:comment_id>
			<wp:comment_author><![CDATA[Git in Six Hundred Words / Kirti Thorat]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.kirtithorat.com/2015/02/12/git-in-six-hundred-words/</wp:comment_author_url>
			<wp:comment_author_IP>66.147.244.68</wp:comment_author_IP>
			<wp:comment_date>2015-03-12 10:04:53</wp:comment_date>
			<wp:comment_date_gmt>2015-03-12 09:04:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] You can read Git in six hundred words at: http://maryrosecook.com/blog/post/git-in-six-hundred-words [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Introducing Gitlet</title>
		<link>http://maryrosecook.com/blog/post/introducing-gitlet</link>
		<pubDate>Thu, 22 Jan 2015 20:41:24 +0000</pubDate>
		<dc:creator><![CDATA[maryrosecook]]></dc:creator>
		<guid isPermaLink="false">http://maryrosecook.com/blog/?p=460</guid>
		<description></description>
		<content:encoded><![CDATA[For the last few months, I have been writing <a href="http://gitlet.maryrosecook.com">Gitlet</a>, an implementation of Git in JavaScript.  This post is about the code and what it was like to write it.

I had two goals with Gitlet.

First, I wanted to learn the innards of Git really well.

Second, I wanted to use that knowledge to produce an essay, Git from the inside out, that gives a clear, deep explanation of Git and the ideas underlying it.  I want this essay to be a foundation for building intuition about how Git works.  I felt I would only be able to do this if I understood how Git works well enough to implement it.  For example, when I was writing the code, I realised that the Git object database contains two sets of information in one graph of objects: the history, commit by commit, and the repository content, file by file.  Which is to say: the repository content and its history are not two separate things, but two views of the same graph.

My implementation of Git is not intended to be fast or feature-complete.  It is intended to support commands that are commonly used and that demonstrate the core ideas in Git: <code>init</code>, <code>add</code>, <code>rm</code>, <code>commit</code>, <code>branch</code>, <code>checkout</code>, <code>diff</code>, <code>remote</code>, <code>fetch</code>, <code>merge</code>, <code>push</code>, <code>pull</code>, <code>status</code> and <code>clone</code>.  For example, I implemented <code>remote</code>, but only supported <code>git remote add</code> because <code>git remote remove</code> and the rest are just conveniences and their implementation says nothing about the essence of Git.

For another example, I implemented <code>merge</code> and supported fast forwards, un-conflicting merges and conflicted merges.  But, for conflicted files, the whole file is written as conflicting, rather than just the incompatible sections.  The difference between fast forwards and merge commits gets to the heart of Git.  Figuring out which sections of a file have changed does not.

I wrote the code to be short and very easy to understand.  I eagerly welcome pull requests that make the code shorter or easier to understand.  And, of course, bug fixes are much appreciated.

It's hard to say how much you need to know about Git to understand the code.  If you don't know much about the inner logic of Git, it is probably worth it to first read my essay, <a href="http://maryrosecook.com/blog/post/git-in-six-hundred-words">Git in six hundred words</a>.  But, if you already know what blobs and trees and fast forwards are, the code should be interesting.  Though the entire project is 1000 lines, the implementation of the main API commands is only 350 lines.

Finally, I want to talk about what it was like to write the code.

First, it was hard to figure out how Git works.  I went to the actual source to answer a few questions.  But doing that was time-consuming because I don't know C well.  <a href="https://wildlyinaccurate.com/a-hackers-guide-to-git">A Hacker's Guide to Git</a> was a killer introduction to the internals of Git.  It gave me a grounding in most of the commands I implemented.  Stack Overflow was helpful on some obscure questions.  I read a lot of Git documentation.  I referred again and again to <a href="https://www.quora.com/How-does-Git-merge-work/answer/Anders-Kaseorg?srid=I5Y&share=1">this elegant, detailed Quora answer</a> on how merging works.  I didn't implement recursive merges in the end, but this great <a href="http://codicesoftware.blogspot.com/2011/09/merge-recursive-strategy.html">Codice Software post</a> helped me understand them.  But, mostly, I could only answer my questions by creating repositories and running commands and diving into the <code>.git</code> directory to see what had happened.

Second, I had a strange feeling of discovery.  This feeling is hard to talk about.  Some behaviours were inexplicably difficult to implement.  I'd write ten lines that felt like they should be two.  But, slowly, patterns began to emerge.  I found that particular shapes of data occurred again and again.  I could represent directory hierarchies with nested objects.  I could represent indices by mapping file paths to hashes.  I could represent diffs by mapping paths to a change status and the hashes of the old, new and base versions.  Once I had code to create and translate these data structures, the Git API became much easier to implement.

And I found that fundamental operations on the <code>.git</code> directory could be composed to implement Git API commands.  For example: implementing checkout.  Read the current <code>HEAD</code>, get commit hash it points at, read the commit object, read the commit tree content and convert the content to an index.  Repeat for the branch to be checked out.  Diff the two indices.  Write that diff to the working copy.  Write the name of the branch being checked out to <code>HEAD</code>.  Convert the commit being checked out to an index.  Write that index to the <code>index</code> file.

These basic data types and operations seemed to express something of the fundamental nature of Git.  I've had this feeling before when working on novel projects.  But it was funny to feel the sensation of discovery when working on something I already knew existed.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>460</wp:post_id>
		<wp:post_date>2015-01-22 21:41:24</wp:post_date>
		<wp:post_date_gmt>2015-01-22 20:41:24</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introducing-gitlet</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>88</wp:comment_id>
			<wp:comment_author><![CDATA[1 – Git in six hundred words &#8211; blog.offeryour.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.offeryour.com/?p=9479</wp:comment_author_url>
			<wp:comment_author_IP>54.237.227.60</wp:comment_author_IP>
			<wp:comment_date>2015-01-23 01:52:50</wp:comment_date>
			<wp:comment_date_gmt>2015-01-23 00:52:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Read Startup article here: http://maryrosecook.com/blog/post/introducing-gitlet [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
</channel>
</rss>
